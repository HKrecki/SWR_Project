
SWR_Project_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006914  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08006ae8  08006ae8  00016ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ef4  08006ef4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006ef4  08006ef4  00016ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006efc  08006efc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006efc  08006efc  00016efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f00  08006f00  00016f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  200001dc  080070e0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000760  080070e0  00020760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d196  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e91  00000000  00000000  0002d3a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002f238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225af  00000000  00000000  000306a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d233  00000000  00000000  00052c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbdce  00000000  00000000  0005fe82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012bc50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c84  00000000  00000000  0012bca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006acc 	.word	0x08006acc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08006acc 	.word	0x08006acc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	if(ch == '\n'){
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b0a      	cmp	r3, #10
 8000ef8:	d109      	bne.n	8000f0e <__io_putchar+0x22>
		uint8_t ch2 = '\r';
 8000efa:	230d      	movs	r3, #13
 8000efc:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart3, &ch2, 1, HAL_MAX_DELAY);
 8000efe:	f107 010f 	add.w	r1, r7, #15
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	2201      	movs	r2, #1
 8000f08:	4807      	ldr	r0, [pc, #28]	; (8000f28 <__io_putchar+0x3c>)
 8000f0a:	f002 f99a 	bl	8003242 <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000f0e:	1d39      	adds	r1, r7, #4
 8000f10:	f04f 33ff 	mov.w	r3, #4294967295
 8000f14:	2201      	movs	r2, #1
 8000f16:	4804      	ldr	r0, [pc, #16]	; (8000f28 <__io_putchar+0x3c>)
 8000f18:	f002 f993 	bl	8003242 <HAL_UART_Transmit>
	return 1;
 8000f1c:	2301      	movs	r3, #1
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200001f8 	.word	0x200001f8

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f32:	f000 fbb5 	bl	80016a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f36:	f000 f82f 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3a:	f000 f8f1 	bl	8001120 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f3e:	f000 f897 	bl	8001070 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f42:	f000 f8bf 	bl	80010c4 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE BEGIN 2 */

  printf("Hello world!\n");
 8000f46:	4812      	ldr	r0, [pc, #72]	; (8000f90 <main+0x64>)
 8000f48:	f003 fd0e 	bl	8004968 <puts>
  /* Infinite loop */

  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(float i=0.0; i<10.0; i++){
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	e013      	b.n	8000f7c <main+0x50>
		  printf("Value: %f\n", i);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff fb17 	bl	8000588 <__aeabi_f2d>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	480d      	ldr	r0, [pc, #52]	; (8000f94 <main+0x68>)
 8000f60:	f003 fc7c 	bl	800485c <iprintf>
		  HAL_Delay(1000);
 8000f64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f68:	f000 fc0c 	bl	8001784 <HAL_Delay>
	  for(float i=0.0; i<10.0; i++){
 8000f6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f78:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f80:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8c:	d4e2      	bmi.n	8000f54 <main+0x28>
 8000f8e:	e7dd      	b.n	8000f4c <main+0x20>
 8000f90:	08006ae8 	.word	0x08006ae8
 8000f94:	08006af8 	.word	0x08006af8

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	; 0x50
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	2234      	movs	r2, #52	; 0x34
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f002 ffe6 	bl	8003f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	4b29      	ldr	r3, [pc, #164]	; (8001068 <SystemClock_Config+0xd0>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	4a28      	ldr	r2, [pc, #160]	; (8001068 <SystemClock_Config+0xd0>)
 8000fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fca:	6413      	str	r3, [r2, #64]	; 0x40
 8000fcc:	4b26      	ldr	r3, [pc, #152]	; (8001068 <SystemClock_Config+0xd0>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	4b23      	ldr	r3, [pc, #140]	; (800106c <SystemClock_Config+0xd4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a22      	ldr	r2, [pc, #136]	; (800106c <SystemClock_Config+0xd4>)
 8000fe2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b20      	ldr	r3, [pc, #128]	; (800106c <SystemClock_Config+0xd4>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ff8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ffc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffe:	2302      	movs	r3, #2
 8001000:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001002:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001006:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001008:	2304      	movs	r3, #4
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800100c:	23a8      	movs	r3, #168	; 0xa8
 800100e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001010:	2302      	movs	r3, #2
 8001012:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001014:	2307      	movs	r3, #7
 8001016:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001018:	2302      	movs	r3, #2
 800101a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4618      	mov	r0, r3
 8001022:	f001 fe23 	bl	8002c6c <HAL_RCC_OscConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800102c:	f000 f926 	bl	800127c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001034:	2302      	movs	r3, #2
 8001036:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800103c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001040:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001046:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	2105      	movs	r1, #5
 800104e:	4618      	mov	r0, r3
 8001050:	f000 ff98 	bl	8001f84 <HAL_RCC_ClockConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800105a:	f000 f90f 	bl	800127c <Error_Handler>
  }
}
 800105e:	bf00      	nop
 8001060:	3750      	adds	r7, #80	; 0x50
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <MX_USART3_UART_Init+0x50>)
 8001078:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 800107c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001080:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 8001096:	220c      	movs	r2, #12
 8001098:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 80010a8:	f002 f87e 	bl	80031a8 <HAL_UART_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010b2:	f000 f8e3 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200001f8 	.word	0x200001f8
 80010c0:	40004800 	.word	0x40004800

080010c4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010d2:	2206      	movs	r2, #6
 80010d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010d8:	2202      	movs	r2, #2
 80010da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001108:	f000 fdf3 	bl	8001cf2 <HAL_PCD_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001112:	f000 f8b3 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000023c 	.word	0x2000023c

08001120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	; 0x30
 8001124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	4b4c      	ldr	r3, [pc, #304]	; (800126c <MX_GPIO_Init+0x14c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a4b      	ldr	r2, [pc, #300]	; (800126c <MX_GPIO_Init+0x14c>)
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b49      	ldr	r3, [pc, #292]	; (800126c <MX_GPIO_Init+0x14c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	4b45      	ldr	r3, [pc, #276]	; (800126c <MX_GPIO_Init+0x14c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a44      	ldr	r2, [pc, #272]	; (800126c <MX_GPIO_Init+0x14c>)
 800115c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b42      	ldr	r3, [pc, #264]	; (800126c <MX_GPIO_Init+0x14c>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b3e      	ldr	r3, [pc, #248]	; (800126c <MX_GPIO_Init+0x14c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a3d      	ldr	r2, [pc, #244]	; (800126c <MX_GPIO_Init+0x14c>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b3b      	ldr	r3, [pc, #236]	; (800126c <MX_GPIO_Init+0x14c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b37      	ldr	r3, [pc, #220]	; (800126c <MX_GPIO_Init+0x14c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a36      	ldr	r2, [pc, #216]	; (800126c <MX_GPIO_Init+0x14c>)
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b34      	ldr	r3, [pc, #208]	; (800126c <MX_GPIO_Init+0x14c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	4b30      	ldr	r3, [pc, #192]	; (800126c <MX_GPIO_Init+0x14c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a2f      	ldr	r2, [pc, #188]	; (800126c <MX_GPIO_Init+0x14c>)
 80011b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <MX_GPIO_Init+0x14c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b29      	ldr	r3, [pc, #164]	; (800126c <MX_GPIO_Init+0x14c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a28      	ldr	r2, [pc, #160]	; (800126c <MX_GPIO_Init+0x14c>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b26      	ldr	r3, [pc, #152]	; (800126c <MX_GPIO_Init+0x14c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f244 0181 	movw	r1, #16513	; 0x4081
 80011e4:	4822      	ldr	r0, [pc, #136]	; (8001270 <MX_GPIO_Init+0x150>)
 80011e6:	f000 fd6b 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2140      	movs	r1, #64	; 0x40
 80011ee:	4821      	ldr	r0, [pc, #132]	; (8001274 <MX_GPIO_Init+0x154>)
 80011f0:	f000 fd66 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	481b      	ldr	r0, [pc, #108]	; (8001278 <MX_GPIO_Init+0x158>)
 800120c:	f000 fbc4 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001210:	f244 0381 	movw	r3, #16513	; 0x4081
 8001214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	4619      	mov	r1, r3
 8001228:	4811      	ldr	r0, [pc, #68]	; (8001270 <MX_GPIO_Init+0x150>)
 800122a:	f000 fbb5 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800122e:	2340      	movs	r3, #64	; 0x40
 8001230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001232:	2301      	movs	r3, #1
 8001234:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	4619      	mov	r1, r3
 8001244:	480b      	ldr	r0, [pc, #44]	; (8001274 <MX_GPIO_Init+0x154>)
 8001246:	f000 fba7 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_GPIO_Init+0x154>)
 800125e:	f000 fb9b 	bl	8001998 <HAL_GPIO_Init>

}
 8001262:	bf00      	nop
 8001264:	3730      	adds	r7, #48	; 0x30
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	40020400 	.word	0x40020400
 8001274:	40021800 	.word	0x40021800
 8001278:	40020800 	.word	0x40020800

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	e7fe      	b.n	8001284 <Error_Handler+0x8>
	...

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <HAL_MspInit+0x4c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <HAL_MspInit+0x4c>)
 8001298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <HAL_MspInit+0x4c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_MspInit+0x4c>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <HAL_MspInit+0x4c>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_MspInit+0x4c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800

080012d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <HAL_UART_MspInit+0x84>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d12c      	bne.n	8001354 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_UART_MspInit+0x88>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a17      	ldr	r2, [pc, #92]	; (8001360 <HAL_UART_MspInit+0x88>)
 8001304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_UART_MspInit+0x88>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_UART_MspInit+0x88>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a10      	ldr	r2, [pc, #64]	; (8001360 <HAL_UART_MspInit+0x88>)
 8001320:	f043 0308 	orr.w	r3, r3, #8
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_UART_MspInit+0x88>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001332:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001344:	2307      	movs	r3, #7
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <HAL_UART_MspInit+0x8c>)
 8001350:	f000 fb22 	bl	8001998 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40004800 	.word	0x40004800
 8001360:	40023800 	.word	0x40023800
 8001364:	40020c00 	.word	0x40020c00

08001368 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b0a0      	sub	sp, #128	; 0x80
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	225c      	movs	r2, #92	; 0x5c
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f002 fdf5 	bl	8003f78 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001396:	d14e      	bne.n	8001436 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800139c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800139e:	2300      	movs	r3, #0
 80013a0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a2:	f107 0310 	add.w	r3, r7, #16
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 ff06 	bl	80021b8 <HAL_RCCEx_PeriphCLKConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80013b2:	f7ff ff63 	bl	800127c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b21      	ldr	r3, [pc, #132]	; (8001440 <HAL_PCD_MspInit+0xd8>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a20      	ldr	r2, [pc, #128]	; (8001440 <HAL_PCD_MspInit+0xd8>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <HAL_PCD_MspInit+0xd8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013d2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80013d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e0:	2303      	movs	r3, #3
 80013e2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013e4:	230a      	movs	r3, #10
 80013e6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013ec:	4619      	mov	r1, r3
 80013ee:	4815      	ldr	r0, [pc, #84]	; (8001444 <HAL_PCD_MspInit+0xdc>)
 80013f0:	f000 fad2 	bl	8001998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fa:	2300      	movs	r3, #0
 80013fc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001406:	4619      	mov	r1, r3
 8001408:	480e      	ldr	r0, [pc, #56]	; (8001444 <HAL_PCD_MspInit+0xdc>)
 800140a:	f000 fac5 	bl	8001998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <HAL_PCD_MspInit+0xd8>)
 8001410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001412:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <HAL_PCD_MspInit+0xd8>)
 8001414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001418:	6353      	str	r3, [r2, #52]	; 0x34
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_PCD_MspInit+0xd8>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a07      	ldr	r2, [pc, #28]	; (8001440 <HAL_PCD_MspInit+0xd8>)
 8001424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_PCD_MspInit+0xd8>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	3780      	adds	r7, #128	; 0x80
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800
 8001444:	40020000 	.word	0x40020000

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800144c:	e7fe      	b.n	800144c <NMI_Handler+0x4>

0800144e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <MemManage_Handler+0x4>

0800145a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <BusFault_Handler+0x4>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <UsageFault_Handler+0x4>

08001466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001494:	f000 f956 	bl	8001744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}

0800149c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return 1;
 80014a0:	2301      	movs	r3, #1
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_kill>:

int _kill(int pid, int sig)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014b6:	f002 fd35 	bl	8003f24 <__errno>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2216      	movs	r2, #22
 80014be:	601a      	str	r2, [r3, #0]
  return -1;
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_exit>:

void _exit (int status)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ffe7 	bl	80014ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80014de:	e7fe      	b.n	80014de <_exit+0x12>

080014e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	e00a      	b.n	8001508 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014f2:	f3af 8000 	nop.w
 80014f6:	4601      	mov	r1, r0
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	60ba      	str	r2, [r7, #8]
 80014fe:	b2ca      	uxtb	r2, r1
 8001500:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	dbf0      	blt.n	80014f2 <_read+0x12>
  }

  return len;
 8001510:	687b      	ldr	r3, [r7, #4]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	e009      	b.n	8001540 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	60ba      	str	r2, [r7, #8]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fcd9 	bl	8000eec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	dbf1      	blt.n	800152c <_write+0x12>
  }
  return len;
 8001548:	687b      	ldr	r3, [r7, #4]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <_close>:

int _close(int file)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800157a:	605a      	str	r2, [r3, #4]
  return 0;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <_isatty>:

int _isatty(int file)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c4:	4a14      	ldr	r2, [pc, #80]	; (8001618 <_sbrk+0x5c>)
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <_sbrk+0x60>)
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <_sbrk+0x64>)
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <_sbrk+0x68>)
 80015dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d207      	bcs.n	80015fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ec:	f002 fc9a 	bl	8003f24 <__errno>
 80015f0:	4603      	mov	r3, r0
 80015f2:	220c      	movs	r2, #12
 80015f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
 80015fa:	e009      	b.n	8001610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	4a05      	ldr	r2, [pc, #20]	; (8001620 <_sbrk+0x64>)
 800160c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160e:	68fb      	ldr	r3, [r7, #12]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20020000 	.word	0x20020000
 800161c:	00000400 	.word	0x00000400
 8001620:	20000748 	.word	0x20000748
 8001624:	20000760 	.word	0x20000760

08001628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <SystemInit+0x20>)
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001632:	4a05      	ldr	r2, [pc, #20]	; (8001648 <SystemInit+0x20>)
 8001634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800164c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001684 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001650:	480d      	ldr	r0, [pc, #52]	; (8001688 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001652:	490e      	ldr	r1, [pc, #56]	; (800168c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001654:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001668:	4c0b      	ldr	r4, [pc, #44]	; (8001698 <LoopFillZerobss+0x26>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001676:	f7ff ffd7 	bl	8001628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800167a:	f002 fc59 	bl	8003f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167e:	f7ff fc55 	bl	8000f2c <main>
  bx  lr    
 8001682:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001684:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800168c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001690:	08006f04 	.word	0x08006f04
  ldr r2, =_sbss
 8001694:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001698:	20000760 	.word	0x20000760

0800169c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC_IRQHandler>
	...

080016a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a4:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <HAL_Init+0x40>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <HAL_Init+0x40>)
 80016aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_Init+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <HAL_Init+0x40>)
 80016b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <HAL_Init+0x40>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a07      	ldr	r2, [pc, #28]	; (80016e0 <HAL_Init+0x40>)
 80016c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c8:	2003      	movs	r0, #3
 80016ca:	f000 f931 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f000 f808 	bl	80016e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d4:	f7ff fdd8 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023c00 	.word	0x40023c00

080016e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x54>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_InitTick+0x58>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f93b 	bl	800197e <HAL_SYSTICK_Config>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e00e      	b.n	8001730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b0f      	cmp	r3, #15
 8001716:	d80a      	bhi.n	800172e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001718:	2200      	movs	r2, #0
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f000 f911 	bl	8001946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001724:	4a06      	ldr	r2, [pc, #24]	; (8001740 <HAL_InitTick+0x5c>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000000 	.word	0x20000000
 800173c:	20000008 	.word	0x20000008
 8001740:	20000004 	.word	0x20000004

08001744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x20>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_IncTick+0x24>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4413      	add	r3, r2
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <HAL_IncTick+0x24>)
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000008 	.word	0x20000008
 8001768:	2000074c 	.word	0x2000074c

0800176c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <HAL_GetTick+0x14>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	2000074c 	.word	0x2000074c

08001784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800178c:	f7ff ffee 	bl	800176c <HAL_GetTick>
 8001790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179c:	d005      	beq.n	80017aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_Delay+0x44>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017aa:	bf00      	nop
 80017ac:	f7ff ffde 	bl	800176c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d8f7      	bhi.n	80017ac <HAL_Delay+0x28>
  {
  }
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000008 	.word	0x20000008

080017cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e8:	4013      	ands	r3, r2
 80017ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fe:	4a04      	ldr	r2, [pc, #16]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	60d3      	str	r3, [r2, #12]
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <__NVIC_GetPriorityGrouping+0x18>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	f003 0307 	and.w	r3, r3, #7
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
         );
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018fc:	d301      	bcc.n	8001902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fe:	2301      	movs	r3, #1
 8001900:	e00f      	b.n	8001922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <SysTick_Config+0x40>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190a:	210f      	movs	r1, #15
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f7ff ff8e 	bl	8001830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <SysTick_Config+0x40>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <SysTick_Config+0x40>)
 800191c:	2207      	movs	r2, #7
 800191e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	e000e010 	.word	0xe000e010

08001930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff47 	bl	80017cc <__NVIC_SetPriorityGrouping>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff5c 	bl	8001814 <__NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ff8e 	bl	8001884 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff5d 	bl	8001830 <__NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ffb0 	bl	80018ec <SysTick_Config>
 800198c:	4603      	mov	r3, r0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	; 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	e165      	b.n	8001c80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019b4:	2201      	movs	r2, #1
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	f040 8154 	bne.w	8001c7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d005      	beq.n	80019ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d130      	bne.n	8001a4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	2203      	movs	r2, #3
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a20:	2201      	movs	r2, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 0201 	and.w	r2, r3, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d017      	beq.n	8001a88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2203      	movs	r2, #3
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d123      	bne.n	8001adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	08da      	lsrs	r2, r3, #3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3208      	adds	r2, #8
 8001a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	220f      	movs	r2, #15
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	08da      	lsrs	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3208      	adds	r2, #8
 8001ad6:	69b9      	ldr	r1, [r7, #24]
 8001ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0203 	and.w	r2, r3, #3
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80ae 	beq.w	8001c7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b5d      	ldr	r3, [pc, #372]	; (8001c98 <HAL_GPIO_Init+0x300>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	4a5c      	ldr	r2, [pc, #368]	; (8001c98 <HAL_GPIO_Init+0x300>)
 8001b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2e:	4b5a      	ldr	r3, [pc, #360]	; (8001c98 <HAL_GPIO_Init+0x300>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b3a:	4a58      	ldr	r2, [pc, #352]	; (8001c9c <HAL_GPIO_Init+0x304>)
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	3302      	adds	r3, #2
 8001b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	220f      	movs	r2, #15
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4f      	ldr	r2, [pc, #316]	; (8001ca0 <HAL_GPIO_Init+0x308>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d025      	beq.n	8001bb2 <HAL_GPIO_Init+0x21a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4e      	ldr	r2, [pc, #312]	; (8001ca4 <HAL_GPIO_Init+0x30c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d01f      	beq.n	8001bae <HAL_GPIO_Init+0x216>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4d      	ldr	r2, [pc, #308]	; (8001ca8 <HAL_GPIO_Init+0x310>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d019      	beq.n	8001baa <HAL_GPIO_Init+0x212>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4c      	ldr	r2, [pc, #304]	; (8001cac <HAL_GPIO_Init+0x314>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d013      	beq.n	8001ba6 <HAL_GPIO_Init+0x20e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4b      	ldr	r2, [pc, #300]	; (8001cb0 <HAL_GPIO_Init+0x318>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00d      	beq.n	8001ba2 <HAL_GPIO_Init+0x20a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4a      	ldr	r2, [pc, #296]	; (8001cb4 <HAL_GPIO_Init+0x31c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d007      	beq.n	8001b9e <HAL_GPIO_Init+0x206>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a49      	ldr	r2, [pc, #292]	; (8001cb8 <HAL_GPIO_Init+0x320>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d101      	bne.n	8001b9a <HAL_GPIO_Init+0x202>
 8001b96:	2306      	movs	r3, #6
 8001b98:	e00c      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	e00a      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001b9e:	2305      	movs	r3, #5
 8001ba0:	e008      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e004      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e002      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	f002 0203 	and.w	r2, r2, #3
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	4093      	lsls	r3, r2
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc4:	4935      	ldr	r1, [pc, #212]	; (8001c9c <HAL_GPIO_Init+0x304>)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd2:	4b3a      	ldr	r3, [pc, #232]	; (8001cbc <HAL_GPIO_Init+0x324>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bf6:	4a31      	ldr	r2, [pc, #196]	; (8001cbc <HAL_GPIO_Init+0x324>)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bfc:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <HAL_GPIO_Init+0x324>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c20:	4a26      	ldr	r2, [pc, #152]	; (8001cbc <HAL_GPIO_Init+0x324>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c26:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <HAL_GPIO_Init+0x324>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c4a:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <HAL_GPIO_Init+0x324>)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c50:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <HAL_GPIO_Init+0x324>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c74:	4a11      	ldr	r2, [pc, #68]	; (8001cbc <HAL_GPIO_Init+0x324>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	2b0f      	cmp	r3, #15
 8001c84:	f67f ae96 	bls.w	80019b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3724      	adds	r7, #36	; 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40020c00 	.word	0x40020c00
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40021400 	.word	0x40021400
 8001cb8:	40021800 	.word	0x40021800
 8001cbc:	40013c00 	.word	0x40013c00

08001cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd0:	787b      	ldrb	r3, [r7, #1]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cdc:	e003      	b.n	8001ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cde:	887b      	ldrh	r3, [r7, #2]
 8001ce0:	041a      	lsls	r2, r3, #16
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	619a      	str	r2, [r3, #24]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf4:	b08f      	sub	sp, #60	; 0x3c
 8001cf6:	af0a      	add	r7, sp, #40	; 0x28
 8001cf8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e116      	b.n	8001f32 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff fb22 	bl	8001368 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2203      	movs	r2, #3
 8001d28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d102      	bne.n	8001d3e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f001 fe53 	bl	80039ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	687e      	ldr	r6, [r7, #4]
 8001d50:	466d      	mov	r5, sp
 8001d52:	f106 0410 	add.w	r4, r6, #16
 8001d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d62:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d66:	1d33      	adds	r3, r6, #4
 8001d68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d6a:	6838      	ldr	r0, [r7, #0]
 8001d6c:	f001 fdde 	bl	800392c <USB_CoreInit>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d005      	beq.n	8001d82 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2202      	movs	r2, #2
 8001d7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e0d7      	b.n	8001f32 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f001 fe41 	bl	8003a10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	73fb      	strb	r3, [r7, #15]
 8001d92:	e04a      	b.n	8001e2a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	333d      	adds	r3, #61	; 0x3d
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	333c      	adds	r3, #60	; 0x3c
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	b298      	uxth	r0, r3
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	3344      	adds	r3, #68	; 0x44
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	3340      	adds	r3, #64	; 0x40
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	3348      	adds	r3, #72	; 0x48
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	334c      	adds	r3, #76	; 0x4c
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e10:	7bfa      	ldrb	r2, [r7, #15]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3354      	adds	r3, #84	; 0x54
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	3301      	adds	r3, #1
 8001e28:	73fb      	strb	r3, [r7, #15]
 8001e2a:	7bfa      	ldrb	r2, [r7, #15]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d3af      	bcc.n	8001d94 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]
 8001e38:	e044      	b.n	8001ec4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e50:	7bfa      	ldrb	r2, [r7, #15]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e62:	7bfa      	ldrb	r2, [r7, #15]
 8001e64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e66:	7bfa      	ldrb	r2, [r7, #15]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e92:	7bfa      	ldrb	r2, [r7, #15]
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	73fb      	strb	r3, [r7, #15]
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d3b5      	bcc.n	8001e3a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	687e      	ldr	r6, [r7, #4]
 8001ed6:	466d      	mov	r5, sp
 8001ed8:	f106 0410 	add.w	r4, r6, #16
 8001edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ee8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eec:	1d33      	adds	r3, r6, #4
 8001eee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ef0:	6838      	ldr	r0, [r7, #0]
 8001ef2:	f001 fdd9 	bl	8003aa8 <USB_DevInit>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2202      	movs	r2, #2
 8001f00:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e014      	b.n	8001f32 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d102      	bne.n	8001f26 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f80a 	bl	8001f3a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f001 ff97 	bl	8003e5e <USB_DevDisconnect>

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f3a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b085      	sub	sp, #20
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	f043 0303 	orr.w	r3, r3, #3
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0cc      	b.n	8002132 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f98:	4b68      	ldr	r3, [pc, #416]	; (800213c <HAL_RCC_ClockConfig+0x1b8>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d90c      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa6:	4b65      	ldr	r3, [pc, #404]	; (800213c <HAL_RCC_ClockConfig+0x1b8>)
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b63      	ldr	r3, [pc, #396]	; (800213c <HAL_RCC_ClockConfig+0x1b8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0b8      	b.n	8002132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d020      	beq.n	800200e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd8:	4b59      	ldr	r3, [pc, #356]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	4a58      	ldr	r2, [pc, #352]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fe2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ff0:	4b53      	ldr	r3, [pc, #332]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	4a52      	ldr	r2, [pc, #328]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ffa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ffc:	4b50      	ldr	r3, [pc, #320]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	494d      	ldr	r1, [pc, #308]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	4313      	orrs	r3, r2
 800200c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d044      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d107      	bne.n	8002032 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	4b47      	ldr	r3, [pc, #284]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d119      	bne.n	8002062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e07f      	b.n	8002132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d003      	beq.n	8002042 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800203e:	2b03      	cmp	r3, #3
 8002040:	d107      	bne.n	8002052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002042:	4b3f      	ldr	r3, [pc, #252]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e06f      	b.n	8002132 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002052:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e067      	b.n	8002132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002062:	4b37      	ldr	r3, [pc, #220]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 0203 	bic.w	r2, r3, #3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4934      	ldr	r1, [pc, #208]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	4313      	orrs	r3, r2
 8002072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002074:	f7ff fb7a 	bl	800176c <HAL_GetTick>
 8002078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	e00a      	b.n	8002092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207c:	f7ff fb76 	bl	800176c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f241 3288 	movw	r2, #5000	; 0x1388
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e04f      	b.n	8002132 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002092:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 020c 	and.w	r2, r3, #12
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d1eb      	bne.n	800207c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020a4:	4b25      	ldr	r3, [pc, #148]	; (800213c <HAL_RCC_ClockConfig+0x1b8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 030f 	and.w	r3, r3, #15
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d20c      	bcs.n	80020cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b2:	4b22      	ldr	r3, [pc, #136]	; (800213c <HAL_RCC_ClockConfig+0x1b8>)
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	4b20      	ldr	r3, [pc, #128]	; (800213c <HAL_RCC_ClockConfig+0x1b8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e032      	b.n	8002132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d8:	4b19      	ldr	r3, [pc, #100]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4916      	ldr	r1, [pc, #88]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	490e      	ldr	r1, [pc, #56]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800210a:	f000 fb7f 	bl	800280c <HAL_RCC_GetSysClockFreq>
 800210e:	4602      	mov	r2, r0
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	490a      	ldr	r1, [pc, #40]	; (8002144 <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	5ccb      	ldrb	r3, [r1, r3]
 800211e:	fa22 f303 	lsr.w	r3, r2, r3
 8002122:	4a09      	ldr	r2, [pc, #36]	; (8002148 <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_RCC_ClockConfig+0x1c8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fada 	bl	80016e4 <HAL_InitTick>

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40023c00 	.word	0x40023c00
 8002140:	40023800 	.word	0x40023800
 8002144:	08006b04 	.word	0x08006b04
 8002148:	20000000 	.word	0x20000000
 800214c:	20000004 	.word	0x20000004

08002150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <HAL_RCC_GetHCLKFreq+0x14>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000000 	.word	0x20000000

08002168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800216c:	f7ff fff0 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	0a9b      	lsrs	r3, r3, #10
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4903      	ldr	r1, [pc, #12]	; (800218c <HAL_RCC_GetPCLK1Freq+0x24>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40023800 	.word	0x40023800
 800218c:	08006b14 	.word	0x08006b14

08002190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002194:	f7ff ffdc 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 8002198:	4602      	mov	r2, r0
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	0b5b      	lsrs	r3, r3, #13
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	4903      	ldr	r1, [pc, #12]	; (80021b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40023800 	.word	0x40023800
 80021b4:	08006b14 	.word	0x08006b14

080021b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	; 0x30
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d010      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80021f0:	4b6f      	ldr	r3, [pc, #444]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021f6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fe:	496c      	ldr	r1, [pc, #432]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800220e:	2301      	movs	r3, #1
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d010      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800221e:	4b64      	ldr	r3, [pc, #400]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002224:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222c:	4960      	ldr	r1, [pc, #384]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800223c:	2301      	movs	r3, #1
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d017      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800224c:	4b58      	ldr	r3, [pc, #352]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800224e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002252:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4955      	ldr	r1, [pc, #340]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800226a:	d101      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800226c:	2301      	movs	r3, #1
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002278:	2301      	movs	r3, #1
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b00      	cmp	r3, #0
 8002286:	d017      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002288:	4b49      	ldr	r3, [pc, #292]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800228a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800228e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002296:	4946      	ldr	r1, [pc, #280]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022a6:	d101      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80022a8:	2301      	movs	r3, #1
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80022b4:	2301      	movs	r3, #1
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0320 	and.w	r3, r3, #32
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 808a 	beq.w	80023da <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	4b39      	ldr	r3, [pc, #228]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a38      	ldr	r2, [pc, #224]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b36      	ldr	r3, [pc, #216]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80022e2:	4b34      	ldr	r3, [pc, #208]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a33      	ldr	r2, [pc, #204]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80022e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80022ee:	f7ff fa3d 	bl	800176c <HAL_GetTick>
 80022f2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80022f6:	f7ff fa39 	bl	800176c <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e278      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002308:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0f0      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002314:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800231c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d02f      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232c:	6a3a      	ldr	r2, [r7, #32]
 800232e:	429a      	cmp	r2, r3
 8002330:	d028      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002332:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800233a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800233c:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800233e:	2201      	movs	r2, #1
 8002340:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002342:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002348:	4a19      	ldr	r2, [pc, #100]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b01      	cmp	r3, #1
 8002358:	d114      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800235a:	f7ff fa07 	bl	800176c <HAL_GetTick>
 800235e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002360:	e00a      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7ff fa03 	bl	800176c <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e240      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002378:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800237a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0ee      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800238c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002390:	d114      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80023a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a6:	4902      	ldr	r1, [pc, #8]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]
 80023ac:	e00c      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40007000 	.word	0x40007000
 80023b8:	42470e40 	.word	0x42470e40
 80023bc:	4b4a      	ldr	r3, [pc, #296]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	4a49      	ldr	r2, [pc, #292]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80023c6:	6093      	str	r3, [r2, #8]
 80023c8:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d4:	4944      	ldr	r1, [pc, #272]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d004      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80023ec:	4b3f      	ldr	r3, [pc, #252]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80023ee:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00a      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80023fc:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002402:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240a:	4937      	ldr	r1, [pc, #220]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00a      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800241e:	4b32      	ldr	r3, [pc, #200]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002424:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800242c:	492e      	ldr	r1, [pc, #184]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243c:	2b00      	cmp	r3, #0
 800243e:	d011      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002440:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002446:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244e:	4926      	ldr	r1, [pc, #152]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800245e:	d101      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002460:	2301      	movs	r3, #1
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00a      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002470:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002476:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	491a      	ldr	r1, [pc, #104]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248e:	2b00      	cmp	r3, #0
 8002490:	d011      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002494:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002498:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a0:	4911      	ldr	r1, [pc, #68]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024b0:	d101      	bne.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80024b2:	2301      	movs	r3, #1
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80024b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d005      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024c4:	f040 80ff 	bne.w	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80024c8:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024ce:	f7ff f94d 	bl	800176c <HAL_GetTick>
 80024d2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024d4:	e00e      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80024d6:	f7ff f949 	bl	800176c <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d907      	bls.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e188      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x642>
 80024e8:	40023800 	.word	0x40023800
 80024ec:	424711e0 	.word	0x424711e0
 80024f0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024f4:	4b7e      	ldr	r3, [pc, #504]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1ea      	bne.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002510:	2b00      	cmp	r3, #0
 8002512:	d009      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800251c:	2b00      	cmp	r3, #0
 800251e:	d028      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002524:	2b00      	cmp	r3, #0
 8002526:	d124      	bne.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002528:	4b71      	ldr	r3, [pc, #452]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800252a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800252e:	0c1b      	lsrs	r3, r3, #16
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	3301      	adds	r3, #1
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800253a:	4b6d      	ldr	r3, [pc, #436]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800253c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002540:	0e1b      	lsrs	r3, r3, #24
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	019b      	lsls	r3, r3, #6
 8002552:	431a      	orrs	r2, r3
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	085b      	lsrs	r3, r3, #1
 8002558:	3b01      	subs	r3, #1
 800255a:	041b      	lsls	r3, r3, #16
 800255c:	431a      	orrs	r2, r3
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	061b      	lsls	r3, r3, #24
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	071b      	lsls	r3, r3, #28
 800256a:	4961      	ldr	r1, [pc, #388]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d004      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002586:	d00a      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002590:	2b00      	cmp	r3, #0
 8002592:	d035      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800259c:	d130      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800259e:	4b54      	ldr	r3, [pc, #336]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025a4:	0c1b      	lsrs	r3, r3, #16
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	3301      	adds	r3, #1
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025b0:	4b4f      	ldr	r3, [pc, #316]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025b6:	0f1b      	lsrs	r3, r3, #28
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	019b      	lsls	r3, r3, #6
 80025c8:	431a      	orrs	r2, r3
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	085b      	lsrs	r3, r3, #1
 80025ce:	3b01      	subs	r3, #1
 80025d0:	041b      	lsls	r3, r3, #16
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	061b      	lsls	r3, r3, #24
 80025da:	431a      	orrs	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	071b      	lsls	r3, r3, #28
 80025e0:	4943      	ldr	r1, [pc, #268]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80025e8:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025ee:	f023 021f 	bic.w	r2, r3, #31
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f6:	3b01      	subs	r3, #1
 80025f8:	493d      	ldr	r1, [pc, #244]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002608:	2b00      	cmp	r3, #0
 800260a:	d029      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002614:	d124      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002616:	4b36      	ldr	r3, [pc, #216]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800261c:	0c1b      	lsrs	r3, r3, #16
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	3301      	adds	r3, #1
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002628:	4b31      	ldr	r3, [pc, #196]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800262a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800262e:	0f1b      	lsrs	r3, r3, #28
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	019b      	lsls	r3, r3, #6
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	085b      	lsrs	r3, r3, #1
 8002648:	3b01      	subs	r3, #1
 800264a:	041b      	lsls	r3, r3, #16
 800264c:	431a      	orrs	r2, r3
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	061b      	lsls	r3, r3, #24
 8002652:	431a      	orrs	r2, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	071b      	lsls	r3, r3, #28
 8002658:	4925      	ldr	r1, [pc, #148]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002668:	2b00      	cmp	r3, #0
 800266a:	d016      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	019b      	lsls	r3, r3, #6
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	085b      	lsrs	r3, r3, #1
 800267e:	3b01      	subs	r3, #1
 8002680:	041b      	lsls	r3, r3, #16
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	061b      	lsls	r3, r3, #24
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	071b      	lsls	r3, r3, #28
 8002692:	4917      	ldr	r1, [pc, #92]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800269a:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80026a0:	f7ff f864 	bl	800176c <HAL_GetTick>
 80026a4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80026a8:	f7ff f860 	bl	800176c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e09f      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026ba:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80026c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	f040 8095 	bne.w	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80026d4:	f7ff f84a 	bl	800176c <HAL_GetTick>
 80026d8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026da:	e00f      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80026dc:	f7ff f846 	bl	800176c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d908      	bls.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e085      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x642>
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	42470068 	.word	0x42470068
 80026f8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026fc:	4b41      	ldr	r3, [pc, #260]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002708:	d0e8      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002726:	2b00      	cmp	r3, #0
 8002728:	d02b      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272e:	2b00      	cmp	r3, #0
 8002730:	d127      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002732:	4b34      	ldr	r3, [pc, #208]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002738:	0c1b      	lsrs	r3, r3, #16
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	3301      	adds	r3, #1
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699a      	ldr	r2, [r3, #24]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	019b      	lsls	r3, r3, #6
 800274e:	431a      	orrs	r2, r3
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	085b      	lsrs	r3, r3, #1
 8002754:	3b01      	subs	r3, #1
 8002756:	041b      	lsls	r3, r3, #16
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	061b      	lsls	r3, r3, #24
 8002760:	4928      	ldr	r1, [pc, #160]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002768:	4b26      	ldr	r3, [pc, #152]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800276a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800276e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	3b01      	subs	r3, #1
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	4922      	ldr	r1, [pc, #136]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d01d      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x612>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002792:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002796:	d118      	bne.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002798:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	0e1b      	lsrs	r3, r3, #24
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699a      	ldr	r2, [r3, #24]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	019b      	lsls	r3, r3, #6
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	3b01      	subs	r3, #1
 80027ba:	041b      	lsls	r3, r3, #16
 80027bc:	431a      	orrs	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	061b      	lsls	r3, r3, #24
 80027c2:	4910      	ldr	r1, [pc, #64]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80027ca:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027d0:	f7fe ffcc 	bl	800176c <HAL_GetTick>
 80027d4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80027d8:	f7fe ffc8 	bl	800176c <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e007      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027f6:	d1ef      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3730      	adds	r7, #48	; 0x30
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800
 8002808:	42470070 	.word	0x42470070

0800280c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800280c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002810:	b0ae      	sub	sp, #184	; 0xb8
 8002812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002832:	4bcb      	ldr	r3, [pc, #812]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x354>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b0c      	cmp	r3, #12
 800283c:	f200 8206 	bhi.w	8002c4c <HAL_RCC_GetSysClockFreq+0x440>
 8002840:	a201      	add	r2, pc, #4	; (adr r2, 8002848 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002846:	bf00      	nop
 8002848:	0800287d 	.word	0x0800287d
 800284c:	08002c4d 	.word	0x08002c4d
 8002850:	08002c4d 	.word	0x08002c4d
 8002854:	08002c4d 	.word	0x08002c4d
 8002858:	08002885 	.word	0x08002885
 800285c:	08002c4d 	.word	0x08002c4d
 8002860:	08002c4d 	.word	0x08002c4d
 8002864:	08002c4d 	.word	0x08002c4d
 8002868:	0800288d 	.word	0x0800288d
 800286c:	08002c4d 	.word	0x08002c4d
 8002870:	08002c4d 	.word	0x08002c4d
 8002874:	08002c4d 	.word	0x08002c4d
 8002878:	08002a7d 	.word	0x08002a7d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800287c:	4bb9      	ldr	r3, [pc, #740]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x358>)
 800287e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002882:	e1e7      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002884:	4bb8      	ldr	r3, [pc, #736]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002886:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800288a:	e1e3      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800288c:	4bb4      	ldr	r3, [pc, #720]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x354>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002894:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002898:	4bb1      	ldr	r3, [pc, #708]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x354>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d071      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a4:	4bae      	ldr	r3, [pc, #696]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x354>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	099b      	lsrs	r3, r3, #6
 80028aa:	2200      	movs	r2, #0
 80028ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028b0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80028b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028c0:	2300      	movs	r3, #0
 80028c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80028c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80028ca:	4622      	mov	r2, r4
 80028cc:	462b      	mov	r3, r5
 80028ce:	f04f 0000 	mov.w	r0, #0
 80028d2:	f04f 0100 	mov.w	r1, #0
 80028d6:	0159      	lsls	r1, r3, #5
 80028d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028dc:	0150      	lsls	r0, r2, #5
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4621      	mov	r1, r4
 80028e4:	1a51      	subs	r1, r2, r1
 80028e6:	6439      	str	r1, [r7, #64]	; 0x40
 80028e8:	4629      	mov	r1, r5
 80028ea:	eb63 0301 	sbc.w	r3, r3, r1
 80028ee:	647b      	str	r3, [r7, #68]	; 0x44
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80028fc:	4649      	mov	r1, r9
 80028fe:	018b      	lsls	r3, r1, #6
 8002900:	4641      	mov	r1, r8
 8002902:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002906:	4641      	mov	r1, r8
 8002908:	018a      	lsls	r2, r1, #6
 800290a:	4641      	mov	r1, r8
 800290c:	1a51      	subs	r1, r2, r1
 800290e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002910:	4649      	mov	r1, r9
 8002912:	eb63 0301 	sbc.w	r3, r3, r1
 8002916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002924:	4649      	mov	r1, r9
 8002926:	00cb      	lsls	r3, r1, #3
 8002928:	4641      	mov	r1, r8
 800292a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800292e:	4641      	mov	r1, r8
 8002930:	00ca      	lsls	r2, r1, #3
 8002932:	4610      	mov	r0, r2
 8002934:	4619      	mov	r1, r3
 8002936:	4603      	mov	r3, r0
 8002938:	4622      	mov	r2, r4
 800293a:	189b      	adds	r3, r3, r2
 800293c:	633b      	str	r3, [r7, #48]	; 0x30
 800293e:	462b      	mov	r3, r5
 8002940:	460a      	mov	r2, r1
 8002942:	eb42 0303 	adc.w	r3, r2, r3
 8002946:	637b      	str	r3, [r7, #52]	; 0x34
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002954:	4629      	mov	r1, r5
 8002956:	024b      	lsls	r3, r1, #9
 8002958:	4621      	mov	r1, r4
 800295a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800295e:	4621      	mov	r1, r4
 8002960:	024a      	lsls	r2, r1, #9
 8002962:	4610      	mov	r0, r2
 8002964:	4619      	mov	r1, r3
 8002966:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800296a:	2200      	movs	r2, #0
 800296c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002970:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002974:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002978:	f7fe f936 	bl	8000be8 <__aeabi_uldivmod>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4613      	mov	r3, r2
 8002982:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002986:	e067      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002988:	4b75      	ldr	r3, [pc, #468]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x354>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	099b      	lsrs	r3, r3, #6
 800298e:	2200      	movs	r2, #0
 8002990:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002994:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002998:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800299c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80029a2:	2300      	movs	r3, #0
 80029a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80029aa:	4622      	mov	r2, r4
 80029ac:	462b      	mov	r3, r5
 80029ae:	f04f 0000 	mov.w	r0, #0
 80029b2:	f04f 0100 	mov.w	r1, #0
 80029b6:	0159      	lsls	r1, r3, #5
 80029b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029bc:	0150      	lsls	r0, r2, #5
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4621      	mov	r1, r4
 80029c4:	1a51      	subs	r1, r2, r1
 80029c6:	62b9      	str	r1, [r7, #40]	; 0x28
 80029c8:	4629      	mov	r1, r5
 80029ca:	eb63 0301 	sbc.w	r3, r3, r1
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80029dc:	4649      	mov	r1, r9
 80029de:	018b      	lsls	r3, r1, #6
 80029e0:	4641      	mov	r1, r8
 80029e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029e6:	4641      	mov	r1, r8
 80029e8:	018a      	lsls	r2, r1, #6
 80029ea:	4641      	mov	r1, r8
 80029ec:	ebb2 0a01 	subs.w	sl, r2, r1
 80029f0:	4649      	mov	r1, r9
 80029f2:	eb63 0b01 	sbc.w	fp, r3, r1
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a02:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a0a:	4692      	mov	sl, r2
 8002a0c:	469b      	mov	fp, r3
 8002a0e:	4623      	mov	r3, r4
 8002a10:	eb1a 0303 	adds.w	r3, sl, r3
 8002a14:	623b      	str	r3, [r7, #32]
 8002a16:	462b      	mov	r3, r5
 8002a18:	eb4b 0303 	adc.w	r3, fp, r3
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002a2a:	4629      	mov	r1, r5
 8002a2c:	028b      	lsls	r3, r1, #10
 8002a2e:	4621      	mov	r1, r4
 8002a30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a34:	4621      	mov	r1, r4
 8002a36:	028a      	lsls	r2, r1, #10
 8002a38:	4610      	mov	r0, r2
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a40:	2200      	movs	r2, #0
 8002a42:	673b      	str	r3, [r7, #112]	; 0x70
 8002a44:	677a      	str	r2, [r7, #116]	; 0x74
 8002a46:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002a4a:	f7fe f8cd 	bl	8000be8 <__aeabi_uldivmod>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4613      	mov	r3, r2
 8002a54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a58:	4b41      	ldr	r3, [pc, #260]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	0c1b      	lsrs	r3, r3, #16
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	3301      	adds	r3, #1
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002a6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a7a:	e0eb      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a7c:	4b38      	ldr	r3, [pc, #224]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a88:	4b35      	ldr	r3, [pc, #212]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d06b      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a94:	4b32      	ldr	r3, [pc, #200]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	099b      	lsrs	r3, r3, #6
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002aa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa6:	663b      	str	r3, [r7, #96]	; 0x60
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	667b      	str	r3, [r7, #100]	; 0x64
 8002aac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002ab0:	4622      	mov	r2, r4
 8002ab2:	462b      	mov	r3, r5
 8002ab4:	f04f 0000 	mov.w	r0, #0
 8002ab8:	f04f 0100 	mov.w	r1, #0
 8002abc:	0159      	lsls	r1, r3, #5
 8002abe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac2:	0150      	lsls	r0, r2, #5
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4621      	mov	r1, r4
 8002aca:	1a51      	subs	r1, r2, r1
 8002acc:	61b9      	str	r1, [r7, #24]
 8002ace:	4629      	mov	r1, r5
 8002ad0:	eb63 0301 	sbc.w	r3, r3, r1
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ae2:	4659      	mov	r1, fp
 8002ae4:	018b      	lsls	r3, r1, #6
 8002ae6:	4651      	mov	r1, sl
 8002ae8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aec:	4651      	mov	r1, sl
 8002aee:	018a      	lsls	r2, r1, #6
 8002af0:	4651      	mov	r1, sl
 8002af2:	ebb2 0801 	subs.w	r8, r2, r1
 8002af6:	4659      	mov	r1, fp
 8002af8:	eb63 0901 	sbc.w	r9, r3, r1
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b10:	4690      	mov	r8, r2
 8002b12:	4699      	mov	r9, r3
 8002b14:	4623      	mov	r3, r4
 8002b16:	eb18 0303 	adds.w	r3, r8, r3
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	462b      	mov	r3, r5
 8002b1e:	eb49 0303 	adc.w	r3, r9, r3
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b30:	4629      	mov	r1, r5
 8002b32:	024b      	lsls	r3, r1, #9
 8002b34:	4621      	mov	r1, r4
 8002b36:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	024a      	lsls	r2, r1, #9
 8002b3e:	4610      	mov	r0, r2
 8002b40:	4619      	mov	r1, r3
 8002b42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b46:	2200      	movs	r2, #0
 8002b48:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b4a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002b4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b50:	f7fe f84a 	bl	8000be8 <__aeabi_uldivmod>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4613      	mov	r3, r2
 8002b5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b5e:	e065      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x420>
 8002b60:	40023800 	.word	0x40023800
 8002b64:	00f42400 	.word	0x00f42400
 8002b68:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b6c:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	099b      	lsrs	r3, r3, #6
 8002b72:	2200      	movs	r2, #0
 8002b74:	4618      	mov	r0, r3
 8002b76:	4611      	mov	r1, r2
 8002b78:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b7c:	653b      	str	r3, [r7, #80]	; 0x50
 8002b7e:	2300      	movs	r3, #0
 8002b80:	657b      	str	r3, [r7, #84]	; 0x54
 8002b82:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002b86:	4642      	mov	r2, r8
 8002b88:	464b      	mov	r3, r9
 8002b8a:	f04f 0000 	mov.w	r0, #0
 8002b8e:	f04f 0100 	mov.w	r1, #0
 8002b92:	0159      	lsls	r1, r3, #5
 8002b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b98:	0150      	lsls	r0, r2, #5
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4641      	mov	r1, r8
 8002ba0:	1a51      	subs	r1, r2, r1
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	4649      	mov	r1, r9
 8002ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002bb8:	4659      	mov	r1, fp
 8002bba:	018b      	lsls	r3, r1, #6
 8002bbc:	4651      	mov	r1, sl
 8002bbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bc2:	4651      	mov	r1, sl
 8002bc4:	018a      	lsls	r2, r1, #6
 8002bc6:	4651      	mov	r1, sl
 8002bc8:	1a54      	subs	r4, r2, r1
 8002bca:	4659      	mov	r1, fp
 8002bcc:	eb63 0501 	sbc.w	r5, r3, r1
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	00eb      	lsls	r3, r5, #3
 8002bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bde:	00e2      	lsls	r2, r4, #3
 8002be0:	4614      	mov	r4, r2
 8002be2:	461d      	mov	r5, r3
 8002be4:	4643      	mov	r3, r8
 8002be6:	18e3      	adds	r3, r4, r3
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	464b      	mov	r3, r9
 8002bec:	eb45 0303 	adc.w	r3, r5, r3
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bfe:	4629      	mov	r1, r5
 8002c00:	028b      	lsls	r3, r1, #10
 8002c02:	4621      	mov	r1, r4
 8002c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c08:	4621      	mov	r1, r4
 8002c0a:	028a      	lsls	r2, r1, #10
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c14:	2200      	movs	r2, #0
 8002c16:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c18:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c1e:	f7fd ffe3 	bl	8000be8 <__aeabi_uldivmod>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4613      	mov	r3, r2
 8002c28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c2c:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	0f1b      	lsrs	r3, r3, #28
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002c3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c4a:	e003      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	37b8      	adds	r7, #184	; 0xb8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800
 8002c68:	00f42400 	.word	0x00f42400

08002c6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e28d      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 8083 	beq.w	8002d92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c8c:	4b94      	ldr	r3, [pc, #592]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 030c 	and.w	r3, r3, #12
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d019      	beq.n	8002ccc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c98:	4b91      	ldr	r3, [pc, #580]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d106      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ca4:	4b8e      	ldr	r3, [pc, #568]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cb0:	d00c      	beq.n	8002ccc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb2:	4b8b      	ldr	r3, [pc, #556]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cba:	2b0c      	cmp	r3, #12
 8002cbc:	d112      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cbe:	4b88      	ldr	r3, [pc, #544]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cca:	d10b      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	4b84      	ldr	r3, [pc, #528]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d05b      	beq.n	8002d90 <HAL_RCC_OscConfig+0x124>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d157      	bne.n	8002d90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e25a      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cec:	d106      	bne.n	8002cfc <HAL_RCC_OscConfig+0x90>
 8002cee:	4b7c      	ldr	r3, [pc, #496]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a7b      	ldr	r2, [pc, #492]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	e01d      	b.n	8002d38 <HAL_RCC_OscConfig+0xcc>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCC_OscConfig+0xb4>
 8002d06:	4b76      	ldr	r3, [pc, #472]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a75      	ldr	r2, [pc, #468]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	4b73      	ldr	r3, [pc, #460]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a72      	ldr	r2, [pc, #456]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	e00b      	b.n	8002d38 <HAL_RCC_OscConfig+0xcc>
 8002d20:	4b6f      	ldr	r3, [pc, #444]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a6e      	ldr	r2, [pc, #440]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4b6c      	ldr	r3, [pc, #432]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a6b      	ldr	r2, [pc, #428]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d013      	beq.n	8002d68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7fe fd14 	bl	800176c <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d48:	f7fe fd10 	bl	800176c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e21f      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	4b61      	ldr	r3, [pc, #388]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0xdc>
 8002d66:	e014      	b.n	8002d92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe fd00 	bl	800176c <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d70:	f7fe fcfc 	bl	800176c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	; 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e20b      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d82:	4b57      	ldr	r3, [pc, #348]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x104>
 8002d8e:	e000      	b.n	8002d92 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d06f      	beq.n	8002e7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d9e:	4b50      	ldr	r3, [pc, #320]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d017      	beq.n	8002dda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002daa:	4b4d      	ldr	r3, [pc, #308]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d105      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002db6:	4b4a      	ldr	r3, [pc, #296]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc2:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dca:	2b0c      	cmp	r3, #12
 8002dcc:	d11c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dce:	4b44      	ldr	r3, [pc, #272]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d116      	bne.n	8002e08 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dda:	4b41      	ldr	r3, [pc, #260]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_RCC_OscConfig+0x186>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e1d3      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df2:	4b3b      	ldr	r3, [pc, #236]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4937      	ldr	r1, [pc, #220]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e06:	e03a      	b.n	8002e7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d020      	beq.n	8002e52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e10:	4b34      	ldr	r3, [pc, #208]	; (8002ee4 <HAL_RCC_OscConfig+0x278>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e16:	f7fe fca9 	bl	800176c <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1e:	f7fe fca5 	bl	800176c <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e1b4      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e30:	4b2b      	ldr	r3, [pc, #172]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3c:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4925      	ldr	r1, [pc, #148]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]
 8002e50:	e015      	b.n	8002e7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e52:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <HAL_RCC_OscConfig+0x278>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe fc88 	bl	800176c <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e60:	f7fe fc84 	bl	800176c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e193      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e72:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d036      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d016      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e98:	f7fe fc68 	bl	800176c <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea0:	f7fe fc64 	bl	800176c <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e173      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x234>
 8002ebe:	e01b      	b.n	8002ef8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec0:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec6:	f7fe fc51 	bl	800176c <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ecc:	e00e      	b.n	8002eec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ece:	f7fe fc4d 	bl	800176c <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d907      	bls.n	8002eec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e15c      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	42470000 	.word	0x42470000
 8002ee8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eec:	4b8a      	ldr	r3, [pc, #552]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1ea      	bne.n	8002ece <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8097 	beq.w	8003034 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f06:	2300      	movs	r3, #0
 8002f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0a:	4b83      	ldr	r3, [pc, #524]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10f      	bne.n	8002f36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	4b7f      	ldr	r3, [pc, #508]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	4a7e      	ldr	r2, [pc, #504]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f24:	6413      	str	r3, [r2, #64]	; 0x40
 8002f26:	4b7c      	ldr	r3, [pc, #496]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f32:	2301      	movs	r3, #1
 8002f34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f36:	4b79      	ldr	r3, [pc, #484]	; (800311c <HAL_RCC_OscConfig+0x4b0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d118      	bne.n	8002f74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f42:	4b76      	ldr	r3, [pc, #472]	; (800311c <HAL_RCC_OscConfig+0x4b0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a75      	ldr	r2, [pc, #468]	; (800311c <HAL_RCC_OscConfig+0x4b0>)
 8002f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4e:	f7fe fc0d 	bl	800176c <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f56:	f7fe fc09 	bl	800176c <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e118      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f68:	4b6c      	ldr	r3, [pc, #432]	; (800311c <HAL_RCC_OscConfig+0x4b0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d106      	bne.n	8002f8a <HAL_RCC_OscConfig+0x31e>
 8002f7c:	4b66      	ldr	r3, [pc, #408]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	4a65      	ldr	r2, [pc, #404]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6713      	str	r3, [r2, #112]	; 0x70
 8002f88:	e01c      	b.n	8002fc4 <HAL_RCC_OscConfig+0x358>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b05      	cmp	r3, #5
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0x340>
 8002f92:	4b61      	ldr	r3, [pc, #388]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f96:	4a60      	ldr	r2, [pc, #384]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002f98:	f043 0304 	orr.w	r3, r3, #4
 8002f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9e:	4b5e      	ldr	r3, [pc, #376]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	4a5d      	ldr	r2, [pc, #372]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002faa:	e00b      	b.n	8002fc4 <HAL_RCC_OscConfig+0x358>
 8002fac:	4b5a      	ldr	r3, [pc, #360]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	4a59      	ldr	r2, [pc, #356]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb8:	4b57      	ldr	r3, [pc, #348]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	4a56      	ldr	r2, [pc, #344]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002fbe:	f023 0304 	bic.w	r3, r3, #4
 8002fc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d015      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7fe fbce 	bl	800176c <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd2:	e00a      	b.n	8002fea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd4:	f7fe fbca 	bl	800176c <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e0d7      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fea:	4b4b      	ldr	r3, [pc, #300]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0ee      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x368>
 8002ff6:	e014      	b.n	8003022 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff8:	f7fe fbb8 	bl	800176c <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003000:	f7fe fbb4 	bl	800176c <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e0c1      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003016:	4b40      	ldr	r3, [pc, #256]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1ee      	bne.n	8003000 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003022:	7dfb      	ldrb	r3, [r7, #23]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d105      	bne.n	8003034 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003028:	4b3b      	ldr	r3, [pc, #236]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	4a3a      	ldr	r2, [pc, #232]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 800302e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003032:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80ad 	beq.w	8003198 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800303e:	4b36      	ldr	r3, [pc, #216]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b08      	cmp	r3, #8
 8003048:	d060      	beq.n	800310c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d145      	bne.n	80030de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003052:	4b33      	ldr	r3, [pc, #204]	; (8003120 <HAL_RCC_OscConfig+0x4b4>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7fe fb88 	bl	800176c <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003060:	f7fe fb84 	bl	800176c <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e093      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003072:	4b29      	ldr	r3, [pc, #164]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69da      	ldr	r2, [r3, #28]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	019b      	lsls	r3, r3, #6
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	085b      	lsrs	r3, r3, #1
 8003096:	3b01      	subs	r3, #1
 8003098:	041b      	lsls	r3, r3, #16
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	061b      	lsls	r3, r3, #24
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	071b      	lsls	r3, r3, #28
 80030aa:	491b      	ldr	r1, [pc, #108]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b0:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <HAL_RCC_OscConfig+0x4b4>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b6:	f7fe fb59 	bl	800176c <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030be:	f7fe fb55 	bl	800176c <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e064      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d0:	4b11      	ldr	r3, [pc, #68]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0x452>
 80030dc:	e05c      	b.n	8003198 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <HAL_RCC_OscConfig+0x4b4>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7fe fb42 	bl	800176c <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fe fb3e 	bl	800176c <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e04d      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_RCC_OscConfig+0x4ac>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x480>
 800310a:	e045      	b.n	8003198 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d107      	bne.n	8003124 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e040      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
 8003118:	40023800 	.word	0x40023800
 800311c:	40007000 	.word	0x40007000
 8003120:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003124:	4b1f      	ldr	r3, [pc, #124]	; (80031a4 <HAL_RCC_OscConfig+0x538>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d030      	beq.n	8003194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313c:	429a      	cmp	r2, r3
 800313e:	d129      	bne.n	8003194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314a:	429a      	cmp	r2, r3
 800314c:	d122      	bne.n	8003194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003154:	4013      	ands	r3, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800315a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800315c:	4293      	cmp	r3, r2
 800315e:	d119      	bne.n	8003194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	3b01      	subs	r3, #1
 800316e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d10f      	bne.n	8003194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d107      	bne.n	8003194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d001      	beq.n	8003198 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800

080031a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e03f      	b.n	800323a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fe f882 	bl	80012d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2224      	movs	r2, #36	; 0x24
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f929 	bl	8003444 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003200:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003210:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003220:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b08a      	sub	sp, #40	; 0x28
 8003246:	af02      	add	r7, sp, #8
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	603b      	str	r3, [r7, #0]
 800324e:	4613      	mov	r3, r2
 8003250:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b20      	cmp	r3, #32
 8003260:	d17c      	bne.n	800335c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <HAL_UART_Transmit+0x2c>
 8003268:	88fb      	ldrh	r3, [r7, #6]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e075      	b.n	800335e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_UART_Transmit+0x3e>
 800327c:	2302      	movs	r3, #2
 800327e:	e06e      	b.n	800335e <HAL_UART_Transmit+0x11c>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2221      	movs	r2, #33	; 0x21
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003296:	f7fe fa69 	bl	800176c <HAL_GetTick>
 800329a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	88fa      	ldrh	r2, [r7, #6]
 80032a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	88fa      	ldrh	r2, [r7, #6]
 80032a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b0:	d108      	bne.n	80032c4 <HAL_UART_Transmit+0x82>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d104      	bne.n	80032c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	e003      	b.n	80032cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032d4:	e02a      	b.n	800332c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2200      	movs	r2, #0
 80032de:	2180      	movs	r1, #128	; 0x80
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f840 	bl	8003366 <UART_WaitOnFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e036      	b.n	800335e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003304:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	3302      	adds	r3, #2
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	e007      	b.n	800331e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	781a      	ldrb	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	3301      	adds	r3, #1
 800331c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1cf      	bne.n	80032d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2200      	movs	r2, #0
 800333e:	2140      	movs	r1, #64	; 0x40
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 f810 	bl	8003366 <UART_WaitOnFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e006      	b.n	800335e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	e000      	b.n	800335e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800335c:	2302      	movs	r3, #2
  }
}
 800335e:	4618      	mov	r0, r3
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b090      	sub	sp, #64	; 0x40
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	603b      	str	r3, [r7, #0]
 8003372:	4613      	mov	r3, r2
 8003374:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003376:	e050      	b.n	800341a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337e:	d04c      	beq.n	800341a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003382:	2b00      	cmp	r3, #0
 8003384:	d007      	beq.n	8003396 <UART_WaitOnFlagUntilTimeout+0x30>
 8003386:	f7fe f9f1 	bl	800176c <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003392:	429a      	cmp	r2, r3
 8003394:	d241      	bcs.n	800341a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	330c      	adds	r3, #12
 800339c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a0:	e853 3f00 	ldrex	r3, [r3]
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	330c      	adds	r3, #12
 80033b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033b6:	637a      	str	r2, [r7, #52]	; 0x34
 80033b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033be:	e841 2300 	strex	r3, r2, [r1]
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e5      	bne.n	8003396 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3314      	adds	r3, #20
 80033d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	e853 3f00 	ldrex	r3, [r3]
 80033d8:	613b      	str	r3, [r7, #16]
   return(result);
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f023 0301 	bic.w	r3, r3, #1
 80033e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3314      	adds	r3, #20
 80033e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033ea:	623a      	str	r2, [r7, #32]
 80033ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ee:	69f9      	ldr	r1, [r7, #28]
 80033f0:	6a3a      	ldr	r2, [r7, #32]
 80033f2:	e841 2300 	strex	r3, r2, [r1]
 80033f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1e5      	bne.n	80033ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e00f      	b.n	800343a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4013      	ands	r3, r2
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	429a      	cmp	r2, r3
 8003428:	bf0c      	ite	eq
 800342a:	2301      	moveq	r3, #1
 800342c:	2300      	movne	r3, #0
 800342e:	b2db      	uxtb	r3, r3
 8003430:	461a      	mov	r2, r3
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	429a      	cmp	r2, r3
 8003436:	d09f      	beq.n	8003378 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3740      	adds	r7, #64	; 0x40
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003448:	b0c0      	sub	sp, #256	; 0x100
 800344a:	af00      	add	r7, sp, #0
 800344c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003460:	68d9      	ldr	r1, [r3, #12]
 8003462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	ea40 0301 	orr.w	r3, r0, r1
 800346c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800346e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	431a      	orrs	r2, r3
 800347c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	431a      	orrs	r2, r3
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800349c:	f021 010c 	bic.w	r1, r1, #12
 80034a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034aa:	430b      	orrs	r3, r1
 80034ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034be:	6999      	ldr	r1, [r3, #24]
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	ea40 0301 	orr.w	r3, r0, r1
 80034ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	4b8f      	ldr	r3, [pc, #572]	; (8003710 <UART_SetConfig+0x2cc>)
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d005      	beq.n	80034e4 <UART_SetConfig+0xa0>
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	4b8d      	ldr	r3, [pc, #564]	; (8003714 <UART_SetConfig+0x2d0>)
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d104      	bne.n	80034ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034e4:	f7fe fe54 	bl	8002190 <HAL_RCC_GetPCLK2Freq>
 80034e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034ec:	e003      	b.n	80034f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034ee:	f7fe fe3b 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 80034f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003500:	f040 810c 	bne.w	800371c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003508:	2200      	movs	r2, #0
 800350a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800350e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003512:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003516:	4622      	mov	r2, r4
 8003518:	462b      	mov	r3, r5
 800351a:	1891      	adds	r1, r2, r2
 800351c:	65b9      	str	r1, [r7, #88]	; 0x58
 800351e:	415b      	adcs	r3, r3
 8003520:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003522:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003526:	4621      	mov	r1, r4
 8003528:	eb12 0801 	adds.w	r8, r2, r1
 800352c:	4629      	mov	r1, r5
 800352e:	eb43 0901 	adc.w	r9, r3, r1
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800353e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003542:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003546:	4690      	mov	r8, r2
 8003548:	4699      	mov	r9, r3
 800354a:	4623      	mov	r3, r4
 800354c:	eb18 0303 	adds.w	r3, r8, r3
 8003550:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003554:	462b      	mov	r3, r5
 8003556:	eb49 0303 	adc.w	r3, r9, r3
 800355a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800355e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800356a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800356e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003572:	460b      	mov	r3, r1
 8003574:	18db      	adds	r3, r3, r3
 8003576:	653b      	str	r3, [r7, #80]	; 0x50
 8003578:	4613      	mov	r3, r2
 800357a:	eb42 0303 	adc.w	r3, r2, r3
 800357e:	657b      	str	r3, [r7, #84]	; 0x54
 8003580:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003584:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003588:	f7fd fb2e 	bl	8000be8 <__aeabi_uldivmod>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4b61      	ldr	r3, [pc, #388]	; (8003718 <UART_SetConfig+0x2d4>)
 8003592:	fba3 2302 	umull	r2, r3, r3, r2
 8003596:	095b      	lsrs	r3, r3, #5
 8003598:	011c      	lsls	r4, r3, #4
 800359a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800359e:	2200      	movs	r2, #0
 80035a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035ac:	4642      	mov	r2, r8
 80035ae:	464b      	mov	r3, r9
 80035b0:	1891      	adds	r1, r2, r2
 80035b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80035b4:	415b      	adcs	r3, r3
 80035b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035bc:	4641      	mov	r1, r8
 80035be:	eb12 0a01 	adds.w	sl, r2, r1
 80035c2:	4649      	mov	r1, r9
 80035c4:	eb43 0b01 	adc.w	fp, r3, r1
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035dc:	4692      	mov	sl, r2
 80035de:	469b      	mov	fp, r3
 80035e0:	4643      	mov	r3, r8
 80035e2:	eb1a 0303 	adds.w	r3, sl, r3
 80035e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035ea:	464b      	mov	r3, r9
 80035ec:	eb4b 0303 	adc.w	r3, fp, r3
 80035f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003600:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003604:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003608:	460b      	mov	r3, r1
 800360a:	18db      	adds	r3, r3, r3
 800360c:	643b      	str	r3, [r7, #64]	; 0x40
 800360e:	4613      	mov	r3, r2
 8003610:	eb42 0303 	adc.w	r3, r2, r3
 8003614:	647b      	str	r3, [r7, #68]	; 0x44
 8003616:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800361a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800361e:	f7fd fae3 	bl	8000be8 <__aeabi_uldivmod>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4611      	mov	r1, r2
 8003628:	4b3b      	ldr	r3, [pc, #236]	; (8003718 <UART_SetConfig+0x2d4>)
 800362a:	fba3 2301 	umull	r2, r3, r3, r1
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	2264      	movs	r2, #100	; 0x64
 8003632:	fb02 f303 	mul.w	r3, r2, r3
 8003636:	1acb      	subs	r3, r1, r3
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800363e:	4b36      	ldr	r3, [pc, #216]	; (8003718 <UART_SetConfig+0x2d4>)
 8003640:	fba3 2302 	umull	r2, r3, r3, r2
 8003644:	095b      	lsrs	r3, r3, #5
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800364c:	441c      	add	r4, r3
 800364e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003652:	2200      	movs	r2, #0
 8003654:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003658:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800365c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003660:	4642      	mov	r2, r8
 8003662:	464b      	mov	r3, r9
 8003664:	1891      	adds	r1, r2, r2
 8003666:	63b9      	str	r1, [r7, #56]	; 0x38
 8003668:	415b      	adcs	r3, r3
 800366a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800366c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003670:	4641      	mov	r1, r8
 8003672:	1851      	adds	r1, r2, r1
 8003674:	6339      	str	r1, [r7, #48]	; 0x30
 8003676:	4649      	mov	r1, r9
 8003678:	414b      	adcs	r3, r1
 800367a:	637b      	str	r3, [r7, #52]	; 0x34
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003688:	4659      	mov	r1, fp
 800368a:	00cb      	lsls	r3, r1, #3
 800368c:	4651      	mov	r1, sl
 800368e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003692:	4651      	mov	r1, sl
 8003694:	00ca      	lsls	r2, r1, #3
 8003696:	4610      	mov	r0, r2
 8003698:	4619      	mov	r1, r3
 800369a:	4603      	mov	r3, r0
 800369c:	4642      	mov	r2, r8
 800369e:	189b      	adds	r3, r3, r2
 80036a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036a4:	464b      	mov	r3, r9
 80036a6:	460a      	mov	r2, r1
 80036a8:	eb42 0303 	adc.w	r3, r2, r3
 80036ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036c4:	460b      	mov	r3, r1
 80036c6:	18db      	adds	r3, r3, r3
 80036c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ca:	4613      	mov	r3, r2
 80036cc:	eb42 0303 	adc.w	r3, r2, r3
 80036d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036da:	f7fd fa85 	bl	8000be8 <__aeabi_uldivmod>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <UART_SetConfig+0x2d4>)
 80036e4:	fba3 1302 	umull	r1, r3, r3, r2
 80036e8:	095b      	lsrs	r3, r3, #5
 80036ea:	2164      	movs	r1, #100	; 0x64
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	3332      	adds	r3, #50	; 0x32
 80036f6:	4a08      	ldr	r2, [pc, #32]	; (8003718 <UART_SetConfig+0x2d4>)
 80036f8:	fba2 2303 	umull	r2, r3, r2, r3
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	f003 0207 	and.w	r2, r3, #7
 8003702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4422      	add	r2, r4
 800370a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800370c:	e105      	b.n	800391a <UART_SetConfig+0x4d6>
 800370e:	bf00      	nop
 8003710:	40011000 	.word	0x40011000
 8003714:	40011400 	.word	0x40011400
 8003718:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800371c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003720:	2200      	movs	r2, #0
 8003722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003726:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800372a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800372e:	4642      	mov	r2, r8
 8003730:	464b      	mov	r3, r9
 8003732:	1891      	adds	r1, r2, r2
 8003734:	6239      	str	r1, [r7, #32]
 8003736:	415b      	adcs	r3, r3
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
 800373a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800373e:	4641      	mov	r1, r8
 8003740:	1854      	adds	r4, r2, r1
 8003742:	4649      	mov	r1, r9
 8003744:	eb43 0501 	adc.w	r5, r3, r1
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	00eb      	lsls	r3, r5, #3
 8003752:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003756:	00e2      	lsls	r2, r4, #3
 8003758:	4614      	mov	r4, r2
 800375a:	461d      	mov	r5, r3
 800375c:	4643      	mov	r3, r8
 800375e:	18e3      	adds	r3, r4, r3
 8003760:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003764:	464b      	mov	r3, r9
 8003766:	eb45 0303 	adc.w	r3, r5, r3
 800376a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800376e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800377a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800378a:	4629      	mov	r1, r5
 800378c:	008b      	lsls	r3, r1, #2
 800378e:	4621      	mov	r1, r4
 8003790:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003794:	4621      	mov	r1, r4
 8003796:	008a      	lsls	r2, r1, #2
 8003798:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800379c:	f7fd fa24 	bl	8000be8 <__aeabi_uldivmod>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4b60      	ldr	r3, [pc, #384]	; (8003928 <UART_SetConfig+0x4e4>)
 80037a6:	fba3 2302 	umull	r2, r3, r3, r2
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	011c      	lsls	r4, r3, #4
 80037ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037b2:	2200      	movs	r2, #0
 80037b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037c0:	4642      	mov	r2, r8
 80037c2:	464b      	mov	r3, r9
 80037c4:	1891      	adds	r1, r2, r2
 80037c6:	61b9      	str	r1, [r7, #24]
 80037c8:	415b      	adcs	r3, r3
 80037ca:	61fb      	str	r3, [r7, #28]
 80037cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037d0:	4641      	mov	r1, r8
 80037d2:	1851      	adds	r1, r2, r1
 80037d4:	6139      	str	r1, [r7, #16]
 80037d6:	4649      	mov	r1, r9
 80037d8:	414b      	adcs	r3, r1
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037e8:	4659      	mov	r1, fp
 80037ea:	00cb      	lsls	r3, r1, #3
 80037ec:	4651      	mov	r1, sl
 80037ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037f2:	4651      	mov	r1, sl
 80037f4:	00ca      	lsls	r2, r1, #3
 80037f6:	4610      	mov	r0, r2
 80037f8:	4619      	mov	r1, r3
 80037fa:	4603      	mov	r3, r0
 80037fc:	4642      	mov	r2, r8
 80037fe:	189b      	adds	r3, r3, r2
 8003800:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003804:	464b      	mov	r3, r9
 8003806:	460a      	mov	r2, r1
 8003808:	eb42 0303 	adc.w	r3, r2, r3
 800380c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	67bb      	str	r3, [r7, #120]	; 0x78
 800381a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003828:	4649      	mov	r1, r9
 800382a:	008b      	lsls	r3, r1, #2
 800382c:	4641      	mov	r1, r8
 800382e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003832:	4641      	mov	r1, r8
 8003834:	008a      	lsls	r2, r1, #2
 8003836:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800383a:	f7fd f9d5 	bl	8000be8 <__aeabi_uldivmod>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4b39      	ldr	r3, [pc, #228]	; (8003928 <UART_SetConfig+0x4e4>)
 8003844:	fba3 1302 	umull	r1, r3, r3, r2
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	2164      	movs	r1, #100	; 0x64
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	3332      	adds	r3, #50	; 0x32
 8003856:	4a34      	ldr	r2, [pc, #208]	; (8003928 <UART_SetConfig+0x4e4>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	095b      	lsrs	r3, r3, #5
 800385e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003862:	441c      	add	r4, r3
 8003864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003868:	2200      	movs	r2, #0
 800386a:	673b      	str	r3, [r7, #112]	; 0x70
 800386c:	677a      	str	r2, [r7, #116]	; 0x74
 800386e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003872:	4642      	mov	r2, r8
 8003874:	464b      	mov	r3, r9
 8003876:	1891      	adds	r1, r2, r2
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	415b      	adcs	r3, r3
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003882:	4641      	mov	r1, r8
 8003884:	1851      	adds	r1, r2, r1
 8003886:	6039      	str	r1, [r7, #0]
 8003888:	4649      	mov	r1, r9
 800388a:	414b      	adcs	r3, r1
 800388c:	607b      	str	r3, [r7, #4]
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800389a:	4659      	mov	r1, fp
 800389c:	00cb      	lsls	r3, r1, #3
 800389e:	4651      	mov	r1, sl
 80038a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038a4:	4651      	mov	r1, sl
 80038a6:	00ca      	lsls	r2, r1, #3
 80038a8:	4610      	mov	r0, r2
 80038aa:	4619      	mov	r1, r3
 80038ac:	4603      	mov	r3, r0
 80038ae:	4642      	mov	r2, r8
 80038b0:	189b      	adds	r3, r3, r2
 80038b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80038b4:	464b      	mov	r3, r9
 80038b6:	460a      	mov	r2, r1
 80038b8:	eb42 0303 	adc.w	r3, r2, r3
 80038bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	663b      	str	r3, [r7, #96]	; 0x60
 80038c8:	667a      	str	r2, [r7, #100]	; 0x64
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038d6:	4649      	mov	r1, r9
 80038d8:	008b      	lsls	r3, r1, #2
 80038da:	4641      	mov	r1, r8
 80038dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038e0:	4641      	mov	r1, r8
 80038e2:	008a      	lsls	r2, r1, #2
 80038e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038e8:	f7fd f97e 	bl	8000be8 <__aeabi_uldivmod>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <UART_SetConfig+0x4e4>)
 80038f2:	fba3 1302 	umull	r1, r3, r3, r2
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	2164      	movs	r1, #100	; 0x64
 80038fa:	fb01 f303 	mul.w	r3, r1, r3
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	3332      	adds	r3, #50	; 0x32
 8003904:	4a08      	ldr	r2, [pc, #32]	; (8003928 <UART_SetConfig+0x4e4>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	f003 020f 	and.w	r2, r3, #15
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4422      	add	r2, r4
 8003918:	609a      	str	r2, [r3, #8]
}
 800391a:	bf00      	nop
 800391c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003920:	46bd      	mov	sp, r7
 8003922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003926:	bf00      	nop
 8003928:	51eb851f 	.word	0x51eb851f

0800392c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800392c:	b084      	sub	sp, #16
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	f107 001c 	add.w	r0, r7, #28
 800393a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	2b01      	cmp	r3, #1
 8003942:	d122      	bne.n	800398a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800396c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800396e:	2b01      	cmp	r3, #1
 8003970:	d105      	bne.n	800397e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fa9c 	bl	8003ebc <USB_CoreReset>
 8003984:	4603      	mov	r3, r0
 8003986:	73fb      	strb	r3, [r7, #15]
 8003988:	e01a      	b.n	80039c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fa90 	bl	8003ebc <USB_CoreReset>
 800399c:	4603      	mov	r3, r0
 800399e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80039a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	639a      	str	r2, [r3, #56]	; 0x38
 80039b2:	e005      	b.n	80039c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80039c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d10b      	bne.n	80039de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f043 0206 	orr.w	r2, r3, #6
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f043 0220 	orr.w	r2, r3, #32
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80039de:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039ea:	b004      	add	sp, #16
 80039ec:	4770      	bx	lr

080039ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f023 0201 	bic.w	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d115      	bne.n	8003a5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a3e:	2001      	movs	r0, #1
 8003a40:	f7fd fea0 	bl	8001784 <HAL_Delay>
      ms++;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	3301      	adds	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fa28 	bl	8003ea0 <USB_GetMode>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d01e      	beq.n	8003a94 <USB_SetCurrentMode+0x84>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b31      	cmp	r3, #49	; 0x31
 8003a5a:	d9f0      	bls.n	8003a3e <USB_SetCurrentMode+0x2e>
 8003a5c:	e01a      	b.n	8003a94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a5e:	78fb      	ldrb	r3, [r7, #3]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d115      	bne.n	8003a90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a70:	2001      	movs	r0, #1
 8003a72:	f7fd fe87 	bl	8001784 <HAL_Delay>
      ms++;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 fa0f 	bl	8003ea0 <USB_GetMode>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <USB_SetCurrentMode+0x84>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b31      	cmp	r3, #49	; 0x31
 8003a8c:	d9f0      	bls.n	8003a70 <USB_SetCurrentMode+0x60>
 8003a8e:	e001      	b.n	8003a94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e005      	b.n	8003aa0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b32      	cmp	r3, #50	; 0x32
 8003a98:	d101      	bne.n	8003a9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b086      	sub	sp, #24
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	e009      	b.n	8003adc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	3340      	adds	r3, #64	; 0x40
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	2b0e      	cmp	r3, #14
 8003ae0:	d9f2      	bls.n	8003ac8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d11c      	bne.n	8003b22 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003af6:	f043 0302 	orr.w	r3, r3, #2
 8003afa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b00:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	e005      	b.n	8003b2e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b34:	461a      	mov	r2, r3
 8003b36:	2300      	movs	r3, #0
 8003b38:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b40:	4619      	mov	r1, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b48:	461a      	mov	r2, r3
 8003b4a:	680b      	ldr	r3, [r1, #0]
 8003b4c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d10c      	bne.n	8003b6e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d104      	bne.n	8003b64 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f965 	bl	8003e2c <USB_SetDevSpeed>
 8003b62:	e008      	b.n	8003b76 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b64:	2101      	movs	r1, #1
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f960 	bl	8003e2c <USB_SetDevSpeed>
 8003b6c:	e003      	b.n	8003b76 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b6e:	2103      	movs	r1, #3
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f95b 	bl	8003e2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b76:	2110      	movs	r1, #16
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f8f3 	bl	8003d64 <USB_FlushTxFifo>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f91f 	bl	8003dcc <USB_FlushRxFifo>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003baa:	461a      	mov	r2, r3
 8003bac:	2300      	movs	r3, #0
 8003bae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	e043      	b.n	8003c4a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bd8:	d118      	bne.n	8003c0c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10a      	bne.n	8003bf6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bec:	461a      	mov	r2, r3
 8003bee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	e013      	b.n	8003c1e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c02:	461a      	mov	r2, r3
 8003c04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e008      	b.n	8003c1e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c18:	461a      	mov	r2, r3
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	3301      	adds	r3, #1
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d3b7      	bcc.n	8003bc2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c52:	2300      	movs	r3, #0
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	e043      	b.n	8003ce0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c6e:	d118      	bne.n	8003ca2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10a      	bne.n	8003c8c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c82:	461a      	mov	r2, r3
 8003c84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e013      	b.n	8003cb4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c98:	461a      	mov	r2, r3
 8003c9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	e008      	b.n	8003cb4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cae:	461a      	mov	r2, r3
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cd8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d3b7      	bcc.n	8003c58 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cfa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d105      	bne.n	8003d1c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	f043 0210 	orr.w	r2, r3, #16
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699a      	ldr	r2, [r3, #24]
 8003d20:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <USB_DevInit+0x2b8>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d005      	beq.n	8003d3a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f043 0208 	orr.w	r2, r3, #8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d107      	bne.n	8003d50 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d48:	f043 0304 	orr.w	r3, r3, #4
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d5c:	b004      	add	sp, #16
 8003d5e:	4770      	bx	lr
 8003d60:	803c3800 	.word	0x803c3800

08003d64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	3301      	adds	r3, #1
 8003d76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4a13      	ldr	r2, [pc, #76]	; (8003dc8 <USB_FlushTxFifo+0x64>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d901      	bls.n	8003d84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e01b      	b.n	8003dbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	daf2      	bge.n	8003d72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	019b      	lsls	r3, r3, #6
 8003d94:	f043 0220 	orr.w	r2, r3, #32
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4a08      	ldr	r2, [pc, #32]	; (8003dc8 <USB_FlushTxFifo+0x64>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d901      	bls.n	8003dae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e006      	b.n	8003dbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	d0f0      	beq.n	8003d9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	00030d40 	.word	0x00030d40

08003dcc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4a11      	ldr	r2, [pc, #68]	; (8003e28 <USB_FlushRxFifo+0x5c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d901      	bls.n	8003dea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e018      	b.n	8003e1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	daf2      	bge.n	8003dd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2210      	movs	r2, #16
 8003dfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4a08      	ldr	r2, [pc, #32]	; (8003e28 <USB_FlushRxFifo+0x5c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e006      	b.n	8003e1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	2b10      	cmp	r3, #16
 8003e18:	d0f0      	beq.n	8003dfc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	00030d40 	.word	0x00030d40

08003e2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	68f9      	ldr	r1, [r7, #12]
 8003e48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b085      	sub	sp, #20
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e78:	f023 0303 	bic.w	r3, r3, #3
 8003e7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e8c:	f043 0302 	orr.w	r3, r3, #2
 8003e90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	f003 0301 	and.w	r3, r3, #1
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4a13      	ldr	r2, [pc, #76]	; (8003f20 <USB_CoreReset+0x64>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e01b      	b.n	8003f12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	daf2      	bge.n	8003ec8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f043 0201 	orr.w	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4a09      	ldr	r2, [pc, #36]	; (8003f20 <USB_CoreReset+0x64>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d901      	bls.n	8003f04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e006      	b.n	8003f12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d0f0      	beq.n	8003ef2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	00030d40 	.word	0x00030d40

08003f24 <__errno>:
 8003f24:	4b01      	ldr	r3, [pc, #4]	; (8003f2c <__errno+0x8>)
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	2000000c 	.word	0x2000000c

08003f30 <__libc_init_array>:
 8003f30:	b570      	push	{r4, r5, r6, lr}
 8003f32:	4d0d      	ldr	r5, [pc, #52]	; (8003f68 <__libc_init_array+0x38>)
 8003f34:	4c0d      	ldr	r4, [pc, #52]	; (8003f6c <__libc_init_array+0x3c>)
 8003f36:	1b64      	subs	r4, r4, r5
 8003f38:	10a4      	asrs	r4, r4, #2
 8003f3a:	2600      	movs	r6, #0
 8003f3c:	42a6      	cmp	r6, r4
 8003f3e:	d109      	bne.n	8003f54 <__libc_init_array+0x24>
 8003f40:	4d0b      	ldr	r5, [pc, #44]	; (8003f70 <__libc_init_array+0x40>)
 8003f42:	4c0c      	ldr	r4, [pc, #48]	; (8003f74 <__libc_init_array+0x44>)
 8003f44:	f002 fdc2 	bl	8006acc <_init>
 8003f48:	1b64      	subs	r4, r4, r5
 8003f4a:	10a4      	asrs	r4, r4, #2
 8003f4c:	2600      	movs	r6, #0
 8003f4e:	42a6      	cmp	r6, r4
 8003f50:	d105      	bne.n	8003f5e <__libc_init_array+0x2e>
 8003f52:	bd70      	pop	{r4, r5, r6, pc}
 8003f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f58:	4798      	blx	r3
 8003f5a:	3601      	adds	r6, #1
 8003f5c:	e7ee      	b.n	8003f3c <__libc_init_array+0xc>
 8003f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f62:	4798      	blx	r3
 8003f64:	3601      	adds	r6, #1
 8003f66:	e7f2      	b.n	8003f4e <__libc_init_array+0x1e>
 8003f68:	08006efc 	.word	0x08006efc
 8003f6c:	08006efc 	.word	0x08006efc
 8003f70:	08006efc 	.word	0x08006efc
 8003f74:	08006f00 	.word	0x08006f00

08003f78 <memset>:
 8003f78:	4402      	add	r2, r0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d100      	bne.n	8003f82 <memset+0xa>
 8003f80:	4770      	bx	lr
 8003f82:	f803 1b01 	strb.w	r1, [r3], #1
 8003f86:	e7f9      	b.n	8003f7c <memset+0x4>

08003f88 <__cvt>:
 8003f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f8c:	ec55 4b10 	vmov	r4, r5, d0
 8003f90:	2d00      	cmp	r5, #0
 8003f92:	460e      	mov	r6, r1
 8003f94:	4619      	mov	r1, r3
 8003f96:	462b      	mov	r3, r5
 8003f98:	bfbb      	ittet	lt
 8003f9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003f9e:	461d      	movlt	r5, r3
 8003fa0:	2300      	movge	r3, #0
 8003fa2:	232d      	movlt	r3, #45	; 0x2d
 8003fa4:	700b      	strb	r3, [r1, #0]
 8003fa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fa8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003fac:	4691      	mov	r9, r2
 8003fae:	f023 0820 	bic.w	r8, r3, #32
 8003fb2:	bfbc      	itt	lt
 8003fb4:	4622      	movlt	r2, r4
 8003fb6:	4614      	movlt	r4, r2
 8003fb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003fbc:	d005      	beq.n	8003fca <__cvt+0x42>
 8003fbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003fc2:	d100      	bne.n	8003fc6 <__cvt+0x3e>
 8003fc4:	3601      	adds	r6, #1
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	e000      	b.n	8003fcc <__cvt+0x44>
 8003fca:	2103      	movs	r1, #3
 8003fcc:	ab03      	add	r3, sp, #12
 8003fce:	9301      	str	r3, [sp, #4]
 8003fd0:	ab02      	add	r3, sp, #8
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	ec45 4b10 	vmov	d0, r4, r5
 8003fd8:	4653      	mov	r3, sl
 8003fda:	4632      	mov	r2, r6
 8003fdc:	f000 fe18 	bl	8004c10 <_dtoa_r>
 8003fe0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003fe4:	4607      	mov	r7, r0
 8003fe6:	d102      	bne.n	8003fee <__cvt+0x66>
 8003fe8:	f019 0f01 	tst.w	r9, #1
 8003fec:	d022      	beq.n	8004034 <__cvt+0xac>
 8003fee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ff2:	eb07 0906 	add.w	r9, r7, r6
 8003ff6:	d110      	bne.n	800401a <__cvt+0x92>
 8003ff8:	783b      	ldrb	r3, [r7, #0]
 8003ffa:	2b30      	cmp	r3, #48	; 0x30
 8003ffc:	d10a      	bne.n	8004014 <__cvt+0x8c>
 8003ffe:	2200      	movs	r2, #0
 8004000:	2300      	movs	r3, #0
 8004002:	4620      	mov	r0, r4
 8004004:	4629      	mov	r1, r5
 8004006:	f7fc fd7f 	bl	8000b08 <__aeabi_dcmpeq>
 800400a:	b918      	cbnz	r0, 8004014 <__cvt+0x8c>
 800400c:	f1c6 0601 	rsb	r6, r6, #1
 8004010:	f8ca 6000 	str.w	r6, [sl]
 8004014:	f8da 3000 	ldr.w	r3, [sl]
 8004018:	4499      	add	r9, r3
 800401a:	2200      	movs	r2, #0
 800401c:	2300      	movs	r3, #0
 800401e:	4620      	mov	r0, r4
 8004020:	4629      	mov	r1, r5
 8004022:	f7fc fd71 	bl	8000b08 <__aeabi_dcmpeq>
 8004026:	b108      	cbz	r0, 800402c <__cvt+0xa4>
 8004028:	f8cd 900c 	str.w	r9, [sp, #12]
 800402c:	2230      	movs	r2, #48	; 0x30
 800402e:	9b03      	ldr	r3, [sp, #12]
 8004030:	454b      	cmp	r3, r9
 8004032:	d307      	bcc.n	8004044 <__cvt+0xbc>
 8004034:	9b03      	ldr	r3, [sp, #12]
 8004036:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004038:	1bdb      	subs	r3, r3, r7
 800403a:	4638      	mov	r0, r7
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	b004      	add	sp, #16
 8004040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004044:	1c59      	adds	r1, r3, #1
 8004046:	9103      	str	r1, [sp, #12]
 8004048:	701a      	strb	r2, [r3, #0]
 800404a:	e7f0      	b.n	800402e <__cvt+0xa6>

0800404c <__exponent>:
 800404c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800404e:	4603      	mov	r3, r0
 8004050:	2900      	cmp	r1, #0
 8004052:	bfb8      	it	lt
 8004054:	4249      	neglt	r1, r1
 8004056:	f803 2b02 	strb.w	r2, [r3], #2
 800405a:	bfb4      	ite	lt
 800405c:	222d      	movlt	r2, #45	; 0x2d
 800405e:	222b      	movge	r2, #43	; 0x2b
 8004060:	2909      	cmp	r1, #9
 8004062:	7042      	strb	r2, [r0, #1]
 8004064:	dd2a      	ble.n	80040bc <__exponent+0x70>
 8004066:	f10d 0407 	add.w	r4, sp, #7
 800406a:	46a4      	mov	ip, r4
 800406c:	270a      	movs	r7, #10
 800406e:	46a6      	mov	lr, r4
 8004070:	460a      	mov	r2, r1
 8004072:	fb91 f6f7 	sdiv	r6, r1, r7
 8004076:	fb07 1516 	mls	r5, r7, r6, r1
 800407a:	3530      	adds	r5, #48	; 0x30
 800407c:	2a63      	cmp	r2, #99	; 0x63
 800407e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004082:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004086:	4631      	mov	r1, r6
 8004088:	dcf1      	bgt.n	800406e <__exponent+0x22>
 800408a:	3130      	adds	r1, #48	; 0x30
 800408c:	f1ae 0502 	sub.w	r5, lr, #2
 8004090:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004094:	1c44      	adds	r4, r0, #1
 8004096:	4629      	mov	r1, r5
 8004098:	4561      	cmp	r1, ip
 800409a:	d30a      	bcc.n	80040b2 <__exponent+0x66>
 800409c:	f10d 0209 	add.w	r2, sp, #9
 80040a0:	eba2 020e 	sub.w	r2, r2, lr
 80040a4:	4565      	cmp	r5, ip
 80040a6:	bf88      	it	hi
 80040a8:	2200      	movhi	r2, #0
 80040aa:	4413      	add	r3, r2
 80040ac:	1a18      	subs	r0, r3, r0
 80040ae:	b003      	add	sp, #12
 80040b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80040ba:	e7ed      	b.n	8004098 <__exponent+0x4c>
 80040bc:	2330      	movs	r3, #48	; 0x30
 80040be:	3130      	adds	r1, #48	; 0x30
 80040c0:	7083      	strb	r3, [r0, #2]
 80040c2:	70c1      	strb	r1, [r0, #3]
 80040c4:	1d03      	adds	r3, r0, #4
 80040c6:	e7f1      	b.n	80040ac <__exponent+0x60>

080040c8 <_printf_float>:
 80040c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040cc:	ed2d 8b02 	vpush	{d8}
 80040d0:	b08d      	sub	sp, #52	; 0x34
 80040d2:	460c      	mov	r4, r1
 80040d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80040d8:	4616      	mov	r6, r2
 80040da:	461f      	mov	r7, r3
 80040dc:	4605      	mov	r5, r0
 80040de:	f001 fd3d 	bl	8005b5c <_localeconv_r>
 80040e2:	f8d0 a000 	ldr.w	sl, [r0]
 80040e6:	4650      	mov	r0, sl
 80040e8:	f7fc f892 	bl	8000210 <strlen>
 80040ec:	2300      	movs	r3, #0
 80040ee:	930a      	str	r3, [sp, #40]	; 0x28
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	9305      	str	r3, [sp, #20]
 80040f4:	f8d8 3000 	ldr.w	r3, [r8]
 80040f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80040fc:	3307      	adds	r3, #7
 80040fe:	f023 0307 	bic.w	r3, r3, #7
 8004102:	f103 0208 	add.w	r2, r3, #8
 8004106:	f8c8 2000 	str.w	r2, [r8]
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004112:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004116:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800411a:	9307      	str	r3, [sp, #28]
 800411c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004120:	ee08 0a10 	vmov	s16, r0
 8004124:	4b9f      	ldr	r3, [pc, #636]	; (80043a4 <_printf_float+0x2dc>)
 8004126:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800412a:	f04f 32ff 	mov.w	r2, #4294967295
 800412e:	f7fc fd1d 	bl	8000b6c <__aeabi_dcmpun>
 8004132:	bb88      	cbnz	r0, 8004198 <_printf_float+0xd0>
 8004134:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004138:	4b9a      	ldr	r3, [pc, #616]	; (80043a4 <_printf_float+0x2dc>)
 800413a:	f04f 32ff 	mov.w	r2, #4294967295
 800413e:	f7fc fcf7 	bl	8000b30 <__aeabi_dcmple>
 8004142:	bb48      	cbnz	r0, 8004198 <_printf_float+0xd0>
 8004144:	2200      	movs	r2, #0
 8004146:	2300      	movs	r3, #0
 8004148:	4640      	mov	r0, r8
 800414a:	4649      	mov	r1, r9
 800414c:	f7fc fce6 	bl	8000b1c <__aeabi_dcmplt>
 8004150:	b110      	cbz	r0, 8004158 <_printf_float+0x90>
 8004152:	232d      	movs	r3, #45	; 0x2d
 8004154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004158:	4b93      	ldr	r3, [pc, #588]	; (80043a8 <_printf_float+0x2e0>)
 800415a:	4894      	ldr	r0, [pc, #592]	; (80043ac <_printf_float+0x2e4>)
 800415c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004160:	bf94      	ite	ls
 8004162:	4698      	movls	r8, r3
 8004164:	4680      	movhi	r8, r0
 8004166:	2303      	movs	r3, #3
 8004168:	6123      	str	r3, [r4, #16]
 800416a:	9b05      	ldr	r3, [sp, #20]
 800416c:	f023 0204 	bic.w	r2, r3, #4
 8004170:	6022      	str	r2, [r4, #0]
 8004172:	f04f 0900 	mov.w	r9, #0
 8004176:	9700      	str	r7, [sp, #0]
 8004178:	4633      	mov	r3, r6
 800417a:	aa0b      	add	r2, sp, #44	; 0x2c
 800417c:	4621      	mov	r1, r4
 800417e:	4628      	mov	r0, r5
 8004180:	f000 f9d8 	bl	8004534 <_printf_common>
 8004184:	3001      	adds	r0, #1
 8004186:	f040 8090 	bne.w	80042aa <_printf_float+0x1e2>
 800418a:	f04f 30ff 	mov.w	r0, #4294967295
 800418e:	b00d      	add	sp, #52	; 0x34
 8004190:	ecbd 8b02 	vpop	{d8}
 8004194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004198:	4642      	mov	r2, r8
 800419a:	464b      	mov	r3, r9
 800419c:	4640      	mov	r0, r8
 800419e:	4649      	mov	r1, r9
 80041a0:	f7fc fce4 	bl	8000b6c <__aeabi_dcmpun>
 80041a4:	b140      	cbz	r0, 80041b8 <_printf_float+0xf0>
 80041a6:	464b      	mov	r3, r9
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	bfbc      	itt	lt
 80041ac:	232d      	movlt	r3, #45	; 0x2d
 80041ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80041b2:	487f      	ldr	r0, [pc, #508]	; (80043b0 <_printf_float+0x2e8>)
 80041b4:	4b7f      	ldr	r3, [pc, #508]	; (80043b4 <_printf_float+0x2ec>)
 80041b6:	e7d1      	b.n	800415c <_printf_float+0x94>
 80041b8:	6863      	ldr	r3, [r4, #4]
 80041ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80041be:	9206      	str	r2, [sp, #24]
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	d13f      	bne.n	8004244 <_printf_float+0x17c>
 80041c4:	2306      	movs	r3, #6
 80041c6:	6063      	str	r3, [r4, #4]
 80041c8:	9b05      	ldr	r3, [sp, #20]
 80041ca:	6861      	ldr	r1, [r4, #4]
 80041cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80041d0:	2300      	movs	r3, #0
 80041d2:	9303      	str	r3, [sp, #12]
 80041d4:	ab0a      	add	r3, sp, #40	; 0x28
 80041d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80041da:	ab09      	add	r3, sp, #36	; 0x24
 80041dc:	ec49 8b10 	vmov	d0, r8, r9
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	6022      	str	r2, [r4, #0]
 80041e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80041e8:	4628      	mov	r0, r5
 80041ea:	f7ff fecd 	bl	8003f88 <__cvt>
 80041ee:	9b06      	ldr	r3, [sp, #24]
 80041f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041f2:	2b47      	cmp	r3, #71	; 0x47
 80041f4:	4680      	mov	r8, r0
 80041f6:	d108      	bne.n	800420a <_printf_float+0x142>
 80041f8:	1cc8      	adds	r0, r1, #3
 80041fa:	db02      	blt.n	8004202 <_printf_float+0x13a>
 80041fc:	6863      	ldr	r3, [r4, #4]
 80041fe:	4299      	cmp	r1, r3
 8004200:	dd41      	ble.n	8004286 <_printf_float+0x1be>
 8004202:	f1ab 0b02 	sub.w	fp, fp, #2
 8004206:	fa5f fb8b 	uxtb.w	fp, fp
 800420a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800420e:	d820      	bhi.n	8004252 <_printf_float+0x18a>
 8004210:	3901      	subs	r1, #1
 8004212:	465a      	mov	r2, fp
 8004214:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004218:	9109      	str	r1, [sp, #36]	; 0x24
 800421a:	f7ff ff17 	bl	800404c <__exponent>
 800421e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004220:	1813      	adds	r3, r2, r0
 8004222:	2a01      	cmp	r2, #1
 8004224:	4681      	mov	r9, r0
 8004226:	6123      	str	r3, [r4, #16]
 8004228:	dc02      	bgt.n	8004230 <_printf_float+0x168>
 800422a:	6822      	ldr	r2, [r4, #0]
 800422c:	07d2      	lsls	r2, r2, #31
 800422e:	d501      	bpl.n	8004234 <_printf_float+0x16c>
 8004230:	3301      	adds	r3, #1
 8004232:	6123      	str	r3, [r4, #16]
 8004234:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004238:	2b00      	cmp	r3, #0
 800423a:	d09c      	beq.n	8004176 <_printf_float+0xae>
 800423c:	232d      	movs	r3, #45	; 0x2d
 800423e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004242:	e798      	b.n	8004176 <_printf_float+0xae>
 8004244:	9a06      	ldr	r2, [sp, #24]
 8004246:	2a47      	cmp	r2, #71	; 0x47
 8004248:	d1be      	bne.n	80041c8 <_printf_float+0x100>
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1bc      	bne.n	80041c8 <_printf_float+0x100>
 800424e:	2301      	movs	r3, #1
 8004250:	e7b9      	b.n	80041c6 <_printf_float+0xfe>
 8004252:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004256:	d118      	bne.n	800428a <_printf_float+0x1c2>
 8004258:	2900      	cmp	r1, #0
 800425a:	6863      	ldr	r3, [r4, #4]
 800425c:	dd0b      	ble.n	8004276 <_printf_float+0x1ae>
 800425e:	6121      	str	r1, [r4, #16]
 8004260:	b913      	cbnz	r3, 8004268 <_printf_float+0x1a0>
 8004262:	6822      	ldr	r2, [r4, #0]
 8004264:	07d0      	lsls	r0, r2, #31
 8004266:	d502      	bpl.n	800426e <_printf_float+0x1a6>
 8004268:	3301      	adds	r3, #1
 800426a:	440b      	add	r3, r1
 800426c:	6123      	str	r3, [r4, #16]
 800426e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004270:	f04f 0900 	mov.w	r9, #0
 8004274:	e7de      	b.n	8004234 <_printf_float+0x16c>
 8004276:	b913      	cbnz	r3, 800427e <_printf_float+0x1b6>
 8004278:	6822      	ldr	r2, [r4, #0]
 800427a:	07d2      	lsls	r2, r2, #31
 800427c:	d501      	bpl.n	8004282 <_printf_float+0x1ba>
 800427e:	3302      	adds	r3, #2
 8004280:	e7f4      	b.n	800426c <_printf_float+0x1a4>
 8004282:	2301      	movs	r3, #1
 8004284:	e7f2      	b.n	800426c <_printf_float+0x1a4>
 8004286:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800428a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800428c:	4299      	cmp	r1, r3
 800428e:	db05      	blt.n	800429c <_printf_float+0x1d4>
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	6121      	str	r1, [r4, #16]
 8004294:	07d8      	lsls	r0, r3, #31
 8004296:	d5ea      	bpl.n	800426e <_printf_float+0x1a6>
 8004298:	1c4b      	adds	r3, r1, #1
 800429a:	e7e7      	b.n	800426c <_printf_float+0x1a4>
 800429c:	2900      	cmp	r1, #0
 800429e:	bfd4      	ite	le
 80042a0:	f1c1 0202 	rsble	r2, r1, #2
 80042a4:	2201      	movgt	r2, #1
 80042a6:	4413      	add	r3, r2
 80042a8:	e7e0      	b.n	800426c <_printf_float+0x1a4>
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	055a      	lsls	r2, r3, #21
 80042ae:	d407      	bmi.n	80042c0 <_printf_float+0x1f8>
 80042b0:	6923      	ldr	r3, [r4, #16]
 80042b2:	4642      	mov	r2, r8
 80042b4:	4631      	mov	r1, r6
 80042b6:	4628      	mov	r0, r5
 80042b8:	47b8      	blx	r7
 80042ba:	3001      	adds	r0, #1
 80042bc:	d12c      	bne.n	8004318 <_printf_float+0x250>
 80042be:	e764      	b.n	800418a <_printf_float+0xc2>
 80042c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80042c4:	f240 80e0 	bls.w	8004488 <_printf_float+0x3c0>
 80042c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042cc:	2200      	movs	r2, #0
 80042ce:	2300      	movs	r3, #0
 80042d0:	f7fc fc1a 	bl	8000b08 <__aeabi_dcmpeq>
 80042d4:	2800      	cmp	r0, #0
 80042d6:	d034      	beq.n	8004342 <_printf_float+0x27a>
 80042d8:	4a37      	ldr	r2, [pc, #220]	; (80043b8 <_printf_float+0x2f0>)
 80042da:	2301      	movs	r3, #1
 80042dc:	4631      	mov	r1, r6
 80042de:	4628      	mov	r0, r5
 80042e0:	47b8      	blx	r7
 80042e2:	3001      	adds	r0, #1
 80042e4:	f43f af51 	beq.w	800418a <_printf_float+0xc2>
 80042e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042ec:	429a      	cmp	r2, r3
 80042ee:	db02      	blt.n	80042f6 <_printf_float+0x22e>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	07d8      	lsls	r0, r3, #31
 80042f4:	d510      	bpl.n	8004318 <_printf_float+0x250>
 80042f6:	ee18 3a10 	vmov	r3, s16
 80042fa:	4652      	mov	r2, sl
 80042fc:	4631      	mov	r1, r6
 80042fe:	4628      	mov	r0, r5
 8004300:	47b8      	blx	r7
 8004302:	3001      	adds	r0, #1
 8004304:	f43f af41 	beq.w	800418a <_printf_float+0xc2>
 8004308:	f04f 0800 	mov.w	r8, #0
 800430c:	f104 091a 	add.w	r9, r4, #26
 8004310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004312:	3b01      	subs	r3, #1
 8004314:	4543      	cmp	r3, r8
 8004316:	dc09      	bgt.n	800432c <_printf_float+0x264>
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	079b      	lsls	r3, r3, #30
 800431c:	f100 8105 	bmi.w	800452a <_printf_float+0x462>
 8004320:	68e0      	ldr	r0, [r4, #12]
 8004322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004324:	4298      	cmp	r0, r3
 8004326:	bfb8      	it	lt
 8004328:	4618      	movlt	r0, r3
 800432a:	e730      	b.n	800418e <_printf_float+0xc6>
 800432c:	2301      	movs	r3, #1
 800432e:	464a      	mov	r2, r9
 8004330:	4631      	mov	r1, r6
 8004332:	4628      	mov	r0, r5
 8004334:	47b8      	blx	r7
 8004336:	3001      	adds	r0, #1
 8004338:	f43f af27 	beq.w	800418a <_printf_float+0xc2>
 800433c:	f108 0801 	add.w	r8, r8, #1
 8004340:	e7e6      	b.n	8004310 <_printf_float+0x248>
 8004342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004344:	2b00      	cmp	r3, #0
 8004346:	dc39      	bgt.n	80043bc <_printf_float+0x2f4>
 8004348:	4a1b      	ldr	r2, [pc, #108]	; (80043b8 <_printf_float+0x2f0>)
 800434a:	2301      	movs	r3, #1
 800434c:	4631      	mov	r1, r6
 800434e:	4628      	mov	r0, r5
 8004350:	47b8      	blx	r7
 8004352:	3001      	adds	r0, #1
 8004354:	f43f af19 	beq.w	800418a <_printf_float+0xc2>
 8004358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800435c:	4313      	orrs	r3, r2
 800435e:	d102      	bne.n	8004366 <_printf_float+0x29e>
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	07d9      	lsls	r1, r3, #31
 8004364:	d5d8      	bpl.n	8004318 <_printf_float+0x250>
 8004366:	ee18 3a10 	vmov	r3, s16
 800436a:	4652      	mov	r2, sl
 800436c:	4631      	mov	r1, r6
 800436e:	4628      	mov	r0, r5
 8004370:	47b8      	blx	r7
 8004372:	3001      	adds	r0, #1
 8004374:	f43f af09 	beq.w	800418a <_printf_float+0xc2>
 8004378:	f04f 0900 	mov.w	r9, #0
 800437c:	f104 0a1a 	add.w	sl, r4, #26
 8004380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004382:	425b      	negs	r3, r3
 8004384:	454b      	cmp	r3, r9
 8004386:	dc01      	bgt.n	800438c <_printf_float+0x2c4>
 8004388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800438a:	e792      	b.n	80042b2 <_printf_float+0x1ea>
 800438c:	2301      	movs	r3, #1
 800438e:	4652      	mov	r2, sl
 8004390:	4631      	mov	r1, r6
 8004392:	4628      	mov	r0, r5
 8004394:	47b8      	blx	r7
 8004396:	3001      	adds	r0, #1
 8004398:	f43f aef7 	beq.w	800418a <_printf_float+0xc2>
 800439c:	f109 0901 	add.w	r9, r9, #1
 80043a0:	e7ee      	b.n	8004380 <_printf_float+0x2b8>
 80043a2:	bf00      	nop
 80043a4:	7fefffff 	.word	0x7fefffff
 80043a8:	08006b20 	.word	0x08006b20
 80043ac:	08006b24 	.word	0x08006b24
 80043b0:	08006b2c 	.word	0x08006b2c
 80043b4:	08006b28 	.word	0x08006b28
 80043b8:	08006b30 	.word	0x08006b30
 80043bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043c0:	429a      	cmp	r2, r3
 80043c2:	bfa8      	it	ge
 80043c4:	461a      	movge	r2, r3
 80043c6:	2a00      	cmp	r2, #0
 80043c8:	4691      	mov	r9, r2
 80043ca:	dc37      	bgt.n	800443c <_printf_float+0x374>
 80043cc:	f04f 0b00 	mov.w	fp, #0
 80043d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043d4:	f104 021a 	add.w	r2, r4, #26
 80043d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043da:	9305      	str	r3, [sp, #20]
 80043dc:	eba3 0309 	sub.w	r3, r3, r9
 80043e0:	455b      	cmp	r3, fp
 80043e2:	dc33      	bgt.n	800444c <_printf_float+0x384>
 80043e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043e8:	429a      	cmp	r2, r3
 80043ea:	db3b      	blt.n	8004464 <_printf_float+0x39c>
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	07da      	lsls	r2, r3, #31
 80043f0:	d438      	bmi.n	8004464 <_printf_float+0x39c>
 80043f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043f4:	9a05      	ldr	r2, [sp, #20]
 80043f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80043f8:	1a9a      	subs	r2, r3, r2
 80043fa:	eba3 0901 	sub.w	r9, r3, r1
 80043fe:	4591      	cmp	r9, r2
 8004400:	bfa8      	it	ge
 8004402:	4691      	movge	r9, r2
 8004404:	f1b9 0f00 	cmp.w	r9, #0
 8004408:	dc35      	bgt.n	8004476 <_printf_float+0x3ae>
 800440a:	f04f 0800 	mov.w	r8, #0
 800440e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004412:	f104 0a1a 	add.w	sl, r4, #26
 8004416:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	eba3 0309 	sub.w	r3, r3, r9
 8004420:	4543      	cmp	r3, r8
 8004422:	f77f af79 	ble.w	8004318 <_printf_float+0x250>
 8004426:	2301      	movs	r3, #1
 8004428:	4652      	mov	r2, sl
 800442a:	4631      	mov	r1, r6
 800442c:	4628      	mov	r0, r5
 800442e:	47b8      	blx	r7
 8004430:	3001      	adds	r0, #1
 8004432:	f43f aeaa 	beq.w	800418a <_printf_float+0xc2>
 8004436:	f108 0801 	add.w	r8, r8, #1
 800443a:	e7ec      	b.n	8004416 <_printf_float+0x34e>
 800443c:	4613      	mov	r3, r2
 800443e:	4631      	mov	r1, r6
 8004440:	4642      	mov	r2, r8
 8004442:	4628      	mov	r0, r5
 8004444:	47b8      	blx	r7
 8004446:	3001      	adds	r0, #1
 8004448:	d1c0      	bne.n	80043cc <_printf_float+0x304>
 800444a:	e69e      	b.n	800418a <_printf_float+0xc2>
 800444c:	2301      	movs	r3, #1
 800444e:	4631      	mov	r1, r6
 8004450:	4628      	mov	r0, r5
 8004452:	9205      	str	r2, [sp, #20]
 8004454:	47b8      	blx	r7
 8004456:	3001      	adds	r0, #1
 8004458:	f43f ae97 	beq.w	800418a <_printf_float+0xc2>
 800445c:	9a05      	ldr	r2, [sp, #20]
 800445e:	f10b 0b01 	add.w	fp, fp, #1
 8004462:	e7b9      	b.n	80043d8 <_printf_float+0x310>
 8004464:	ee18 3a10 	vmov	r3, s16
 8004468:	4652      	mov	r2, sl
 800446a:	4631      	mov	r1, r6
 800446c:	4628      	mov	r0, r5
 800446e:	47b8      	blx	r7
 8004470:	3001      	adds	r0, #1
 8004472:	d1be      	bne.n	80043f2 <_printf_float+0x32a>
 8004474:	e689      	b.n	800418a <_printf_float+0xc2>
 8004476:	9a05      	ldr	r2, [sp, #20]
 8004478:	464b      	mov	r3, r9
 800447a:	4442      	add	r2, r8
 800447c:	4631      	mov	r1, r6
 800447e:	4628      	mov	r0, r5
 8004480:	47b8      	blx	r7
 8004482:	3001      	adds	r0, #1
 8004484:	d1c1      	bne.n	800440a <_printf_float+0x342>
 8004486:	e680      	b.n	800418a <_printf_float+0xc2>
 8004488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800448a:	2a01      	cmp	r2, #1
 800448c:	dc01      	bgt.n	8004492 <_printf_float+0x3ca>
 800448e:	07db      	lsls	r3, r3, #31
 8004490:	d538      	bpl.n	8004504 <_printf_float+0x43c>
 8004492:	2301      	movs	r3, #1
 8004494:	4642      	mov	r2, r8
 8004496:	4631      	mov	r1, r6
 8004498:	4628      	mov	r0, r5
 800449a:	47b8      	blx	r7
 800449c:	3001      	adds	r0, #1
 800449e:	f43f ae74 	beq.w	800418a <_printf_float+0xc2>
 80044a2:	ee18 3a10 	vmov	r3, s16
 80044a6:	4652      	mov	r2, sl
 80044a8:	4631      	mov	r1, r6
 80044aa:	4628      	mov	r0, r5
 80044ac:	47b8      	blx	r7
 80044ae:	3001      	adds	r0, #1
 80044b0:	f43f ae6b 	beq.w	800418a <_printf_float+0xc2>
 80044b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80044b8:	2200      	movs	r2, #0
 80044ba:	2300      	movs	r3, #0
 80044bc:	f7fc fb24 	bl	8000b08 <__aeabi_dcmpeq>
 80044c0:	b9d8      	cbnz	r0, 80044fa <_printf_float+0x432>
 80044c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044c4:	f108 0201 	add.w	r2, r8, #1
 80044c8:	3b01      	subs	r3, #1
 80044ca:	4631      	mov	r1, r6
 80044cc:	4628      	mov	r0, r5
 80044ce:	47b8      	blx	r7
 80044d0:	3001      	adds	r0, #1
 80044d2:	d10e      	bne.n	80044f2 <_printf_float+0x42a>
 80044d4:	e659      	b.n	800418a <_printf_float+0xc2>
 80044d6:	2301      	movs	r3, #1
 80044d8:	4652      	mov	r2, sl
 80044da:	4631      	mov	r1, r6
 80044dc:	4628      	mov	r0, r5
 80044de:	47b8      	blx	r7
 80044e0:	3001      	adds	r0, #1
 80044e2:	f43f ae52 	beq.w	800418a <_printf_float+0xc2>
 80044e6:	f108 0801 	add.w	r8, r8, #1
 80044ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044ec:	3b01      	subs	r3, #1
 80044ee:	4543      	cmp	r3, r8
 80044f0:	dcf1      	bgt.n	80044d6 <_printf_float+0x40e>
 80044f2:	464b      	mov	r3, r9
 80044f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80044f8:	e6dc      	b.n	80042b4 <_printf_float+0x1ec>
 80044fa:	f04f 0800 	mov.w	r8, #0
 80044fe:	f104 0a1a 	add.w	sl, r4, #26
 8004502:	e7f2      	b.n	80044ea <_printf_float+0x422>
 8004504:	2301      	movs	r3, #1
 8004506:	4642      	mov	r2, r8
 8004508:	e7df      	b.n	80044ca <_printf_float+0x402>
 800450a:	2301      	movs	r3, #1
 800450c:	464a      	mov	r2, r9
 800450e:	4631      	mov	r1, r6
 8004510:	4628      	mov	r0, r5
 8004512:	47b8      	blx	r7
 8004514:	3001      	adds	r0, #1
 8004516:	f43f ae38 	beq.w	800418a <_printf_float+0xc2>
 800451a:	f108 0801 	add.w	r8, r8, #1
 800451e:	68e3      	ldr	r3, [r4, #12]
 8004520:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004522:	1a5b      	subs	r3, r3, r1
 8004524:	4543      	cmp	r3, r8
 8004526:	dcf0      	bgt.n	800450a <_printf_float+0x442>
 8004528:	e6fa      	b.n	8004320 <_printf_float+0x258>
 800452a:	f04f 0800 	mov.w	r8, #0
 800452e:	f104 0919 	add.w	r9, r4, #25
 8004532:	e7f4      	b.n	800451e <_printf_float+0x456>

08004534 <_printf_common>:
 8004534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004538:	4616      	mov	r6, r2
 800453a:	4699      	mov	r9, r3
 800453c:	688a      	ldr	r2, [r1, #8]
 800453e:	690b      	ldr	r3, [r1, #16]
 8004540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004544:	4293      	cmp	r3, r2
 8004546:	bfb8      	it	lt
 8004548:	4613      	movlt	r3, r2
 800454a:	6033      	str	r3, [r6, #0]
 800454c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004550:	4607      	mov	r7, r0
 8004552:	460c      	mov	r4, r1
 8004554:	b10a      	cbz	r2, 800455a <_printf_common+0x26>
 8004556:	3301      	adds	r3, #1
 8004558:	6033      	str	r3, [r6, #0]
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	0699      	lsls	r1, r3, #26
 800455e:	bf42      	ittt	mi
 8004560:	6833      	ldrmi	r3, [r6, #0]
 8004562:	3302      	addmi	r3, #2
 8004564:	6033      	strmi	r3, [r6, #0]
 8004566:	6825      	ldr	r5, [r4, #0]
 8004568:	f015 0506 	ands.w	r5, r5, #6
 800456c:	d106      	bne.n	800457c <_printf_common+0x48>
 800456e:	f104 0a19 	add.w	sl, r4, #25
 8004572:	68e3      	ldr	r3, [r4, #12]
 8004574:	6832      	ldr	r2, [r6, #0]
 8004576:	1a9b      	subs	r3, r3, r2
 8004578:	42ab      	cmp	r3, r5
 800457a:	dc26      	bgt.n	80045ca <_printf_common+0x96>
 800457c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004580:	1e13      	subs	r3, r2, #0
 8004582:	6822      	ldr	r2, [r4, #0]
 8004584:	bf18      	it	ne
 8004586:	2301      	movne	r3, #1
 8004588:	0692      	lsls	r2, r2, #26
 800458a:	d42b      	bmi.n	80045e4 <_printf_common+0xb0>
 800458c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004590:	4649      	mov	r1, r9
 8004592:	4638      	mov	r0, r7
 8004594:	47c0      	blx	r8
 8004596:	3001      	adds	r0, #1
 8004598:	d01e      	beq.n	80045d8 <_printf_common+0xa4>
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	68e5      	ldr	r5, [r4, #12]
 800459e:	6832      	ldr	r2, [r6, #0]
 80045a0:	f003 0306 	and.w	r3, r3, #6
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	bf08      	it	eq
 80045a8:	1aad      	subeq	r5, r5, r2
 80045aa:	68a3      	ldr	r3, [r4, #8]
 80045ac:	6922      	ldr	r2, [r4, #16]
 80045ae:	bf0c      	ite	eq
 80045b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045b4:	2500      	movne	r5, #0
 80045b6:	4293      	cmp	r3, r2
 80045b8:	bfc4      	itt	gt
 80045ba:	1a9b      	subgt	r3, r3, r2
 80045bc:	18ed      	addgt	r5, r5, r3
 80045be:	2600      	movs	r6, #0
 80045c0:	341a      	adds	r4, #26
 80045c2:	42b5      	cmp	r5, r6
 80045c4:	d11a      	bne.n	80045fc <_printf_common+0xc8>
 80045c6:	2000      	movs	r0, #0
 80045c8:	e008      	b.n	80045dc <_printf_common+0xa8>
 80045ca:	2301      	movs	r3, #1
 80045cc:	4652      	mov	r2, sl
 80045ce:	4649      	mov	r1, r9
 80045d0:	4638      	mov	r0, r7
 80045d2:	47c0      	blx	r8
 80045d4:	3001      	adds	r0, #1
 80045d6:	d103      	bne.n	80045e0 <_printf_common+0xac>
 80045d8:	f04f 30ff 	mov.w	r0, #4294967295
 80045dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e0:	3501      	adds	r5, #1
 80045e2:	e7c6      	b.n	8004572 <_printf_common+0x3e>
 80045e4:	18e1      	adds	r1, r4, r3
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	2030      	movs	r0, #48	; 0x30
 80045ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045ee:	4422      	add	r2, r4
 80045f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045f8:	3302      	adds	r3, #2
 80045fa:	e7c7      	b.n	800458c <_printf_common+0x58>
 80045fc:	2301      	movs	r3, #1
 80045fe:	4622      	mov	r2, r4
 8004600:	4649      	mov	r1, r9
 8004602:	4638      	mov	r0, r7
 8004604:	47c0      	blx	r8
 8004606:	3001      	adds	r0, #1
 8004608:	d0e6      	beq.n	80045d8 <_printf_common+0xa4>
 800460a:	3601      	adds	r6, #1
 800460c:	e7d9      	b.n	80045c2 <_printf_common+0x8e>
	...

08004610 <_printf_i>:
 8004610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004614:	7e0f      	ldrb	r7, [r1, #24]
 8004616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004618:	2f78      	cmp	r7, #120	; 0x78
 800461a:	4691      	mov	r9, r2
 800461c:	4680      	mov	r8, r0
 800461e:	460c      	mov	r4, r1
 8004620:	469a      	mov	sl, r3
 8004622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004626:	d807      	bhi.n	8004638 <_printf_i+0x28>
 8004628:	2f62      	cmp	r7, #98	; 0x62
 800462a:	d80a      	bhi.n	8004642 <_printf_i+0x32>
 800462c:	2f00      	cmp	r7, #0
 800462e:	f000 80d8 	beq.w	80047e2 <_printf_i+0x1d2>
 8004632:	2f58      	cmp	r7, #88	; 0x58
 8004634:	f000 80a3 	beq.w	800477e <_printf_i+0x16e>
 8004638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800463c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004640:	e03a      	b.n	80046b8 <_printf_i+0xa8>
 8004642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004646:	2b15      	cmp	r3, #21
 8004648:	d8f6      	bhi.n	8004638 <_printf_i+0x28>
 800464a:	a101      	add	r1, pc, #4	; (adr r1, 8004650 <_printf_i+0x40>)
 800464c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004650:	080046a9 	.word	0x080046a9
 8004654:	080046bd 	.word	0x080046bd
 8004658:	08004639 	.word	0x08004639
 800465c:	08004639 	.word	0x08004639
 8004660:	08004639 	.word	0x08004639
 8004664:	08004639 	.word	0x08004639
 8004668:	080046bd 	.word	0x080046bd
 800466c:	08004639 	.word	0x08004639
 8004670:	08004639 	.word	0x08004639
 8004674:	08004639 	.word	0x08004639
 8004678:	08004639 	.word	0x08004639
 800467c:	080047c9 	.word	0x080047c9
 8004680:	080046ed 	.word	0x080046ed
 8004684:	080047ab 	.word	0x080047ab
 8004688:	08004639 	.word	0x08004639
 800468c:	08004639 	.word	0x08004639
 8004690:	080047eb 	.word	0x080047eb
 8004694:	08004639 	.word	0x08004639
 8004698:	080046ed 	.word	0x080046ed
 800469c:	08004639 	.word	0x08004639
 80046a0:	08004639 	.word	0x08004639
 80046a4:	080047b3 	.word	0x080047b3
 80046a8:	682b      	ldr	r3, [r5, #0]
 80046aa:	1d1a      	adds	r2, r3, #4
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	602a      	str	r2, [r5, #0]
 80046b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046b8:	2301      	movs	r3, #1
 80046ba:	e0a3      	b.n	8004804 <_printf_i+0x1f4>
 80046bc:	6820      	ldr	r0, [r4, #0]
 80046be:	6829      	ldr	r1, [r5, #0]
 80046c0:	0606      	lsls	r6, r0, #24
 80046c2:	f101 0304 	add.w	r3, r1, #4
 80046c6:	d50a      	bpl.n	80046de <_printf_i+0xce>
 80046c8:	680e      	ldr	r6, [r1, #0]
 80046ca:	602b      	str	r3, [r5, #0]
 80046cc:	2e00      	cmp	r6, #0
 80046ce:	da03      	bge.n	80046d8 <_printf_i+0xc8>
 80046d0:	232d      	movs	r3, #45	; 0x2d
 80046d2:	4276      	negs	r6, r6
 80046d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046d8:	485e      	ldr	r0, [pc, #376]	; (8004854 <_printf_i+0x244>)
 80046da:	230a      	movs	r3, #10
 80046dc:	e019      	b.n	8004712 <_printf_i+0x102>
 80046de:	680e      	ldr	r6, [r1, #0]
 80046e0:	602b      	str	r3, [r5, #0]
 80046e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046e6:	bf18      	it	ne
 80046e8:	b236      	sxthne	r6, r6
 80046ea:	e7ef      	b.n	80046cc <_printf_i+0xbc>
 80046ec:	682b      	ldr	r3, [r5, #0]
 80046ee:	6820      	ldr	r0, [r4, #0]
 80046f0:	1d19      	adds	r1, r3, #4
 80046f2:	6029      	str	r1, [r5, #0]
 80046f4:	0601      	lsls	r1, r0, #24
 80046f6:	d501      	bpl.n	80046fc <_printf_i+0xec>
 80046f8:	681e      	ldr	r6, [r3, #0]
 80046fa:	e002      	b.n	8004702 <_printf_i+0xf2>
 80046fc:	0646      	lsls	r6, r0, #25
 80046fe:	d5fb      	bpl.n	80046f8 <_printf_i+0xe8>
 8004700:	881e      	ldrh	r6, [r3, #0]
 8004702:	4854      	ldr	r0, [pc, #336]	; (8004854 <_printf_i+0x244>)
 8004704:	2f6f      	cmp	r7, #111	; 0x6f
 8004706:	bf0c      	ite	eq
 8004708:	2308      	moveq	r3, #8
 800470a:	230a      	movne	r3, #10
 800470c:	2100      	movs	r1, #0
 800470e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004712:	6865      	ldr	r5, [r4, #4]
 8004714:	60a5      	str	r5, [r4, #8]
 8004716:	2d00      	cmp	r5, #0
 8004718:	bfa2      	ittt	ge
 800471a:	6821      	ldrge	r1, [r4, #0]
 800471c:	f021 0104 	bicge.w	r1, r1, #4
 8004720:	6021      	strge	r1, [r4, #0]
 8004722:	b90e      	cbnz	r6, 8004728 <_printf_i+0x118>
 8004724:	2d00      	cmp	r5, #0
 8004726:	d04d      	beq.n	80047c4 <_printf_i+0x1b4>
 8004728:	4615      	mov	r5, r2
 800472a:	fbb6 f1f3 	udiv	r1, r6, r3
 800472e:	fb03 6711 	mls	r7, r3, r1, r6
 8004732:	5dc7      	ldrb	r7, [r0, r7]
 8004734:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004738:	4637      	mov	r7, r6
 800473a:	42bb      	cmp	r3, r7
 800473c:	460e      	mov	r6, r1
 800473e:	d9f4      	bls.n	800472a <_printf_i+0x11a>
 8004740:	2b08      	cmp	r3, #8
 8004742:	d10b      	bne.n	800475c <_printf_i+0x14c>
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	07de      	lsls	r6, r3, #31
 8004748:	d508      	bpl.n	800475c <_printf_i+0x14c>
 800474a:	6923      	ldr	r3, [r4, #16]
 800474c:	6861      	ldr	r1, [r4, #4]
 800474e:	4299      	cmp	r1, r3
 8004750:	bfde      	ittt	le
 8004752:	2330      	movle	r3, #48	; 0x30
 8004754:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004758:	f105 35ff 	addle.w	r5, r5, #4294967295
 800475c:	1b52      	subs	r2, r2, r5
 800475e:	6122      	str	r2, [r4, #16]
 8004760:	f8cd a000 	str.w	sl, [sp]
 8004764:	464b      	mov	r3, r9
 8004766:	aa03      	add	r2, sp, #12
 8004768:	4621      	mov	r1, r4
 800476a:	4640      	mov	r0, r8
 800476c:	f7ff fee2 	bl	8004534 <_printf_common>
 8004770:	3001      	adds	r0, #1
 8004772:	d14c      	bne.n	800480e <_printf_i+0x1fe>
 8004774:	f04f 30ff 	mov.w	r0, #4294967295
 8004778:	b004      	add	sp, #16
 800477a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477e:	4835      	ldr	r0, [pc, #212]	; (8004854 <_printf_i+0x244>)
 8004780:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004784:	6829      	ldr	r1, [r5, #0]
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	f851 6b04 	ldr.w	r6, [r1], #4
 800478c:	6029      	str	r1, [r5, #0]
 800478e:	061d      	lsls	r5, r3, #24
 8004790:	d514      	bpl.n	80047bc <_printf_i+0x1ac>
 8004792:	07df      	lsls	r7, r3, #31
 8004794:	bf44      	itt	mi
 8004796:	f043 0320 	orrmi.w	r3, r3, #32
 800479a:	6023      	strmi	r3, [r4, #0]
 800479c:	b91e      	cbnz	r6, 80047a6 <_printf_i+0x196>
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	f023 0320 	bic.w	r3, r3, #32
 80047a4:	6023      	str	r3, [r4, #0]
 80047a6:	2310      	movs	r3, #16
 80047a8:	e7b0      	b.n	800470c <_printf_i+0xfc>
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	f043 0320 	orr.w	r3, r3, #32
 80047b0:	6023      	str	r3, [r4, #0]
 80047b2:	2378      	movs	r3, #120	; 0x78
 80047b4:	4828      	ldr	r0, [pc, #160]	; (8004858 <_printf_i+0x248>)
 80047b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047ba:	e7e3      	b.n	8004784 <_printf_i+0x174>
 80047bc:	0659      	lsls	r1, r3, #25
 80047be:	bf48      	it	mi
 80047c0:	b2b6      	uxthmi	r6, r6
 80047c2:	e7e6      	b.n	8004792 <_printf_i+0x182>
 80047c4:	4615      	mov	r5, r2
 80047c6:	e7bb      	b.n	8004740 <_printf_i+0x130>
 80047c8:	682b      	ldr	r3, [r5, #0]
 80047ca:	6826      	ldr	r6, [r4, #0]
 80047cc:	6961      	ldr	r1, [r4, #20]
 80047ce:	1d18      	adds	r0, r3, #4
 80047d0:	6028      	str	r0, [r5, #0]
 80047d2:	0635      	lsls	r5, r6, #24
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	d501      	bpl.n	80047dc <_printf_i+0x1cc>
 80047d8:	6019      	str	r1, [r3, #0]
 80047da:	e002      	b.n	80047e2 <_printf_i+0x1d2>
 80047dc:	0670      	lsls	r0, r6, #25
 80047de:	d5fb      	bpl.n	80047d8 <_printf_i+0x1c8>
 80047e0:	8019      	strh	r1, [r3, #0]
 80047e2:	2300      	movs	r3, #0
 80047e4:	6123      	str	r3, [r4, #16]
 80047e6:	4615      	mov	r5, r2
 80047e8:	e7ba      	b.n	8004760 <_printf_i+0x150>
 80047ea:	682b      	ldr	r3, [r5, #0]
 80047ec:	1d1a      	adds	r2, r3, #4
 80047ee:	602a      	str	r2, [r5, #0]
 80047f0:	681d      	ldr	r5, [r3, #0]
 80047f2:	6862      	ldr	r2, [r4, #4]
 80047f4:	2100      	movs	r1, #0
 80047f6:	4628      	mov	r0, r5
 80047f8:	f7fb fd12 	bl	8000220 <memchr>
 80047fc:	b108      	cbz	r0, 8004802 <_printf_i+0x1f2>
 80047fe:	1b40      	subs	r0, r0, r5
 8004800:	6060      	str	r0, [r4, #4]
 8004802:	6863      	ldr	r3, [r4, #4]
 8004804:	6123      	str	r3, [r4, #16]
 8004806:	2300      	movs	r3, #0
 8004808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800480c:	e7a8      	b.n	8004760 <_printf_i+0x150>
 800480e:	6923      	ldr	r3, [r4, #16]
 8004810:	462a      	mov	r2, r5
 8004812:	4649      	mov	r1, r9
 8004814:	4640      	mov	r0, r8
 8004816:	47d0      	blx	sl
 8004818:	3001      	adds	r0, #1
 800481a:	d0ab      	beq.n	8004774 <_printf_i+0x164>
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	079b      	lsls	r3, r3, #30
 8004820:	d413      	bmi.n	800484a <_printf_i+0x23a>
 8004822:	68e0      	ldr	r0, [r4, #12]
 8004824:	9b03      	ldr	r3, [sp, #12]
 8004826:	4298      	cmp	r0, r3
 8004828:	bfb8      	it	lt
 800482a:	4618      	movlt	r0, r3
 800482c:	e7a4      	b.n	8004778 <_printf_i+0x168>
 800482e:	2301      	movs	r3, #1
 8004830:	4632      	mov	r2, r6
 8004832:	4649      	mov	r1, r9
 8004834:	4640      	mov	r0, r8
 8004836:	47d0      	blx	sl
 8004838:	3001      	adds	r0, #1
 800483a:	d09b      	beq.n	8004774 <_printf_i+0x164>
 800483c:	3501      	adds	r5, #1
 800483e:	68e3      	ldr	r3, [r4, #12]
 8004840:	9903      	ldr	r1, [sp, #12]
 8004842:	1a5b      	subs	r3, r3, r1
 8004844:	42ab      	cmp	r3, r5
 8004846:	dcf2      	bgt.n	800482e <_printf_i+0x21e>
 8004848:	e7eb      	b.n	8004822 <_printf_i+0x212>
 800484a:	2500      	movs	r5, #0
 800484c:	f104 0619 	add.w	r6, r4, #25
 8004850:	e7f5      	b.n	800483e <_printf_i+0x22e>
 8004852:	bf00      	nop
 8004854:	08006b32 	.word	0x08006b32
 8004858:	08006b43 	.word	0x08006b43

0800485c <iprintf>:
 800485c:	b40f      	push	{r0, r1, r2, r3}
 800485e:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <iprintf+0x2c>)
 8004860:	b513      	push	{r0, r1, r4, lr}
 8004862:	681c      	ldr	r4, [r3, #0]
 8004864:	b124      	cbz	r4, 8004870 <iprintf+0x14>
 8004866:	69a3      	ldr	r3, [r4, #24]
 8004868:	b913      	cbnz	r3, 8004870 <iprintf+0x14>
 800486a:	4620      	mov	r0, r4
 800486c:	f001 f8d8 	bl	8005a20 <__sinit>
 8004870:	ab05      	add	r3, sp, #20
 8004872:	9a04      	ldr	r2, [sp, #16]
 8004874:	68a1      	ldr	r1, [r4, #8]
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	4620      	mov	r0, r4
 800487a:	f001 fe95 	bl	80065a8 <_vfiprintf_r>
 800487e:	b002      	add	sp, #8
 8004880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004884:	b004      	add	sp, #16
 8004886:	4770      	bx	lr
 8004888:	2000000c 	.word	0x2000000c

0800488c <_puts_r>:
 800488c:	b570      	push	{r4, r5, r6, lr}
 800488e:	460e      	mov	r6, r1
 8004890:	4605      	mov	r5, r0
 8004892:	b118      	cbz	r0, 800489c <_puts_r+0x10>
 8004894:	6983      	ldr	r3, [r0, #24]
 8004896:	b90b      	cbnz	r3, 800489c <_puts_r+0x10>
 8004898:	f001 f8c2 	bl	8005a20 <__sinit>
 800489c:	69ab      	ldr	r3, [r5, #24]
 800489e:	68ac      	ldr	r4, [r5, #8]
 80048a0:	b913      	cbnz	r3, 80048a8 <_puts_r+0x1c>
 80048a2:	4628      	mov	r0, r5
 80048a4:	f001 f8bc 	bl	8005a20 <__sinit>
 80048a8:	4b2c      	ldr	r3, [pc, #176]	; (800495c <_puts_r+0xd0>)
 80048aa:	429c      	cmp	r4, r3
 80048ac:	d120      	bne.n	80048f0 <_puts_r+0x64>
 80048ae:	686c      	ldr	r4, [r5, #4]
 80048b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048b2:	07db      	lsls	r3, r3, #31
 80048b4:	d405      	bmi.n	80048c2 <_puts_r+0x36>
 80048b6:	89a3      	ldrh	r3, [r4, #12]
 80048b8:	0598      	lsls	r0, r3, #22
 80048ba:	d402      	bmi.n	80048c2 <_puts_r+0x36>
 80048bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048be:	f001 f952 	bl	8005b66 <__retarget_lock_acquire_recursive>
 80048c2:	89a3      	ldrh	r3, [r4, #12]
 80048c4:	0719      	lsls	r1, r3, #28
 80048c6:	d51d      	bpl.n	8004904 <_puts_r+0x78>
 80048c8:	6923      	ldr	r3, [r4, #16]
 80048ca:	b1db      	cbz	r3, 8004904 <_puts_r+0x78>
 80048cc:	3e01      	subs	r6, #1
 80048ce:	68a3      	ldr	r3, [r4, #8]
 80048d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048d4:	3b01      	subs	r3, #1
 80048d6:	60a3      	str	r3, [r4, #8]
 80048d8:	bb39      	cbnz	r1, 800492a <_puts_r+0x9e>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	da38      	bge.n	8004950 <_puts_r+0xc4>
 80048de:	4622      	mov	r2, r4
 80048e0:	210a      	movs	r1, #10
 80048e2:	4628      	mov	r0, r5
 80048e4:	f000 f848 	bl	8004978 <__swbuf_r>
 80048e8:	3001      	adds	r0, #1
 80048ea:	d011      	beq.n	8004910 <_puts_r+0x84>
 80048ec:	250a      	movs	r5, #10
 80048ee:	e011      	b.n	8004914 <_puts_r+0x88>
 80048f0:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <_puts_r+0xd4>)
 80048f2:	429c      	cmp	r4, r3
 80048f4:	d101      	bne.n	80048fa <_puts_r+0x6e>
 80048f6:	68ac      	ldr	r4, [r5, #8]
 80048f8:	e7da      	b.n	80048b0 <_puts_r+0x24>
 80048fa:	4b1a      	ldr	r3, [pc, #104]	; (8004964 <_puts_r+0xd8>)
 80048fc:	429c      	cmp	r4, r3
 80048fe:	bf08      	it	eq
 8004900:	68ec      	ldreq	r4, [r5, #12]
 8004902:	e7d5      	b.n	80048b0 <_puts_r+0x24>
 8004904:	4621      	mov	r1, r4
 8004906:	4628      	mov	r0, r5
 8004908:	f000 f888 	bl	8004a1c <__swsetup_r>
 800490c:	2800      	cmp	r0, #0
 800490e:	d0dd      	beq.n	80048cc <_puts_r+0x40>
 8004910:	f04f 35ff 	mov.w	r5, #4294967295
 8004914:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004916:	07da      	lsls	r2, r3, #31
 8004918:	d405      	bmi.n	8004926 <_puts_r+0x9a>
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	059b      	lsls	r3, r3, #22
 800491e:	d402      	bmi.n	8004926 <_puts_r+0x9a>
 8004920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004922:	f001 f921 	bl	8005b68 <__retarget_lock_release_recursive>
 8004926:	4628      	mov	r0, r5
 8004928:	bd70      	pop	{r4, r5, r6, pc}
 800492a:	2b00      	cmp	r3, #0
 800492c:	da04      	bge.n	8004938 <_puts_r+0xac>
 800492e:	69a2      	ldr	r2, [r4, #24]
 8004930:	429a      	cmp	r2, r3
 8004932:	dc06      	bgt.n	8004942 <_puts_r+0xb6>
 8004934:	290a      	cmp	r1, #10
 8004936:	d004      	beq.n	8004942 <_puts_r+0xb6>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	6022      	str	r2, [r4, #0]
 800493e:	7019      	strb	r1, [r3, #0]
 8004940:	e7c5      	b.n	80048ce <_puts_r+0x42>
 8004942:	4622      	mov	r2, r4
 8004944:	4628      	mov	r0, r5
 8004946:	f000 f817 	bl	8004978 <__swbuf_r>
 800494a:	3001      	adds	r0, #1
 800494c:	d1bf      	bne.n	80048ce <_puts_r+0x42>
 800494e:	e7df      	b.n	8004910 <_puts_r+0x84>
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	250a      	movs	r5, #10
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	6022      	str	r2, [r4, #0]
 8004958:	701d      	strb	r5, [r3, #0]
 800495a:	e7db      	b.n	8004914 <_puts_r+0x88>
 800495c:	08006c04 	.word	0x08006c04
 8004960:	08006c24 	.word	0x08006c24
 8004964:	08006be4 	.word	0x08006be4

08004968 <puts>:
 8004968:	4b02      	ldr	r3, [pc, #8]	; (8004974 <puts+0xc>)
 800496a:	4601      	mov	r1, r0
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	f7ff bf8d 	b.w	800488c <_puts_r>
 8004972:	bf00      	nop
 8004974:	2000000c 	.word	0x2000000c

08004978 <__swbuf_r>:
 8004978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497a:	460e      	mov	r6, r1
 800497c:	4614      	mov	r4, r2
 800497e:	4605      	mov	r5, r0
 8004980:	b118      	cbz	r0, 800498a <__swbuf_r+0x12>
 8004982:	6983      	ldr	r3, [r0, #24]
 8004984:	b90b      	cbnz	r3, 800498a <__swbuf_r+0x12>
 8004986:	f001 f84b 	bl	8005a20 <__sinit>
 800498a:	4b21      	ldr	r3, [pc, #132]	; (8004a10 <__swbuf_r+0x98>)
 800498c:	429c      	cmp	r4, r3
 800498e:	d12b      	bne.n	80049e8 <__swbuf_r+0x70>
 8004990:	686c      	ldr	r4, [r5, #4]
 8004992:	69a3      	ldr	r3, [r4, #24]
 8004994:	60a3      	str	r3, [r4, #8]
 8004996:	89a3      	ldrh	r3, [r4, #12]
 8004998:	071a      	lsls	r2, r3, #28
 800499a:	d52f      	bpl.n	80049fc <__swbuf_r+0x84>
 800499c:	6923      	ldr	r3, [r4, #16]
 800499e:	b36b      	cbz	r3, 80049fc <__swbuf_r+0x84>
 80049a0:	6923      	ldr	r3, [r4, #16]
 80049a2:	6820      	ldr	r0, [r4, #0]
 80049a4:	1ac0      	subs	r0, r0, r3
 80049a6:	6963      	ldr	r3, [r4, #20]
 80049a8:	b2f6      	uxtb	r6, r6
 80049aa:	4283      	cmp	r3, r0
 80049ac:	4637      	mov	r7, r6
 80049ae:	dc04      	bgt.n	80049ba <__swbuf_r+0x42>
 80049b0:	4621      	mov	r1, r4
 80049b2:	4628      	mov	r0, r5
 80049b4:	f000 ffa0 	bl	80058f8 <_fflush_r>
 80049b8:	bb30      	cbnz	r0, 8004a08 <__swbuf_r+0x90>
 80049ba:	68a3      	ldr	r3, [r4, #8]
 80049bc:	3b01      	subs	r3, #1
 80049be:	60a3      	str	r3, [r4, #8]
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	1c5a      	adds	r2, r3, #1
 80049c4:	6022      	str	r2, [r4, #0]
 80049c6:	701e      	strb	r6, [r3, #0]
 80049c8:	6963      	ldr	r3, [r4, #20]
 80049ca:	3001      	adds	r0, #1
 80049cc:	4283      	cmp	r3, r0
 80049ce:	d004      	beq.n	80049da <__swbuf_r+0x62>
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	07db      	lsls	r3, r3, #31
 80049d4:	d506      	bpl.n	80049e4 <__swbuf_r+0x6c>
 80049d6:	2e0a      	cmp	r6, #10
 80049d8:	d104      	bne.n	80049e4 <__swbuf_r+0x6c>
 80049da:	4621      	mov	r1, r4
 80049dc:	4628      	mov	r0, r5
 80049de:	f000 ff8b 	bl	80058f8 <_fflush_r>
 80049e2:	b988      	cbnz	r0, 8004a08 <__swbuf_r+0x90>
 80049e4:	4638      	mov	r0, r7
 80049e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <__swbuf_r+0x9c>)
 80049ea:	429c      	cmp	r4, r3
 80049ec:	d101      	bne.n	80049f2 <__swbuf_r+0x7a>
 80049ee:	68ac      	ldr	r4, [r5, #8]
 80049f0:	e7cf      	b.n	8004992 <__swbuf_r+0x1a>
 80049f2:	4b09      	ldr	r3, [pc, #36]	; (8004a18 <__swbuf_r+0xa0>)
 80049f4:	429c      	cmp	r4, r3
 80049f6:	bf08      	it	eq
 80049f8:	68ec      	ldreq	r4, [r5, #12]
 80049fa:	e7ca      	b.n	8004992 <__swbuf_r+0x1a>
 80049fc:	4621      	mov	r1, r4
 80049fe:	4628      	mov	r0, r5
 8004a00:	f000 f80c 	bl	8004a1c <__swsetup_r>
 8004a04:	2800      	cmp	r0, #0
 8004a06:	d0cb      	beq.n	80049a0 <__swbuf_r+0x28>
 8004a08:	f04f 37ff 	mov.w	r7, #4294967295
 8004a0c:	e7ea      	b.n	80049e4 <__swbuf_r+0x6c>
 8004a0e:	bf00      	nop
 8004a10:	08006c04 	.word	0x08006c04
 8004a14:	08006c24 	.word	0x08006c24
 8004a18:	08006be4 	.word	0x08006be4

08004a1c <__swsetup_r>:
 8004a1c:	4b32      	ldr	r3, [pc, #200]	; (8004ae8 <__swsetup_r+0xcc>)
 8004a1e:	b570      	push	{r4, r5, r6, lr}
 8004a20:	681d      	ldr	r5, [r3, #0]
 8004a22:	4606      	mov	r6, r0
 8004a24:	460c      	mov	r4, r1
 8004a26:	b125      	cbz	r5, 8004a32 <__swsetup_r+0x16>
 8004a28:	69ab      	ldr	r3, [r5, #24]
 8004a2a:	b913      	cbnz	r3, 8004a32 <__swsetup_r+0x16>
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f000 fff7 	bl	8005a20 <__sinit>
 8004a32:	4b2e      	ldr	r3, [pc, #184]	; (8004aec <__swsetup_r+0xd0>)
 8004a34:	429c      	cmp	r4, r3
 8004a36:	d10f      	bne.n	8004a58 <__swsetup_r+0x3c>
 8004a38:	686c      	ldr	r4, [r5, #4]
 8004a3a:	89a3      	ldrh	r3, [r4, #12]
 8004a3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a40:	0719      	lsls	r1, r3, #28
 8004a42:	d42c      	bmi.n	8004a9e <__swsetup_r+0x82>
 8004a44:	06dd      	lsls	r5, r3, #27
 8004a46:	d411      	bmi.n	8004a6c <__swsetup_r+0x50>
 8004a48:	2309      	movs	r3, #9
 8004a4a:	6033      	str	r3, [r6, #0]
 8004a4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a50:	81a3      	strh	r3, [r4, #12]
 8004a52:	f04f 30ff 	mov.w	r0, #4294967295
 8004a56:	e03e      	b.n	8004ad6 <__swsetup_r+0xba>
 8004a58:	4b25      	ldr	r3, [pc, #148]	; (8004af0 <__swsetup_r+0xd4>)
 8004a5a:	429c      	cmp	r4, r3
 8004a5c:	d101      	bne.n	8004a62 <__swsetup_r+0x46>
 8004a5e:	68ac      	ldr	r4, [r5, #8]
 8004a60:	e7eb      	b.n	8004a3a <__swsetup_r+0x1e>
 8004a62:	4b24      	ldr	r3, [pc, #144]	; (8004af4 <__swsetup_r+0xd8>)
 8004a64:	429c      	cmp	r4, r3
 8004a66:	bf08      	it	eq
 8004a68:	68ec      	ldreq	r4, [r5, #12]
 8004a6a:	e7e6      	b.n	8004a3a <__swsetup_r+0x1e>
 8004a6c:	0758      	lsls	r0, r3, #29
 8004a6e:	d512      	bpl.n	8004a96 <__swsetup_r+0x7a>
 8004a70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a72:	b141      	cbz	r1, 8004a86 <__swsetup_r+0x6a>
 8004a74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a78:	4299      	cmp	r1, r3
 8004a7a:	d002      	beq.n	8004a82 <__swsetup_r+0x66>
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	f001 fc89 	bl	8006394 <_free_r>
 8004a82:	2300      	movs	r3, #0
 8004a84:	6363      	str	r3, [r4, #52]	; 0x34
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a8c:	81a3      	strh	r3, [r4, #12]
 8004a8e:	2300      	movs	r3, #0
 8004a90:	6063      	str	r3, [r4, #4]
 8004a92:	6923      	ldr	r3, [r4, #16]
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	f043 0308 	orr.w	r3, r3, #8
 8004a9c:	81a3      	strh	r3, [r4, #12]
 8004a9e:	6923      	ldr	r3, [r4, #16]
 8004aa0:	b94b      	cbnz	r3, 8004ab6 <__swsetup_r+0x9a>
 8004aa2:	89a3      	ldrh	r3, [r4, #12]
 8004aa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aac:	d003      	beq.n	8004ab6 <__swsetup_r+0x9a>
 8004aae:	4621      	mov	r1, r4
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	f001 f87f 	bl	8005bb4 <__smakebuf_r>
 8004ab6:	89a0      	ldrh	r0, [r4, #12]
 8004ab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004abc:	f010 0301 	ands.w	r3, r0, #1
 8004ac0:	d00a      	beq.n	8004ad8 <__swsetup_r+0xbc>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60a3      	str	r3, [r4, #8]
 8004ac6:	6963      	ldr	r3, [r4, #20]
 8004ac8:	425b      	negs	r3, r3
 8004aca:	61a3      	str	r3, [r4, #24]
 8004acc:	6923      	ldr	r3, [r4, #16]
 8004ace:	b943      	cbnz	r3, 8004ae2 <__swsetup_r+0xc6>
 8004ad0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ad4:	d1ba      	bne.n	8004a4c <__swsetup_r+0x30>
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}
 8004ad8:	0781      	lsls	r1, r0, #30
 8004ada:	bf58      	it	pl
 8004adc:	6963      	ldrpl	r3, [r4, #20]
 8004ade:	60a3      	str	r3, [r4, #8]
 8004ae0:	e7f4      	b.n	8004acc <__swsetup_r+0xb0>
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	e7f7      	b.n	8004ad6 <__swsetup_r+0xba>
 8004ae6:	bf00      	nop
 8004ae8:	2000000c 	.word	0x2000000c
 8004aec:	08006c04 	.word	0x08006c04
 8004af0:	08006c24 	.word	0x08006c24
 8004af4:	08006be4 	.word	0x08006be4

08004af8 <quorem>:
 8004af8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afc:	6903      	ldr	r3, [r0, #16]
 8004afe:	690c      	ldr	r4, [r1, #16]
 8004b00:	42a3      	cmp	r3, r4
 8004b02:	4607      	mov	r7, r0
 8004b04:	f2c0 8081 	blt.w	8004c0a <quorem+0x112>
 8004b08:	3c01      	subs	r4, #1
 8004b0a:	f101 0814 	add.w	r8, r1, #20
 8004b0e:	f100 0514 	add.w	r5, r0, #20
 8004b12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b16:	9301      	str	r3, [sp, #4]
 8004b18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b20:	3301      	adds	r3, #1
 8004b22:	429a      	cmp	r2, r3
 8004b24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b30:	d331      	bcc.n	8004b96 <quorem+0x9e>
 8004b32:	f04f 0e00 	mov.w	lr, #0
 8004b36:	4640      	mov	r0, r8
 8004b38:	46ac      	mov	ip, r5
 8004b3a:	46f2      	mov	sl, lr
 8004b3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b40:	b293      	uxth	r3, r2
 8004b42:	fb06 e303 	mla	r3, r6, r3, lr
 8004b46:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	ebaa 0303 	sub.w	r3, sl, r3
 8004b50:	f8dc a000 	ldr.w	sl, [ip]
 8004b54:	0c12      	lsrs	r2, r2, #16
 8004b56:	fa13 f38a 	uxtah	r3, r3, sl
 8004b5a:	fb06 e202 	mla	r2, r6, r2, lr
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	9b00      	ldr	r3, [sp, #0]
 8004b62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004b66:	b292      	uxth	r2, r2
 8004b68:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004b6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b70:	f8bd 3000 	ldrh.w	r3, [sp]
 8004b74:	4581      	cmp	r9, r0
 8004b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b7a:	f84c 3b04 	str.w	r3, [ip], #4
 8004b7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004b82:	d2db      	bcs.n	8004b3c <quorem+0x44>
 8004b84:	f855 300b 	ldr.w	r3, [r5, fp]
 8004b88:	b92b      	cbnz	r3, 8004b96 <quorem+0x9e>
 8004b8a:	9b01      	ldr	r3, [sp, #4]
 8004b8c:	3b04      	subs	r3, #4
 8004b8e:	429d      	cmp	r5, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	d32e      	bcc.n	8004bf2 <quorem+0xfa>
 8004b94:	613c      	str	r4, [r7, #16]
 8004b96:	4638      	mov	r0, r7
 8004b98:	f001 fae4 	bl	8006164 <__mcmp>
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	db24      	blt.n	8004bea <quorem+0xf2>
 8004ba0:	3601      	adds	r6, #1
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	f04f 0c00 	mov.w	ip, #0
 8004ba8:	f858 2b04 	ldr.w	r2, [r8], #4
 8004bac:	f8d0 e000 	ldr.w	lr, [r0]
 8004bb0:	b293      	uxth	r3, r2
 8004bb2:	ebac 0303 	sub.w	r3, ip, r3
 8004bb6:	0c12      	lsrs	r2, r2, #16
 8004bb8:	fa13 f38e 	uxtah	r3, r3, lr
 8004bbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004bc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bca:	45c1      	cmp	r9, r8
 8004bcc:	f840 3b04 	str.w	r3, [r0], #4
 8004bd0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004bd4:	d2e8      	bcs.n	8004ba8 <quorem+0xb0>
 8004bd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bde:	b922      	cbnz	r2, 8004bea <quorem+0xf2>
 8004be0:	3b04      	subs	r3, #4
 8004be2:	429d      	cmp	r5, r3
 8004be4:	461a      	mov	r2, r3
 8004be6:	d30a      	bcc.n	8004bfe <quorem+0x106>
 8004be8:	613c      	str	r4, [r7, #16]
 8004bea:	4630      	mov	r0, r6
 8004bec:	b003      	add	sp, #12
 8004bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf2:	6812      	ldr	r2, [r2, #0]
 8004bf4:	3b04      	subs	r3, #4
 8004bf6:	2a00      	cmp	r2, #0
 8004bf8:	d1cc      	bne.n	8004b94 <quorem+0x9c>
 8004bfa:	3c01      	subs	r4, #1
 8004bfc:	e7c7      	b.n	8004b8e <quorem+0x96>
 8004bfe:	6812      	ldr	r2, [r2, #0]
 8004c00:	3b04      	subs	r3, #4
 8004c02:	2a00      	cmp	r2, #0
 8004c04:	d1f0      	bne.n	8004be8 <quorem+0xf0>
 8004c06:	3c01      	subs	r4, #1
 8004c08:	e7eb      	b.n	8004be2 <quorem+0xea>
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	e7ee      	b.n	8004bec <quorem+0xf4>
	...

08004c10 <_dtoa_r>:
 8004c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c14:	ed2d 8b04 	vpush	{d8-d9}
 8004c18:	ec57 6b10 	vmov	r6, r7, d0
 8004c1c:	b093      	sub	sp, #76	; 0x4c
 8004c1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004c24:	9106      	str	r1, [sp, #24]
 8004c26:	ee10 aa10 	vmov	sl, s0
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	9209      	str	r2, [sp, #36]	; 0x24
 8004c2e:	930c      	str	r3, [sp, #48]	; 0x30
 8004c30:	46bb      	mov	fp, r7
 8004c32:	b975      	cbnz	r5, 8004c52 <_dtoa_r+0x42>
 8004c34:	2010      	movs	r0, #16
 8004c36:	f000 fffd 	bl	8005c34 <malloc>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	6260      	str	r0, [r4, #36]	; 0x24
 8004c3e:	b920      	cbnz	r0, 8004c4a <_dtoa_r+0x3a>
 8004c40:	4ba7      	ldr	r3, [pc, #668]	; (8004ee0 <_dtoa_r+0x2d0>)
 8004c42:	21ea      	movs	r1, #234	; 0xea
 8004c44:	48a7      	ldr	r0, [pc, #668]	; (8004ee4 <_dtoa_r+0x2d4>)
 8004c46:	f001 fe45 	bl	80068d4 <__assert_func>
 8004c4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c4e:	6005      	str	r5, [r0, #0]
 8004c50:	60c5      	str	r5, [r0, #12]
 8004c52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c54:	6819      	ldr	r1, [r3, #0]
 8004c56:	b151      	cbz	r1, 8004c6e <_dtoa_r+0x5e>
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	604a      	str	r2, [r1, #4]
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	4093      	lsls	r3, r2
 8004c60:	608b      	str	r3, [r1, #8]
 8004c62:	4620      	mov	r0, r4
 8004c64:	f001 f83c 	bl	8005ce0 <_Bfree>
 8004c68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	1e3b      	subs	r3, r7, #0
 8004c70:	bfaa      	itet	ge
 8004c72:	2300      	movge	r3, #0
 8004c74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004c78:	f8c8 3000 	strge.w	r3, [r8]
 8004c7c:	4b9a      	ldr	r3, [pc, #616]	; (8004ee8 <_dtoa_r+0x2d8>)
 8004c7e:	bfbc      	itt	lt
 8004c80:	2201      	movlt	r2, #1
 8004c82:	f8c8 2000 	strlt.w	r2, [r8]
 8004c86:	ea33 030b 	bics.w	r3, r3, fp
 8004c8a:	d11b      	bne.n	8004cc4 <_dtoa_r+0xb4>
 8004c8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c8e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004c98:	4333      	orrs	r3, r6
 8004c9a:	f000 8592 	beq.w	80057c2 <_dtoa_r+0xbb2>
 8004c9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ca0:	b963      	cbnz	r3, 8004cbc <_dtoa_r+0xac>
 8004ca2:	4b92      	ldr	r3, [pc, #584]	; (8004eec <_dtoa_r+0x2dc>)
 8004ca4:	e022      	b.n	8004cec <_dtoa_r+0xdc>
 8004ca6:	4b92      	ldr	r3, [pc, #584]	; (8004ef0 <_dtoa_r+0x2e0>)
 8004ca8:	9301      	str	r3, [sp, #4]
 8004caa:	3308      	adds	r3, #8
 8004cac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	9801      	ldr	r0, [sp, #4]
 8004cb2:	b013      	add	sp, #76	; 0x4c
 8004cb4:	ecbd 8b04 	vpop	{d8-d9}
 8004cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cbc:	4b8b      	ldr	r3, [pc, #556]	; (8004eec <_dtoa_r+0x2dc>)
 8004cbe:	9301      	str	r3, [sp, #4]
 8004cc0:	3303      	adds	r3, #3
 8004cc2:	e7f3      	b.n	8004cac <_dtoa_r+0x9c>
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	4650      	mov	r0, sl
 8004cca:	4659      	mov	r1, fp
 8004ccc:	f7fb ff1c 	bl	8000b08 <__aeabi_dcmpeq>
 8004cd0:	ec4b ab19 	vmov	d9, sl, fp
 8004cd4:	4680      	mov	r8, r0
 8004cd6:	b158      	cbz	r0, 8004cf0 <_dtoa_r+0xe0>
 8004cd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cda:	2301      	movs	r3, #1
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 856b 	beq.w	80057bc <_dtoa_r+0xbac>
 8004ce6:	4883      	ldr	r0, [pc, #524]	; (8004ef4 <_dtoa_r+0x2e4>)
 8004ce8:	6018      	str	r0, [r3, #0]
 8004cea:	1e43      	subs	r3, r0, #1
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	e7df      	b.n	8004cb0 <_dtoa_r+0xa0>
 8004cf0:	ec4b ab10 	vmov	d0, sl, fp
 8004cf4:	aa10      	add	r2, sp, #64	; 0x40
 8004cf6:	a911      	add	r1, sp, #68	; 0x44
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f001 fad9 	bl	80062b0 <__d2b>
 8004cfe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004d02:	ee08 0a10 	vmov	s16, r0
 8004d06:	2d00      	cmp	r5, #0
 8004d08:	f000 8084 	beq.w	8004e14 <_dtoa_r+0x204>
 8004d0c:	ee19 3a90 	vmov	r3, s19
 8004d10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004d18:	4656      	mov	r6, sl
 8004d1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004d1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004d26:	4b74      	ldr	r3, [pc, #464]	; (8004ef8 <_dtoa_r+0x2e8>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	4639      	mov	r1, r7
 8004d2e:	f7fb facb 	bl	80002c8 <__aeabi_dsub>
 8004d32:	a365      	add	r3, pc, #404	; (adr r3, 8004ec8 <_dtoa_r+0x2b8>)
 8004d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d38:	f7fb fc7e 	bl	8000638 <__aeabi_dmul>
 8004d3c:	a364      	add	r3, pc, #400	; (adr r3, 8004ed0 <_dtoa_r+0x2c0>)
 8004d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d42:	f7fb fac3 	bl	80002cc <__adddf3>
 8004d46:	4606      	mov	r6, r0
 8004d48:	4628      	mov	r0, r5
 8004d4a:	460f      	mov	r7, r1
 8004d4c:	f7fb fc0a 	bl	8000564 <__aeabi_i2d>
 8004d50:	a361      	add	r3, pc, #388	; (adr r3, 8004ed8 <_dtoa_r+0x2c8>)
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	f7fb fc6f 	bl	8000638 <__aeabi_dmul>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4630      	mov	r0, r6
 8004d60:	4639      	mov	r1, r7
 8004d62:	f7fb fab3 	bl	80002cc <__adddf3>
 8004d66:	4606      	mov	r6, r0
 8004d68:	460f      	mov	r7, r1
 8004d6a:	f7fb ff15 	bl	8000b98 <__aeabi_d2iz>
 8004d6e:	2200      	movs	r2, #0
 8004d70:	9000      	str	r0, [sp, #0]
 8004d72:	2300      	movs	r3, #0
 8004d74:	4630      	mov	r0, r6
 8004d76:	4639      	mov	r1, r7
 8004d78:	f7fb fed0 	bl	8000b1c <__aeabi_dcmplt>
 8004d7c:	b150      	cbz	r0, 8004d94 <_dtoa_r+0x184>
 8004d7e:	9800      	ldr	r0, [sp, #0]
 8004d80:	f7fb fbf0 	bl	8000564 <__aeabi_i2d>
 8004d84:	4632      	mov	r2, r6
 8004d86:	463b      	mov	r3, r7
 8004d88:	f7fb febe 	bl	8000b08 <__aeabi_dcmpeq>
 8004d8c:	b910      	cbnz	r0, 8004d94 <_dtoa_r+0x184>
 8004d8e:	9b00      	ldr	r3, [sp, #0]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	9b00      	ldr	r3, [sp, #0]
 8004d96:	2b16      	cmp	r3, #22
 8004d98:	d85a      	bhi.n	8004e50 <_dtoa_r+0x240>
 8004d9a:	9a00      	ldr	r2, [sp, #0]
 8004d9c:	4b57      	ldr	r3, [pc, #348]	; (8004efc <_dtoa_r+0x2ec>)
 8004d9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	ec51 0b19 	vmov	r0, r1, d9
 8004daa:	f7fb feb7 	bl	8000b1c <__aeabi_dcmplt>
 8004dae:	2800      	cmp	r0, #0
 8004db0:	d050      	beq.n	8004e54 <_dtoa_r+0x244>
 8004db2:	9b00      	ldr	r3, [sp, #0]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	2300      	movs	r3, #0
 8004dba:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004dbe:	1b5d      	subs	r5, r3, r5
 8004dc0:	1e6b      	subs	r3, r5, #1
 8004dc2:	9305      	str	r3, [sp, #20]
 8004dc4:	bf45      	ittet	mi
 8004dc6:	f1c5 0301 	rsbmi	r3, r5, #1
 8004dca:	9304      	strmi	r3, [sp, #16]
 8004dcc:	2300      	movpl	r3, #0
 8004dce:	2300      	movmi	r3, #0
 8004dd0:	bf4c      	ite	mi
 8004dd2:	9305      	strmi	r3, [sp, #20]
 8004dd4:	9304      	strpl	r3, [sp, #16]
 8004dd6:	9b00      	ldr	r3, [sp, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	db3d      	blt.n	8004e58 <_dtoa_r+0x248>
 8004ddc:	9b05      	ldr	r3, [sp, #20]
 8004dde:	9a00      	ldr	r2, [sp, #0]
 8004de0:	920a      	str	r2, [sp, #40]	; 0x28
 8004de2:	4413      	add	r3, r2
 8004de4:	9305      	str	r3, [sp, #20]
 8004de6:	2300      	movs	r3, #0
 8004de8:	9307      	str	r3, [sp, #28]
 8004dea:	9b06      	ldr	r3, [sp, #24]
 8004dec:	2b09      	cmp	r3, #9
 8004dee:	f200 8089 	bhi.w	8004f04 <_dtoa_r+0x2f4>
 8004df2:	2b05      	cmp	r3, #5
 8004df4:	bfc4      	itt	gt
 8004df6:	3b04      	subgt	r3, #4
 8004df8:	9306      	strgt	r3, [sp, #24]
 8004dfa:	9b06      	ldr	r3, [sp, #24]
 8004dfc:	f1a3 0302 	sub.w	r3, r3, #2
 8004e00:	bfcc      	ite	gt
 8004e02:	2500      	movgt	r5, #0
 8004e04:	2501      	movle	r5, #1
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	f200 8087 	bhi.w	8004f1a <_dtoa_r+0x30a>
 8004e0c:	e8df f003 	tbb	[pc, r3]
 8004e10:	59383a2d 	.word	0x59383a2d
 8004e14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004e18:	441d      	add	r5, r3
 8004e1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	bfc1      	itttt	gt
 8004e22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004e2a:	fa0b f303 	lslgt.w	r3, fp, r3
 8004e2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e32:	bfda      	itte	le
 8004e34:	f1c3 0320 	rsble	r3, r3, #32
 8004e38:	fa06 f003 	lslle.w	r0, r6, r3
 8004e3c:	4318      	orrgt	r0, r3
 8004e3e:	f7fb fb81 	bl	8000544 <__aeabi_ui2d>
 8004e42:	2301      	movs	r3, #1
 8004e44:	4606      	mov	r6, r0
 8004e46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004e4a:	3d01      	subs	r5, #1
 8004e4c:	930e      	str	r3, [sp, #56]	; 0x38
 8004e4e:	e76a      	b.n	8004d26 <_dtoa_r+0x116>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e7b2      	b.n	8004dba <_dtoa_r+0x1aa>
 8004e54:	900b      	str	r0, [sp, #44]	; 0x2c
 8004e56:	e7b1      	b.n	8004dbc <_dtoa_r+0x1ac>
 8004e58:	9b04      	ldr	r3, [sp, #16]
 8004e5a:	9a00      	ldr	r2, [sp, #0]
 8004e5c:	1a9b      	subs	r3, r3, r2
 8004e5e:	9304      	str	r3, [sp, #16]
 8004e60:	4253      	negs	r3, r2
 8004e62:	9307      	str	r3, [sp, #28]
 8004e64:	2300      	movs	r3, #0
 8004e66:	930a      	str	r3, [sp, #40]	; 0x28
 8004e68:	e7bf      	b.n	8004dea <_dtoa_r+0x1da>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	9308      	str	r3, [sp, #32]
 8004e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	dc55      	bgt.n	8004f20 <_dtoa_r+0x310>
 8004e74:	2301      	movs	r3, #1
 8004e76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e7e:	e00c      	b.n	8004e9a <_dtoa_r+0x28a>
 8004e80:	2301      	movs	r3, #1
 8004e82:	e7f3      	b.n	8004e6c <_dtoa_r+0x25c>
 8004e84:	2300      	movs	r3, #0
 8004e86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e88:	9308      	str	r3, [sp, #32]
 8004e8a:	9b00      	ldr	r3, [sp, #0]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	9302      	str	r3, [sp, #8]
 8004e90:	3301      	adds	r3, #1
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	9303      	str	r3, [sp, #12]
 8004e96:	bfb8      	it	lt
 8004e98:	2301      	movlt	r3, #1
 8004e9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	6042      	str	r2, [r0, #4]
 8004ea0:	2204      	movs	r2, #4
 8004ea2:	f102 0614 	add.w	r6, r2, #20
 8004ea6:	429e      	cmp	r6, r3
 8004ea8:	6841      	ldr	r1, [r0, #4]
 8004eaa:	d93d      	bls.n	8004f28 <_dtoa_r+0x318>
 8004eac:	4620      	mov	r0, r4
 8004eae:	f000 fed7 	bl	8005c60 <_Balloc>
 8004eb2:	9001      	str	r0, [sp, #4]
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d13b      	bne.n	8004f30 <_dtoa_r+0x320>
 8004eb8:	4b11      	ldr	r3, [pc, #68]	; (8004f00 <_dtoa_r+0x2f0>)
 8004eba:	4602      	mov	r2, r0
 8004ebc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004ec0:	e6c0      	b.n	8004c44 <_dtoa_r+0x34>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e7df      	b.n	8004e86 <_dtoa_r+0x276>
 8004ec6:	bf00      	nop
 8004ec8:	636f4361 	.word	0x636f4361
 8004ecc:	3fd287a7 	.word	0x3fd287a7
 8004ed0:	8b60c8b3 	.word	0x8b60c8b3
 8004ed4:	3fc68a28 	.word	0x3fc68a28
 8004ed8:	509f79fb 	.word	0x509f79fb
 8004edc:	3fd34413 	.word	0x3fd34413
 8004ee0:	08006b61 	.word	0x08006b61
 8004ee4:	08006b78 	.word	0x08006b78
 8004ee8:	7ff00000 	.word	0x7ff00000
 8004eec:	08006b5d 	.word	0x08006b5d
 8004ef0:	08006b54 	.word	0x08006b54
 8004ef4:	08006b31 	.word	0x08006b31
 8004ef8:	3ff80000 	.word	0x3ff80000
 8004efc:	08006cc8 	.word	0x08006cc8
 8004f00:	08006bd3 	.word	0x08006bd3
 8004f04:	2501      	movs	r5, #1
 8004f06:	2300      	movs	r3, #0
 8004f08:	9306      	str	r3, [sp, #24]
 8004f0a:	9508      	str	r5, [sp, #32]
 8004f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004f14:	2200      	movs	r2, #0
 8004f16:	2312      	movs	r3, #18
 8004f18:	e7b0      	b.n	8004e7c <_dtoa_r+0x26c>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	9308      	str	r3, [sp, #32]
 8004f1e:	e7f5      	b.n	8004f0c <_dtoa_r+0x2fc>
 8004f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004f26:	e7b8      	b.n	8004e9a <_dtoa_r+0x28a>
 8004f28:	3101      	adds	r1, #1
 8004f2a:	6041      	str	r1, [r0, #4]
 8004f2c:	0052      	lsls	r2, r2, #1
 8004f2e:	e7b8      	b.n	8004ea2 <_dtoa_r+0x292>
 8004f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f32:	9a01      	ldr	r2, [sp, #4]
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	9b03      	ldr	r3, [sp, #12]
 8004f38:	2b0e      	cmp	r3, #14
 8004f3a:	f200 809d 	bhi.w	8005078 <_dtoa_r+0x468>
 8004f3e:	2d00      	cmp	r5, #0
 8004f40:	f000 809a 	beq.w	8005078 <_dtoa_r+0x468>
 8004f44:	9b00      	ldr	r3, [sp, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	dd32      	ble.n	8004fb0 <_dtoa_r+0x3a0>
 8004f4a:	4ab7      	ldr	r2, [pc, #732]	; (8005228 <_dtoa_r+0x618>)
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f58:	9b00      	ldr	r3, [sp, #0]
 8004f5a:	05d8      	lsls	r0, r3, #23
 8004f5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004f60:	d516      	bpl.n	8004f90 <_dtoa_r+0x380>
 8004f62:	4bb2      	ldr	r3, [pc, #712]	; (800522c <_dtoa_r+0x61c>)
 8004f64:	ec51 0b19 	vmov	r0, r1, d9
 8004f68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f6c:	f7fb fc8e 	bl	800088c <__aeabi_ddiv>
 8004f70:	f007 070f 	and.w	r7, r7, #15
 8004f74:	4682      	mov	sl, r0
 8004f76:	468b      	mov	fp, r1
 8004f78:	2503      	movs	r5, #3
 8004f7a:	4eac      	ldr	r6, [pc, #688]	; (800522c <_dtoa_r+0x61c>)
 8004f7c:	b957      	cbnz	r7, 8004f94 <_dtoa_r+0x384>
 8004f7e:	4642      	mov	r2, r8
 8004f80:	464b      	mov	r3, r9
 8004f82:	4650      	mov	r0, sl
 8004f84:	4659      	mov	r1, fp
 8004f86:	f7fb fc81 	bl	800088c <__aeabi_ddiv>
 8004f8a:	4682      	mov	sl, r0
 8004f8c:	468b      	mov	fp, r1
 8004f8e:	e028      	b.n	8004fe2 <_dtoa_r+0x3d2>
 8004f90:	2502      	movs	r5, #2
 8004f92:	e7f2      	b.n	8004f7a <_dtoa_r+0x36a>
 8004f94:	07f9      	lsls	r1, r7, #31
 8004f96:	d508      	bpl.n	8004faa <_dtoa_r+0x39a>
 8004f98:	4640      	mov	r0, r8
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004fa0:	f7fb fb4a 	bl	8000638 <__aeabi_dmul>
 8004fa4:	3501      	adds	r5, #1
 8004fa6:	4680      	mov	r8, r0
 8004fa8:	4689      	mov	r9, r1
 8004faa:	107f      	asrs	r7, r7, #1
 8004fac:	3608      	adds	r6, #8
 8004fae:	e7e5      	b.n	8004f7c <_dtoa_r+0x36c>
 8004fb0:	f000 809b 	beq.w	80050ea <_dtoa_r+0x4da>
 8004fb4:	9b00      	ldr	r3, [sp, #0]
 8004fb6:	4f9d      	ldr	r7, [pc, #628]	; (800522c <_dtoa_r+0x61c>)
 8004fb8:	425e      	negs	r6, r3
 8004fba:	4b9b      	ldr	r3, [pc, #620]	; (8005228 <_dtoa_r+0x618>)
 8004fbc:	f006 020f 	and.w	r2, r6, #15
 8004fc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc8:	ec51 0b19 	vmov	r0, r1, d9
 8004fcc:	f7fb fb34 	bl	8000638 <__aeabi_dmul>
 8004fd0:	1136      	asrs	r6, r6, #4
 8004fd2:	4682      	mov	sl, r0
 8004fd4:	468b      	mov	fp, r1
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	2502      	movs	r5, #2
 8004fda:	2e00      	cmp	r6, #0
 8004fdc:	d17a      	bne.n	80050d4 <_dtoa_r+0x4c4>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1d3      	bne.n	8004f8a <_dtoa_r+0x37a>
 8004fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8082 	beq.w	80050ee <_dtoa_r+0x4de>
 8004fea:	4b91      	ldr	r3, [pc, #580]	; (8005230 <_dtoa_r+0x620>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	4650      	mov	r0, sl
 8004ff0:	4659      	mov	r1, fp
 8004ff2:	f7fb fd93 	bl	8000b1c <__aeabi_dcmplt>
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	d079      	beq.n	80050ee <_dtoa_r+0x4de>
 8004ffa:	9b03      	ldr	r3, [sp, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d076      	beq.n	80050ee <_dtoa_r+0x4de>
 8005000:	9b02      	ldr	r3, [sp, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	dd36      	ble.n	8005074 <_dtoa_r+0x464>
 8005006:	9b00      	ldr	r3, [sp, #0]
 8005008:	4650      	mov	r0, sl
 800500a:	4659      	mov	r1, fp
 800500c:	1e5f      	subs	r7, r3, #1
 800500e:	2200      	movs	r2, #0
 8005010:	4b88      	ldr	r3, [pc, #544]	; (8005234 <_dtoa_r+0x624>)
 8005012:	f7fb fb11 	bl	8000638 <__aeabi_dmul>
 8005016:	9e02      	ldr	r6, [sp, #8]
 8005018:	4682      	mov	sl, r0
 800501a:	468b      	mov	fp, r1
 800501c:	3501      	adds	r5, #1
 800501e:	4628      	mov	r0, r5
 8005020:	f7fb faa0 	bl	8000564 <__aeabi_i2d>
 8005024:	4652      	mov	r2, sl
 8005026:	465b      	mov	r3, fp
 8005028:	f7fb fb06 	bl	8000638 <__aeabi_dmul>
 800502c:	4b82      	ldr	r3, [pc, #520]	; (8005238 <_dtoa_r+0x628>)
 800502e:	2200      	movs	r2, #0
 8005030:	f7fb f94c 	bl	80002cc <__adddf3>
 8005034:	46d0      	mov	r8, sl
 8005036:	46d9      	mov	r9, fp
 8005038:	4682      	mov	sl, r0
 800503a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800503e:	2e00      	cmp	r6, #0
 8005040:	d158      	bne.n	80050f4 <_dtoa_r+0x4e4>
 8005042:	4b7e      	ldr	r3, [pc, #504]	; (800523c <_dtoa_r+0x62c>)
 8005044:	2200      	movs	r2, #0
 8005046:	4640      	mov	r0, r8
 8005048:	4649      	mov	r1, r9
 800504a:	f7fb f93d 	bl	80002c8 <__aeabi_dsub>
 800504e:	4652      	mov	r2, sl
 8005050:	465b      	mov	r3, fp
 8005052:	4680      	mov	r8, r0
 8005054:	4689      	mov	r9, r1
 8005056:	f7fb fd7f 	bl	8000b58 <__aeabi_dcmpgt>
 800505a:	2800      	cmp	r0, #0
 800505c:	f040 8295 	bne.w	800558a <_dtoa_r+0x97a>
 8005060:	4652      	mov	r2, sl
 8005062:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005066:	4640      	mov	r0, r8
 8005068:	4649      	mov	r1, r9
 800506a:	f7fb fd57 	bl	8000b1c <__aeabi_dcmplt>
 800506e:	2800      	cmp	r0, #0
 8005070:	f040 8289 	bne.w	8005586 <_dtoa_r+0x976>
 8005074:	ec5b ab19 	vmov	sl, fp, d9
 8005078:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800507a:	2b00      	cmp	r3, #0
 800507c:	f2c0 8148 	blt.w	8005310 <_dtoa_r+0x700>
 8005080:	9a00      	ldr	r2, [sp, #0]
 8005082:	2a0e      	cmp	r2, #14
 8005084:	f300 8144 	bgt.w	8005310 <_dtoa_r+0x700>
 8005088:	4b67      	ldr	r3, [pc, #412]	; (8005228 <_dtoa_r+0x618>)
 800508a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800508e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005094:	2b00      	cmp	r3, #0
 8005096:	f280 80d5 	bge.w	8005244 <_dtoa_r+0x634>
 800509a:	9b03      	ldr	r3, [sp, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	f300 80d1 	bgt.w	8005244 <_dtoa_r+0x634>
 80050a2:	f040 826f 	bne.w	8005584 <_dtoa_r+0x974>
 80050a6:	4b65      	ldr	r3, [pc, #404]	; (800523c <_dtoa_r+0x62c>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	4640      	mov	r0, r8
 80050ac:	4649      	mov	r1, r9
 80050ae:	f7fb fac3 	bl	8000638 <__aeabi_dmul>
 80050b2:	4652      	mov	r2, sl
 80050b4:	465b      	mov	r3, fp
 80050b6:	f7fb fd45 	bl	8000b44 <__aeabi_dcmpge>
 80050ba:	9e03      	ldr	r6, [sp, #12]
 80050bc:	4637      	mov	r7, r6
 80050be:	2800      	cmp	r0, #0
 80050c0:	f040 8245 	bne.w	800554e <_dtoa_r+0x93e>
 80050c4:	9d01      	ldr	r5, [sp, #4]
 80050c6:	2331      	movs	r3, #49	; 0x31
 80050c8:	f805 3b01 	strb.w	r3, [r5], #1
 80050cc:	9b00      	ldr	r3, [sp, #0]
 80050ce:	3301      	adds	r3, #1
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	e240      	b.n	8005556 <_dtoa_r+0x946>
 80050d4:	07f2      	lsls	r2, r6, #31
 80050d6:	d505      	bpl.n	80050e4 <_dtoa_r+0x4d4>
 80050d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050dc:	f7fb faac 	bl	8000638 <__aeabi_dmul>
 80050e0:	3501      	adds	r5, #1
 80050e2:	2301      	movs	r3, #1
 80050e4:	1076      	asrs	r6, r6, #1
 80050e6:	3708      	adds	r7, #8
 80050e8:	e777      	b.n	8004fda <_dtoa_r+0x3ca>
 80050ea:	2502      	movs	r5, #2
 80050ec:	e779      	b.n	8004fe2 <_dtoa_r+0x3d2>
 80050ee:	9f00      	ldr	r7, [sp, #0]
 80050f0:	9e03      	ldr	r6, [sp, #12]
 80050f2:	e794      	b.n	800501e <_dtoa_r+0x40e>
 80050f4:	9901      	ldr	r1, [sp, #4]
 80050f6:	4b4c      	ldr	r3, [pc, #304]	; (8005228 <_dtoa_r+0x618>)
 80050f8:	4431      	add	r1, r6
 80050fa:	910d      	str	r1, [sp, #52]	; 0x34
 80050fc:	9908      	ldr	r1, [sp, #32]
 80050fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005102:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005106:	2900      	cmp	r1, #0
 8005108:	d043      	beq.n	8005192 <_dtoa_r+0x582>
 800510a:	494d      	ldr	r1, [pc, #308]	; (8005240 <_dtoa_r+0x630>)
 800510c:	2000      	movs	r0, #0
 800510e:	f7fb fbbd 	bl	800088c <__aeabi_ddiv>
 8005112:	4652      	mov	r2, sl
 8005114:	465b      	mov	r3, fp
 8005116:	f7fb f8d7 	bl	80002c8 <__aeabi_dsub>
 800511a:	9d01      	ldr	r5, [sp, #4]
 800511c:	4682      	mov	sl, r0
 800511e:	468b      	mov	fp, r1
 8005120:	4649      	mov	r1, r9
 8005122:	4640      	mov	r0, r8
 8005124:	f7fb fd38 	bl	8000b98 <__aeabi_d2iz>
 8005128:	4606      	mov	r6, r0
 800512a:	f7fb fa1b 	bl	8000564 <__aeabi_i2d>
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	4640      	mov	r0, r8
 8005134:	4649      	mov	r1, r9
 8005136:	f7fb f8c7 	bl	80002c8 <__aeabi_dsub>
 800513a:	3630      	adds	r6, #48	; 0x30
 800513c:	f805 6b01 	strb.w	r6, [r5], #1
 8005140:	4652      	mov	r2, sl
 8005142:	465b      	mov	r3, fp
 8005144:	4680      	mov	r8, r0
 8005146:	4689      	mov	r9, r1
 8005148:	f7fb fce8 	bl	8000b1c <__aeabi_dcmplt>
 800514c:	2800      	cmp	r0, #0
 800514e:	d163      	bne.n	8005218 <_dtoa_r+0x608>
 8005150:	4642      	mov	r2, r8
 8005152:	464b      	mov	r3, r9
 8005154:	4936      	ldr	r1, [pc, #216]	; (8005230 <_dtoa_r+0x620>)
 8005156:	2000      	movs	r0, #0
 8005158:	f7fb f8b6 	bl	80002c8 <__aeabi_dsub>
 800515c:	4652      	mov	r2, sl
 800515e:	465b      	mov	r3, fp
 8005160:	f7fb fcdc 	bl	8000b1c <__aeabi_dcmplt>
 8005164:	2800      	cmp	r0, #0
 8005166:	f040 80b5 	bne.w	80052d4 <_dtoa_r+0x6c4>
 800516a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800516c:	429d      	cmp	r5, r3
 800516e:	d081      	beq.n	8005074 <_dtoa_r+0x464>
 8005170:	4b30      	ldr	r3, [pc, #192]	; (8005234 <_dtoa_r+0x624>)
 8005172:	2200      	movs	r2, #0
 8005174:	4650      	mov	r0, sl
 8005176:	4659      	mov	r1, fp
 8005178:	f7fb fa5e 	bl	8000638 <__aeabi_dmul>
 800517c:	4b2d      	ldr	r3, [pc, #180]	; (8005234 <_dtoa_r+0x624>)
 800517e:	4682      	mov	sl, r0
 8005180:	468b      	mov	fp, r1
 8005182:	4640      	mov	r0, r8
 8005184:	4649      	mov	r1, r9
 8005186:	2200      	movs	r2, #0
 8005188:	f7fb fa56 	bl	8000638 <__aeabi_dmul>
 800518c:	4680      	mov	r8, r0
 800518e:	4689      	mov	r9, r1
 8005190:	e7c6      	b.n	8005120 <_dtoa_r+0x510>
 8005192:	4650      	mov	r0, sl
 8005194:	4659      	mov	r1, fp
 8005196:	f7fb fa4f 	bl	8000638 <__aeabi_dmul>
 800519a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800519c:	9d01      	ldr	r5, [sp, #4]
 800519e:	930f      	str	r3, [sp, #60]	; 0x3c
 80051a0:	4682      	mov	sl, r0
 80051a2:	468b      	mov	fp, r1
 80051a4:	4649      	mov	r1, r9
 80051a6:	4640      	mov	r0, r8
 80051a8:	f7fb fcf6 	bl	8000b98 <__aeabi_d2iz>
 80051ac:	4606      	mov	r6, r0
 80051ae:	f7fb f9d9 	bl	8000564 <__aeabi_i2d>
 80051b2:	3630      	adds	r6, #48	; 0x30
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4640      	mov	r0, r8
 80051ba:	4649      	mov	r1, r9
 80051bc:	f7fb f884 	bl	80002c8 <__aeabi_dsub>
 80051c0:	f805 6b01 	strb.w	r6, [r5], #1
 80051c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051c6:	429d      	cmp	r5, r3
 80051c8:	4680      	mov	r8, r0
 80051ca:	4689      	mov	r9, r1
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	d124      	bne.n	800521c <_dtoa_r+0x60c>
 80051d2:	4b1b      	ldr	r3, [pc, #108]	; (8005240 <_dtoa_r+0x630>)
 80051d4:	4650      	mov	r0, sl
 80051d6:	4659      	mov	r1, fp
 80051d8:	f7fb f878 	bl	80002cc <__adddf3>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4640      	mov	r0, r8
 80051e2:	4649      	mov	r1, r9
 80051e4:	f7fb fcb8 	bl	8000b58 <__aeabi_dcmpgt>
 80051e8:	2800      	cmp	r0, #0
 80051ea:	d173      	bne.n	80052d4 <_dtoa_r+0x6c4>
 80051ec:	4652      	mov	r2, sl
 80051ee:	465b      	mov	r3, fp
 80051f0:	4913      	ldr	r1, [pc, #76]	; (8005240 <_dtoa_r+0x630>)
 80051f2:	2000      	movs	r0, #0
 80051f4:	f7fb f868 	bl	80002c8 <__aeabi_dsub>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4640      	mov	r0, r8
 80051fe:	4649      	mov	r1, r9
 8005200:	f7fb fc8c 	bl	8000b1c <__aeabi_dcmplt>
 8005204:	2800      	cmp	r0, #0
 8005206:	f43f af35 	beq.w	8005074 <_dtoa_r+0x464>
 800520a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800520c:	1e6b      	subs	r3, r5, #1
 800520e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005210:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005214:	2b30      	cmp	r3, #48	; 0x30
 8005216:	d0f8      	beq.n	800520a <_dtoa_r+0x5fa>
 8005218:	9700      	str	r7, [sp, #0]
 800521a:	e049      	b.n	80052b0 <_dtoa_r+0x6a0>
 800521c:	4b05      	ldr	r3, [pc, #20]	; (8005234 <_dtoa_r+0x624>)
 800521e:	f7fb fa0b 	bl	8000638 <__aeabi_dmul>
 8005222:	4680      	mov	r8, r0
 8005224:	4689      	mov	r9, r1
 8005226:	e7bd      	b.n	80051a4 <_dtoa_r+0x594>
 8005228:	08006cc8 	.word	0x08006cc8
 800522c:	08006ca0 	.word	0x08006ca0
 8005230:	3ff00000 	.word	0x3ff00000
 8005234:	40240000 	.word	0x40240000
 8005238:	401c0000 	.word	0x401c0000
 800523c:	40140000 	.word	0x40140000
 8005240:	3fe00000 	.word	0x3fe00000
 8005244:	9d01      	ldr	r5, [sp, #4]
 8005246:	4656      	mov	r6, sl
 8005248:	465f      	mov	r7, fp
 800524a:	4642      	mov	r2, r8
 800524c:	464b      	mov	r3, r9
 800524e:	4630      	mov	r0, r6
 8005250:	4639      	mov	r1, r7
 8005252:	f7fb fb1b 	bl	800088c <__aeabi_ddiv>
 8005256:	f7fb fc9f 	bl	8000b98 <__aeabi_d2iz>
 800525a:	4682      	mov	sl, r0
 800525c:	f7fb f982 	bl	8000564 <__aeabi_i2d>
 8005260:	4642      	mov	r2, r8
 8005262:	464b      	mov	r3, r9
 8005264:	f7fb f9e8 	bl	8000638 <__aeabi_dmul>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4630      	mov	r0, r6
 800526e:	4639      	mov	r1, r7
 8005270:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005274:	f7fb f828 	bl	80002c8 <__aeabi_dsub>
 8005278:	f805 6b01 	strb.w	r6, [r5], #1
 800527c:	9e01      	ldr	r6, [sp, #4]
 800527e:	9f03      	ldr	r7, [sp, #12]
 8005280:	1bae      	subs	r6, r5, r6
 8005282:	42b7      	cmp	r7, r6
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	d135      	bne.n	80052f6 <_dtoa_r+0x6e6>
 800528a:	f7fb f81f 	bl	80002cc <__adddf3>
 800528e:	4642      	mov	r2, r8
 8005290:	464b      	mov	r3, r9
 8005292:	4606      	mov	r6, r0
 8005294:	460f      	mov	r7, r1
 8005296:	f7fb fc5f 	bl	8000b58 <__aeabi_dcmpgt>
 800529a:	b9d0      	cbnz	r0, 80052d2 <_dtoa_r+0x6c2>
 800529c:	4642      	mov	r2, r8
 800529e:	464b      	mov	r3, r9
 80052a0:	4630      	mov	r0, r6
 80052a2:	4639      	mov	r1, r7
 80052a4:	f7fb fc30 	bl	8000b08 <__aeabi_dcmpeq>
 80052a8:	b110      	cbz	r0, 80052b0 <_dtoa_r+0x6a0>
 80052aa:	f01a 0f01 	tst.w	sl, #1
 80052ae:	d110      	bne.n	80052d2 <_dtoa_r+0x6c2>
 80052b0:	4620      	mov	r0, r4
 80052b2:	ee18 1a10 	vmov	r1, s16
 80052b6:	f000 fd13 	bl	8005ce0 <_Bfree>
 80052ba:	2300      	movs	r3, #0
 80052bc:	9800      	ldr	r0, [sp, #0]
 80052be:	702b      	strb	r3, [r5, #0]
 80052c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052c2:	3001      	adds	r0, #1
 80052c4:	6018      	str	r0, [r3, #0]
 80052c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f43f acf1 	beq.w	8004cb0 <_dtoa_r+0xa0>
 80052ce:	601d      	str	r5, [r3, #0]
 80052d0:	e4ee      	b.n	8004cb0 <_dtoa_r+0xa0>
 80052d2:	9f00      	ldr	r7, [sp, #0]
 80052d4:	462b      	mov	r3, r5
 80052d6:	461d      	mov	r5, r3
 80052d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052dc:	2a39      	cmp	r2, #57	; 0x39
 80052de:	d106      	bne.n	80052ee <_dtoa_r+0x6de>
 80052e0:	9a01      	ldr	r2, [sp, #4]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d1f7      	bne.n	80052d6 <_dtoa_r+0x6c6>
 80052e6:	9901      	ldr	r1, [sp, #4]
 80052e8:	2230      	movs	r2, #48	; 0x30
 80052ea:	3701      	adds	r7, #1
 80052ec:	700a      	strb	r2, [r1, #0]
 80052ee:	781a      	ldrb	r2, [r3, #0]
 80052f0:	3201      	adds	r2, #1
 80052f2:	701a      	strb	r2, [r3, #0]
 80052f4:	e790      	b.n	8005218 <_dtoa_r+0x608>
 80052f6:	4ba6      	ldr	r3, [pc, #664]	; (8005590 <_dtoa_r+0x980>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	f7fb f99d 	bl	8000638 <__aeabi_dmul>
 80052fe:	2200      	movs	r2, #0
 8005300:	2300      	movs	r3, #0
 8005302:	4606      	mov	r6, r0
 8005304:	460f      	mov	r7, r1
 8005306:	f7fb fbff 	bl	8000b08 <__aeabi_dcmpeq>
 800530a:	2800      	cmp	r0, #0
 800530c:	d09d      	beq.n	800524a <_dtoa_r+0x63a>
 800530e:	e7cf      	b.n	80052b0 <_dtoa_r+0x6a0>
 8005310:	9a08      	ldr	r2, [sp, #32]
 8005312:	2a00      	cmp	r2, #0
 8005314:	f000 80d7 	beq.w	80054c6 <_dtoa_r+0x8b6>
 8005318:	9a06      	ldr	r2, [sp, #24]
 800531a:	2a01      	cmp	r2, #1
 800531c:	f300 80ba 	bgt.w	8005494 <_dtoa_r+0x884>
 8005320:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005322:	2a00      	cmp	r2, #0
 8005324:	f000 80b2 	beq.w	800548c <_dtoa_r+0x87c>
 8005328:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800532c:	9e07      	ldr	r6, [sp, #28]
 800532e:	9d04      	ldr	r5, [sp, #16]
 8005330:	9a04      	ldr	r2, [sp, #16]
 8005332:	441a      	add	r2, r3
 8005334:	9204      	str	r2, [sp, #16]
 8005336:	9a05      	ldr	r2, [sp, #20]
 8005338:	2101      	movs	r1, #1
 800533a:	441a      	add	r2, r3
 800533c:	4620      	mov	r0, r4
 800533e:	9205      	str	r2, [sp, #20]
 8005340:	f000 fd86 	bl	8005e50 <__i2b>
 8005344:	4607      	mov	r7, r0
 8005346:	2d00      	cmp	r5, #0
 8005348:	dd0c      	ble.n	8005364 <_dtoa_r+0x754>
 800534a:	9b05      	ldr	r3, [sp, #20]
 800534c:	2b00      	cmp	r3, #0
 800534e:	dd09      	ble.n	8005364 <_dtoa_r+0x754>
 8005350:	42ab      	cmp	r3, r5
 8005352:	9a04      	ldr	r2, [sp, #16]
 8005354:	bfa8      	it	ge
 8005356:	462b      	movge	r3, r5
 8005358:	1ad2      	subs	r2, r2, r3
 800535a:	9204      	str	r2, [sp, #16]
 800535c:	9a05      	ldr	r2, [sp, #20]
 800535e:	1aed      	subs	r5, r5, r3
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	9305      	str	r3, [sp, #20]
 8005364:	9b07      	ldr	r3, [sp, #28]
 8005366:	b31b      	cbz	r3, 80053b0 <_dtoa_r+0x7a0>
 8005368:	9b08      	ldr	r3, [sp, #32]
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 80af 	beq.w	80054ce <_dtoa_r+0x8be>
 8005370:	2e00      	cmp	r6, #0
 8005372:	dd13      	ble.n	800539c <_dtoa_r+0x78c>
 8005374:	4639      	mov	r1, r7
 8005376:	4632      	mov	r2, r6
 8005378:	4620      	mov	r0, r4
 800537a:	f000 fe29 	bl	8005fd0 <__pow5mult>
 800537e:	ee18 2a10 	vmov	r2, s16
 8005382:	4601      	mov	r1, r0
 8005384:	4607      	mov	r7, r0
 8005386:	4620      	mov	r0, r4
 8005388:	f000 fd78 	bl	8005e7c <__multiply>
 800538c:	ee18 1a10 	vmov	r1, s16
 8005390:	4680      	mov	r8, r0
 8005392:	4620      	mov	r0, r4
 8005394:	f000 fca4 	bl	8005ce0 <_Bfree>
 8005398:	ee08 8a10 	vmov	s16, r8
 800539c:	9b07      	ldr	r3, [sp, #28]
 800539e:	1b9a      	subs	r2, r3, r6
 80053a0:	d006      	beq.n	80053b0 <_dtoa_r+0x7a0>
 80053a2:	ee18 1a10 	vmov	r1, s16
 80053a6:	4620      	mov	r0, r4
 80053a8:	f000 fe12 	bl	8005fd0 <__pow5mult>
 80053ac:	ee08 0a10 	vmov	s16, r0
 80053b0:	2101      	movs	r1, #1
 80053b2:	4620      	mov	r0, r4
 80053b4:	f000 fd4c 	bl	8005e50 <__i2b>
 80053b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	4606      	mov	r6, r0
 80053be:	f340 8088 	ble.w	80054d2 <_dtoa_r+0x8c2>
 80053c2:	461a      	mov	r2, r3
 80053c4:	4601      	mov	r1, r0
 80053c6:	4620      	mov	r0, r4
 80053c8:	f000 fe02 	bl	8005fd0 <__pow5mult>
 80053cc:	9b06      	ldr	r3, [sp, #24]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	4606      	mov	r6, r0
 80053d2:	f340 8081 	ble.w	80054d8 <_dtoa_r+0x8c8>
 80053d6:	f04f 0800 	mov.w	r8, #0
 80053da:	6933      	ldr	r3, [r6, #16]
 80053dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80053e0:	6918      	ldr	r0, [r3, #16]
 80053e2:	f000 fce5 	bl	8005db0 <__hi0bits>
 80053e6:	f1c0 0020 	rsb	r0, r0, #32
 80053ea:	9b05      	ldr	r3, [sp, #20]
 80053ec:	4418      	add	r0, r3
 80053ee:	f010 001f 	ands.w	r0, r0, #31
 80053f2:	f000 8092 	beq.w	800551a <_dtoa_r+0x90a>
 80053f6:	f1c0 0320 	rsb	r3, r0, #32
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	f340 808a 	ble.w	8005514 <_dtoa_r+0x904>
 8005400:	f1c0 001c 	rsb	r0, r0, #28
 8005404:	9b04      	ldr	r3, [sp, #16]
 8005406:	4403      	add	r3, r0
 8005408:	9304      	str	r3, [sp, #16]
 800540a:	9b05      	ldr	r3, [sp, #20]
 800540c:	4403      	add	r3, r0
 800540e:	4405      	add	r5, r0
 8005410:	9305      	str	r3, [sp, #20]
 8005412:	9b04      	ldr	r3, [sp, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	dd07      	ble.n	8005428 <_dtoa_r+0x818>
 8005418:	ee18 1a10 	vmov	r1, s16
 800541c:	461a      	mov	r2, r3
 800541e:	4620      	mov	r0, r4
 8005420:	f000 fe30 	bl	8006084 <__lshift>
 8005424:	ee08 0a10 	vmov	s16, r0
 8005428:	9b05      	ldr	r3, [sp, #20]
 800542a:	2b00      	cmp	r3, #0
 800542c:	dd05      	ble.n	800543a <_dtoa_r+0x82a>
 800542e:	4631      	mov	r1, r6
 8005430:	461a      	mov	r2, r3
 8005432:	4620      	mov	r0, r4
 8005434:	f000 fe26 	bl	8006084 <__lshift>
 8005438:	4606      	mov	r6, r0
 800543a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800543c:	2b00      	cmp	r3, #0
 800543e:	d06e      	beq.n	800551e <_dtoa_r+0x90e>
 8005440:	ee18 0a10 	vmov	r0, s16
 8005444:	4631      	mov	r1, r6
 8005446:	f000 fe8d 	bl	8006164 <__mcmp>
 800544a:	2800      	cmp	r0, #0
 800544c:	da67      	bge.n	800551e <_dtoa_r+0x90e>
 800544e:	9b00      	ldr	r3, [sp, #0]
 8005450:	3b01      	subs	r3, #1
 8005452:	ee18 1a10 	vmov	r1, s16
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	220a      	movs	r2, #10
 800545a:	2300      	movs	r3, #0
 800545c:	4620      	mov	r0, r4
 800545e:	f000 fc61 	bl	8005d24 <__multadd>
 8005462:	9b08      	ldr	r3, [sp, #32]
 8005464:	ee08 0a10 	vmov	s16, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 81b1 	beq.w	80057d0 <_dtoa_r+0xbc0>
 800546e:	2300      	movs	r3, #0
 8005470:	4639      	mov	r1, r7
 8005472:	220a      	movs	r2, #10
 8005474:	4620      	mov	r0, r4
 8005476:	f000 fc55 	bl	8005d24 <__multadd>
 800547a:	9b02      	ldr	r3, [sp, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	4607      	mov	r7, r0
 8005480:	f300 808e 	bgt.w	80055a0 <_dtoa_r+0x990>
 8005484:	9b06      	ldr	r3, [sp, #24]
 8005486:	2b02      	cmp	r3, #2
 8005488:	dc51      	bgt.n	800552e <_dtoa_r+0x91e>
 800548a:	e089      	b.n	80055a0 <_dtoa_r+0x990>
 800548c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800548e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005492:	e74b      	b.n	800532c <_dtoa_r+0x71c>
 8005494:	9b03      	ldr	r3, [sp, #12]
 8005496:	1e5e      	subs	r6, r3, #1
 8005498:	9b07      	ldr	r3, [sp, #28]
 800549a:	42b3      	cmp	r3, r6
 800549c:	bfbf      	itttt	lt
 800549e:	9b07      	ldrlt	r3, [sp, #28]
 80054a0:	9607      	strlt	r6, [sp, #28]
 80054a2:	1af2      	sublt	r2, r6, r3
 80054a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80054a6:	bfb6      	itet	lt
 80054a8:	189b      	addlt	r3, r3, r2
 80054aa:	1b9e      	subge	r6, r3, r6
 80054ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80054ae:	9b03      	ldr	r3, [sp, #12]
 80054b0:	bfb8      	it	lt
 80054b2:	2600      	movlt	r6, #0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	bfb7      	itett	lt
 80054b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80054bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80054c0:	1a9d      	sublt	r5, r3, r2
 80054c2:	2300      	movlt	r3, #0
 80054c4:	e734      	b.n	8005330 <_dtoa_r+0x720>
 80054c6:	9e07      	ldr	r6, [sp, #28]
 80054c8:	9d04      	ldr	r5, [sp, #16]
 80054ca:	9f08      	ldr	r7, [sp, #32]
 80054cc:	e73b      	b.n	8005346 <_dtoa_r+0x736>
 80054ce:	9a07      	ldr	r2, [sp, #28]
 80054d0:	e767      	b.n	80053a2 <_dtoa_r+0x792>
 80054d2:	9b06      	ldr	r3, [sp, #24]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	dc18      	bgt.n	800550a <_dtoa_r+0x8fa>
 80054d8:	f1ba 0f00 	cmp.w	sl, #0
 80054dc:	d115      	bne.n	800550a <_dtoa_r+0x8fa>
 80054de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80054e2:	b993      	cbnz	r3, 800550a <_dtoa_r+0x8fa>
 80054e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80054e8:	0d1b      	lsrs	r3, r3, #20
 80054ea:	051b      	lsls	r3, r3, #20
 80054ec:	b183      	cbz	r3, 8005510 <_dtoa_r+0x900>
 80054ee:	9b04      	ldr	r3, [sp, #16]
 80054f0:	3301      	adds	r3, #1
 80054f2:	9304      	str	r3, [sp, #16]
 80054f4:	9b05      	ldr	r3, [sp, #20]
 80054f6:	3301      	adds	r3, #1
 80054f8:	9305      	str	r3, [sp, #20]
 80054fa:	f04f 0801 	mov.w	r8, #1
 80054fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005500:	2b00      	cmp	r3, #0
 8005502:	f47f af6a 	bne.w	80053da <_dtoa_r+0x7ca>
 8005506:	2001      	movs	r0, #1
 8005508:	e76f      	b.n	80053ea <_dtoa_r+0x7da>
 800550a:	f04f 0800 	mov.w	r8, #0
 800550e:	e7f6      	b.n	80054fe <_dtoa_r+0x8ee>
 8005510:	4698      	mov	r8, r3
 8005512:	e7f4      	b.n	80054fe <_dtoa_r+0x8ee>
 8005514:	f43f af7d 	beq.w	8005412 <_dtoa_r+0x802>
 8005518:	4618      	mov	r0, r3
 800551a:	301c      	adds	r0, #28
 800551c:	e772      	b.n	8005404 <_dtoa_r+0x7f4>
 800551e:	9b03      	ldr	r3, [sp, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	dc37      	bgt.n	8005594 <_dtoa_r+0x984>
 8005524:	9b06      	ldr	r3, [sp, #24]
 8005526:	2b02      	cmp	r3, #2
 8005528:	dd34      	ble.n	8005594 <_dtoa_r+0x984>
 800552a:	9b03      	ldr	r3, [sp, #12]
 800552c:	9302      	str	r3, [sp, #8]
 800552e:	9b02      	ldr	r3, [sp, #8]
 8005530:	b96b      	cbnz	r3, 800554e <_dtoa_r+0x93e>
 8005532:	4631      	mov	r1, r6
 8005534:	2205      	movs	r2, #5
 8005536:	4620      	mov	r0, r4
 8005538:	f000 fbf4 	bl	8005d24 <__multadd>
 800553c:	4601      	mov	r1, r0
 800553e:	4606      	mov	r6, r0
 8005540:	ee18 0a10 	vmov	r0, s16
 8005544:	f000 fe0e 	bl	8006164 <__mcmp>
 8005548:	2800      	cmp	r0, #0
 800554a:	f73f adbb 	bgt.w	80050c4 <_dtoa_r+0x4b4>
 800554e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005550:	9d01      	ldr	r5, [sp, #4]
 8005552:	43db      	mvns	r3, r3
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	f04f 0800 	mov.w	r8, #0
 800555a:	4631      	mov	r1, r6
 800555c:	4620      	mov	r0, r4
 800555e:	f000 fbbf 	bl	8005ce0 <_Bfree>
 8005562:	2f00      	cmp	r7, #0
 8005564:	f43f aea4 	beq.w	80052b0 <_dtoa_r+0x6a0>
 8005568:	f1b8 0f00 	cmp.w	r8, #0
 800556c:	d005      	beq.n	800557a <_dtoa_r+0x96a>
 800556e:	45b8      	cmp	r8, r7
 8005570:	d003      	beq.n	800557a <_dtoa_r+0x96a>
 8005572:	4641      	mov	r1, r8
 8005574:	4620      	mov	r0, r4
 8005576:	f000 fbb3 	bl	8005ce0 <_Bfree>
 800557a:	4639      	mov	r1, r7
 800557c:	4620      	mov	r0, r4
 800557e:	f000 fbaf 	bl	8005ce0 <_Bfree>
 8005582:	e695      	b.n	80052b0 <_dtoa_r+0x6a0>
 8005584:	2600      	movs	r6, #0
 8005586:	4637      	mov	r7, r6
 8005588:	e7e1      	b.n	800554e <_dtoa_r+0x93e>
 800558a:	9700      	str	r7, [sp, #0]
 800558c:	4637      	mov	r7, r6
 800558e:	e599      	b.n	80050c4 <_dtoa_r+0x4b4>
 8005590:	40240000 	.word	0x40240000
 8005594:	9b08      	ldr	r3, [sp, #32]
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 80ca 	beq.w	8005730 <_dtoa_r+0xb20>
 800559c:	9b03      	ldr	r3, [sp, #12]
 800559e:	9302      	str	r3, [sp, #8]
 80055a0:	2d00      	cmp	r5, #0
 80055a2:	dd05      	ble.n	80055b0 <_dtoa_r+0x9a0>
 80055a4:	4639      	mov	r1, r7
 80055a6:	462a      	mov	r2, r5
 80055a8:	4620      	mov	r0, r4
 80055aa:	f000 fd6b 	bl	8006084 <__lshift>
 80055ae:	4607      	mov	r7, r0
 80055b0:	f1b8 0f00 	cmp.w	r8, #0
 80055b4:	d05b      	beq.n	800566e <_dtoa_r+0xa5e>
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	4620      	mov	r0, r4
 80055ba:	f000 fb51 	bl	8005c60 <_Balloc>
 80055be:	4605      	mov	r5, r0
 80055c0:	b928      	cbnz	r0, 80055ce <_dtoa_r+0x9be>
 80055c2:	4b87      	ldr	r3, [pc, #540]	; (80057e0 <_dtoa_r+0xbd0>)
 80055c4:	4602      	mov	r2, r0
 80055c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80055ca:	f7ff bb3b 	b.w	8004c44 <_dtoa_r+0x34>
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	3202      	adds	r2, #2
 80055d2:	0092      	lsls	r2, r2, #2
 80055d4:	f107 010c 	add.w	r1, r7, #12
 80055d8:	300c      	adds	r0, #12
 80055da:	f000 fb33 	bl	8005c44 <memcpy>
 80055de:	2201      	movs	r2, #1
 80055e0:	4629      	mov	r1, r5
 80055e2:	4620      	mov	r0, r4
 80055e4:	f000 fd4e 	bl	8006084 <__lshift>
 80055e8:	9b01      	ldr	r3, [sp, #4]
 80055ea:	f103 0901 	add.w	r9, r3, #1
 80055ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80055f2:	4413      	add	r3, r2
 80055f4:	9305      	str	r3, [sp, #20]
 80055f6:	f00a 0301 	and.w	r3, sl, #1
 80055fa:	46b8      	mov	r8, r7
 80055fc:	9304      	str	r3, [sp, #16]
 80055fe:	4607      	mov	r7, r0
 8005600:	4631      	mov	r1, r6
 8005602:	ee18 0a10 	vmov	r0, s16
 8005606:	f7ff fa77 	bl	8004af8 <quorem>
 800560a:	4641      	mov	r1, r8
 800560c:	9002      	str	r0, [sp, #8]
 800560e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005612:	ee18 0a10 	vmov	r0, s16
 8005616:	f000 fda5 	bl	8006164 <__mcmp>
 800561a:	463a      	mov	r2, r7
 800561c:	9003      	str	r0, [sp, #12]
 800561e:	4631      	mov	r1, r6
 8005620:	4620      	mov	r0, r4
 8005622:	f000 fdbb 	bl	800619c <__mdiff>
 8005626:	68c2      	ldr	r2, [r0, #12]
 8005628:	f109 3bff 	add.w	fp, r9, #4294967295
 800562c:	4605      	mov	r5, r0
 800562e:	bb02      	cbnz	r2, 8005672 <_dtoa_r+0xa62>
 8005630:	4601      	mov	r1, r0
 8005632:	ee18 0a10 	vmov	r0, s16
 8005636:	f000 fd95 	bl	8006164 <__mcmp>
 800563a:	4602      	mov	r2, r0
 800563c:	4629      	mov	r1, r5
 800563e:	4620      	mov	r0, r4
 8005640:	9207      	str	r2, [sp, #28]
 8005642:	f000 fb4d 	bl	8005ce0 <_Bfree>
 8005646:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800564a:	ea43 0102 	orr.w	r1, r3, r2
 800564e:	9b04      	ldr	r3, [sp, #16]
 8005650:	430b      	orrs	r3, r1
 8005652:	464d      	mov	r5, r9
 8005654:	d10f      	bne.n	8005676 <_dtoa_r+0xa66>
 8005656:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800565a:	d02a      	beq.n	80056b2 <_dtoa_r+0xaa2>
 800565c:	9b03      	ldr	r3, [sp, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	dd02      	ble.n	8005668 <_dtoa_r+0xa58>
 8005662:	9b02      	ldr	r3, [sp, #8]
 8005664:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005668:	f88b a000 	strb.w	sl, [fp]
 800566c:	e775      	b.n	800555a <_dtoa_r+0x94a>
 800566e:	4638      	mov	r0, r7
 8005670:	e7ba      	b.n	80055e8 <_dtoa_r+0x9d8>
 8005672:	2201      	movs	r2, #1
 8005674:	e7e2      	b.n	800563c <_dtoa_r+0xa2c>
 8005676:	9b03      	ldr	r3, [sp, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	db04      	blt.n	8005686 <_dtoa_r+0xa76>
 800567c:	9906      	ldr	r1, [sp, #24]
 800567e:	430b      	orrs	r3, r1
 8005680:	9904      	ldr	r1, [sp, #16]
 8005682:	430b      	orrs	r3, r1
 8005684:	d122      	bne.n	80056cc <_dtoa_r+0xabc>
 8005686:	2a00      	cmp	r2, #0
 8005688:	ddee      	ble.n	8005668 <_dtoa_r+0xa58>
 800568a:	ee18 1a10 	vmov	r1, s16
 800568e:	2201      	movs	r2, #1
 8005690:	4620      	mov	r0, r4
 8005692:	f000 fcf7 	bl	8006084 <__lshift>
 8005696:	4631      	mov	r1, r6
 8005698:	ee08 0a10 	vmov	s16, r0
 800569c:	f000 fd62 	bl	8006164 <__mcmp>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	dc03      	bgt.n	80056ac <_dtoa_r+0xa9c>
 80056a4:	d1e0      	bne.n	8005668 <_dtoa_r+0xa58>
 80056a6:	f01a 0f01 	tst.w	sl, #1
 80056aa:	d0dd      	beq.n	8005668 <_dtoa_r+0xa58>
 80056ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80056b0:	d1d7      	bne.n	8005662 <_dtoa_r+0xa52>
 80056b2:	2339      	movs	r3, #57	; 0x39
 80056b4:	f88b 3000 	strb.w	r3, [fp]
 80056b8:	462b      	mov	r3, r5
 80056ba:	461d      	mov	r5, r3
 80056bc:	3b01      	subs	r3, #1
 80056be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80056c2:	2a39      	cmp	r2, #57	; 0x39
 80056c4:	d071      	beq.n	80057aa <_dtoa_r+0xb9a>
 80056c6:	3201      	adds	r2, #1
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	e746      	b.n	800555a <_dtoa_r+0x94a>
 80056cc:	2a00      	cmp	r2, #0
 80056ce:	dd07      	ble.n	80056e0 <_dtoa_r+0xad0>
 80056d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80056d4:	d0ed      	beq.n	80056b2 <_dtoa_r+0xaa2>
 80056d6:	f10a 0301 	add.w	r3, sl, #1
 80056da:	f88b 3000 	strb.w	r3, [fp]
 80056de:	e73c      	b.n	800555a <_dtoa_r+0x94a>
 80056e0:	9b05      	ldr	r3, [sp, #20]
 80056e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80056e6:	4599      	cmp	r9, r3
 80056e8:	d047      	beq.n	800577a <_dtoa_r+0xb6a>
 80056ea:	ee18 1a10 	vmov	r1, s16
 80056ee:	2300      	movs	r3, #0
 80056f0:	220a      	movs	r2, #10
 80056f2:	4620      	mov	r0, r4
 80056f4:	f000 fb16 	bl	8005d24 <__multadd>
 80056f8:	45b8      	cmp	r8, r7
 80056fa:	ee08 0a10 	vmov	s16, r0
 80056fe:	f04f 0300 	mov.w	r3, #0
 8005702:	f04f 020a 	mov.w	r2, #10
 8005706:	4641      	mov	r1, r8
 8005708:	4620      	mov	r0, r4
 800570a:	d106      	bne.n	800571a <_dtoa_r+0xb0a>
 800570c:	f000 fb0a 	bl	8005d24 <__multadd>
 8005710:	4680      	mov	r8, r0
 8005712:	4607      	mov	r7, r0
 8005714:	f109 0901 	add.w	r9, r9, #1
 8005718:	e772      	b.n	8005600 <_dtoa_r+0x9f0>
 800571a:	f000 fb03 	bl	8005d24 <__multadd>
 800571e:	4639      	mov	r1, r7
 8005720:	4680      	mov	r8, r0
 8005722:	2300      	movs	r3, #0
 8005724:	220a      	movs	r2, #10
 8005726:	4620      	mov	r0, r4
 8005728:	f000 fafc 	bl	8005d24 <__multadd>
 800572c:	4607      	mov	r7, r0
 800572e:	e7f1      	b.n	8005714 <_dtoa_r+0xb04>
 8005730:	9b03      	ldr	r3, [sp, #12]
 8005732:	9302      	str	r3, [sp, #8]
 8005734:	9d01      	ldr	r5, [sp, #4]
 8005736:	ee18 0a10 	vmov	r0, s16
 800573a:	4631      	mov	r1, r6
 800573c:	f7ff f9dc 	bl	8004af8 <quorem>
 8005740:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005744:	9b01      	ldr	r3, [sp, #4]
 8005746:	f805 ab01 	strb.w	sl, [r5], #1
 800574a:	1aea      	subs	r2, r5, r3
 800574c:	9b02      	ldr	r3, [sp, #8]
 800574e:	4293      	cmp	r3, r2
 8005750:	dd09      	ble.n	8005766 <_dtoa_r+0xb56>
 8005752:	ee18 1a10 	vmov	r1, s16
 8005756:	2300      	movs	r3, #0
 8005758:	220a      	movs	r2, #10
 800575a:	4620      	mov	r0, r4
 800575c:	f000 fae2 	bl	8005d24 <__multadd>
 8005760:	ee08 0a10 	vmov	s16, r0
 8005764:	e7e7      	b.n	8005736 <_dtoa_r+0xb26>
 8005766:	9b02      	ldr	r3, [sp, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	bfc8      	it	gt
 800576c:	461d      	movgt	r5, r3
 800576e:	9b01      	ldr	r3, [sp, #4]
 8005770:	bfd8      	it	le
 8005772:	2501      	movle	r5, #1
 8005774:	441d      	add	r5, r3
 8005776:	f04f 0800 	mov.w	r8, #0
 800577a:	ee18 1a10 	vmov	r1, s16
 800577e:	2201      	movs	r2, #1
 8005780:	4620      	mov	r0, r4
 8005782:	f000 fc7f 	bl	8006084 <__lshift>
 8005786:	4631      	mov	r1, r6
 8005788:	ee08 0a10 	vmov	s16, r0
 800578c:	f000 fcea 	bl	8006164 <__mcmp>
 8005790:	2800      	cmp	r0, #0
 8005792:	dc91      	bgt.n	80056b8 <_dtoa_r+0xaa8>
 8005794:	d102      	bne.n	800579c <_dtoa_r+0xb8c>
 8005796:	f01a 0f01 	tst.w	sl, #1
 800579a:	d18d      	bne.n	80056b8 <_dtoa_r+0xaa8>
 800579c:	462b      	mov	r3, r5
 800579e:	461d      	mov	r5, r3
 80057a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057a4:	2a30      	cmp	r2, #48	; 0x30
 80057a6:	d0fa      	beq.n	800579e <_dtoa_r+0xb8e>
 80057a8:	e6d7      	b.n	800555a <_dtoa_r+0x94a>
 80057aa:	9a01      	ldr	r2, [sp, #4]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d184      	bne.n	80056ba <_dtoa_r+0xaaa>
 80057b0:	9b00      	ldr	r3, [sp, #0]
 80057b2:	3301      	adds	r3, #1
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	2331      	movs	r3, #49	; 0x31
 80057b8:	7013      	strb	r3, [r2, #0]
 80057ba:	e6ce      	b.n	800555a <_dtoa_r+0x94a>
 80057bc:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <_dtoa_r+0xbd4>)
 80057be:	f7ff ba95 	b.w	8004cec <_dtoa_r+0xdc>
 80057c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f47f aa6e 	bne.w	8004ca6 <_dtoa_r+0x96>
 80057ca:	4b07      	ldr	r3, [pc, #28]	; (80057e8 <_dtoa_r+0xbd8>)
 80057cc:	f7ff ba8e 	b.w	8004cec <_dtoa_r+0xdc>
 80057d0:	9b02      	ldr	r3, [sp, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	dcae      	bgt.n	8005734 <_dtoa_r+0xb24>
 80057d6:	9b06      	ldr	r3, [sp, #24]
 80057d8:	2b02      	cmp	r3, #2
 80057da:	f73f aea8 	bgt.w	800552e <_dtoa_r+0x91e>
 80057de:	e7a9      	b.n	8005734 <_dtoa_r+0xb24>
 80057e0:	08006bd3 	.word	0x08006bd3
 80057e4:	08006b30 	.word	0x08006b30
 80057e8:	08006b54 	.word	0x08006b54

080057ec <__sflush_r>:
 80057ec:	898a      	ldrh	r2, [r1, #12]
 80057ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f2:	4605      	mov	r5, r0
 80057f4:	0710      	lsls	r0, r2, #28
 80057f6:	460c      	mov	r4, r1
 80057f8:	d458      	bmi.n	80058ac <__sflush_r+0xc0>
 80057fa:	684b      	ldr	r3, [r1, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	dc05      	bgt.n	800580c <__sflush_r+0x20>
 8005800:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005802:	2b00      	cmp	r3, #0
 8005804:	dc02      	bgt.n	800580c <__sflush_r+0x20>
 8005806:	2000      	movs	r0, #0
 8005808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800580c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800580e:	2e00      	cmp	r6, #0
 8005810:	d0f9      	beq.n	8005806 <__sflush_r+0x1a>
 8005812:	2300      	movs	r3, #0
 8005814:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005818:	682f      	ldr	r7, [r5, #0]
 800581a:	602b      	str	r3, [r5, #0]
 800581c:	d032      	beq.n	8005884 <__sflush_r+0x98>
 800581e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	075a      	lsls	r2, r3, #29
 8005824:	d505      	bpl.n	8005832 <__sflush_r+0x46>
 8005826:	6863      	ldr	r3, [r4, #4]
 8005828:	1ac0      	subs	r0, r0, r3
 800582a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800582c:	b10b      	cbz	r3, 8005832 <__sflush_r+0x46>
 800582e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005830:	1ac0      	subs	r0, r0, r3
 8005832:	2300      	movs	r3, #0
 8005834:	4602      	mov	r2, r0
 8005836:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005838:	6a21      	ldr	r1, [r4, #32]
 800583a:	4628      	mov	r0, r5
 800583c:	47b0      	blx	r6
 800583e:	1c43      	adds	r3, r0, #1
 8005840:	89a3      	ldrh	r3, [r4, #12]
 8005842:	d106      	bne.n	8005852 <__sflush_r+0x66>
 8005844:	6829      	ldr	r1, [r5, #0]
 8005846:	291d      	cmp	r1, #29
 8005848:	d82c      	bhi.n	80058a4 <__sflush_r+0xb8>
 800584a:	4a2a      	ldr	r2, [pc, #168]	; (80058f4 <__sflush_r+0x108>)
 800584c:	40ca      	lsrs	r2, r1
 800584e:	07d6      	lsls	r6, r2, #31
 8005850:	d528      	bpl.n	80058a4 <__sflush_r+0xb8>
 8005852:	2200      	movs	r2, #0
 8005854:	6062      	str	r2, [r4, #4]
 8005856:	04d9      	lsls	r1, r3, #19
 8005858:	6922      	ldr	r2, [r4, #16]
 800585a:	6022      	str	r2, [r4, #0]
 800585c:	d504      	bpl.n	8005868 <__sflush_r+0x7c>
 800585e:	1c42      	adds	r2, r0, #1
 8005860:	d101      	bne.n	8005866 <__sflush_r+0x7a>
 8005862:	682b      	ldr	r3, [r5, #0]
 8005864:	b903      	cbnz	r3, 8005868 <__sflush_r+0x7c>
 8005866:	6560      	str	r0, [r4, #84]	; 0x54
 8005868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800586a:	602f      	str	r7, [r5, #0]
 800586c:	2900      	cmp	r1, #0
 800586e:	d0ca      	beq.n	8005806 <__sflush_r+0x1a>
 8005870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005874:	4299      	cmp	r1, r3
 8005876:	d002      	beq.n	800587e <__sflush_r+0x92>
 8005878:	4628      	mov	r0, r5
 800587a:	f000 fd8b 	bl	8006394 <_free_r>
 800587e:	2000      	movs	r0, #0
 8005880:	6360      	str	r0, [r4, #52]	; 0x34
 8005882:	e7c1      	b.n	8005808 <__sflush_r+0x1c>
 8005884:	6a21      	ldr	r1, [r4, #32]
 8005886:	2301      	movs	r3, #1
 8005888:	4628      	mov	r0, r5
 800588a:	47b0      	blx	r6
 800588c:	1c41      	adds	r1, r0, #1
 800588e:	d1c7      	bne.n	8005820 <__sflush_r+0x34>
 8005890:	682b      	ldr	r3, [r5, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0c4      	beq.n	8005820 <__sflush_r+0x34>
 8005896:	2b1d      	cmp	r3, #29
 8005898:	d001      	beq.n	800589e <__sflush_r+0xb2>
 800589a:	2b16      	cmp	r3, #22
 800589c:	d101      	bne.n	80058a2 <__sflush_r+0xb6>
 800589e:	602f      	str	r7, [r5, #0]
 80058a0:	e7b1      	b.n	8005806 <__sflush_r+0x1a>
 80058a2:	89a3      	ldrh	r3, [r4, #12]
 80058a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058a8:	81a3      	strh	r3, [r4, #12]
 80058aa:	e7ad      	b.n	8005808 <__sflush_r+0x1c>
 80058ac:	690f      	ldr	r7, [r1, #16]
 80058ae:	2f00      	cmp	r7, #0
 80058b0:	d0a9      	beq.n	8005806 <__sflush_r+0x1a>
 80058b2:	0793      	lsls	r3, r2, #30
 80058b4:	680e      	ldr	r6, [r1, #0]
 80058b6:	bf08      	it	eq
 80058b8:	694b      	ldreq	r3, [r1, #20]
 80058ba:	600f      	str	r7, [r1, #0]
 80058bc:	bf18      	it	ne
 80058be:	2300      	movne	r3, #0
 80058c0:	eba6 0807 	sub.w	r8, r6, r7
 80058c4:	608b      	str	r3, [r1, #8]
 80058c6:	f1b8 0f00 	cmp.w	r8, #0
 80058ca:	dd9c      	ble.n	8005806 <__sflush_r+0x1a>
 80058cc:	6a21      	ldr	r1, [r4, #32]
 80058ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058d0:	4643      	mov	r3, r8
 80058d2:	463a      	mov	r2, r7
 80058d4:	4628      	mov	r0, r5
 80058d6:	47b0      	blx	r6
 80058d8:	2800      	cmp	r0, #0
 80058da:	dc06      	bgt.n	80058ea <__sflush_r+0xfe>
 80058dc:	89a3      	ldrh	r3, [r4, #12]
 80058de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058e2:	81a3      	strh	r3, [r4, #12]
 80058e4:	f04f 30ff 	mov.w	r0, #4294967295
 80058e8:	e78e      	b.n	8005808 <__sflush_r+0x1c>
 80058ea:	4407      	add	r7, r0
 80058ec:	eba8 0800 	sub.w	r8, r8, r0
 80058f0:	e7e9      	b.n	80058c6 <__sflush_r+0xda>
 80058f2:	bf00      	nop
 80058f4:	20400001 	.word	0x20400001

080058f8 <_fflush_r>:
 80058f8:	b538      	push	{r3, r4, r5, lr}
 80058fa:	690b      	ldr	r3, [r1, #16]
 80058fc:	4605      	mov	r5, r0
 80058fe:	460c      	mov	r4, r1
 8005900:	b913      	cbnz	r3, 8005908 <_fflush_r+0x10>
 8005902:	2500      	movs	r5, #0
 8005904:	4628      	mov	r0, r5
 8005906:	bd38      	pop	{r3, r4, r5, pc}
 8005908:	b118      	cbz	r0, 8005912 <_fflush_r+0x1a>
 800590a:	6983      	ldr	r3, [r0, #24]
 800590c:	b90b      	cbnz	r3, 8005912 <_fflush_r+0x1a>
 800590e:	f000 f887 	bl	8005a20 <__sinit>
 8005912:	4b14      	ldr	r3, [pc, #80]	; (8005964 <_fflush_r+0x6c>)
 8005914:	429c      	cmp	r4, r3
 8005916:	d11b      	bne.n	8005950 <_fflush_r+0x58>
 8005918:	686c      	ldr	r4, [r5, #4]
 800591a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0ef      	beq.n	8005902 <_fflush_r+0xa>
 8005922:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005924:	07d0      	lsls	r0, r2, #31
 8005926:	d404      	bmi.n	8005932 <_fflush_r+0x3a>
 8005928:	0599      	lsls	r1, r3, #22
 800592a:	d402      	bmi.n	8005932 <_fflush_r+0x3a>
 800592c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800592e:	f000 f91a 	bl	8005b66 <__retarget_lock_acquire_recursive>
 8005932:	4628      	mov	r0, r5
 8005934:	4621      	mov	r1, r4
 8005936:	f7ff ff59 	bl	80057ec <__sflush_r>
 800593a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800593c:	07da      	lsls	r2, r3, #31
 800593e:	4605      	mov	r5, r0
 8005940:	d4e0      	bmi.n	8005904 <_fflush_r+0xc>
 8005942:	89a3      	ldrh	r3, [r4, #12]
 8005944:	059b      	lsls	r3, r3, #22
 8005946:	d4dd      	bmi.n	8005904 <_fflush_r+0xc>
 8005948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800594a:	f000 f90d 	bl	8005b68 <__retarget_lock_release_recursive>
 800594e:	e7d9      	b.n	8005904 <_fflush_r+0xc>
 8005950:	4b05      	ldr	r3, [pc, #20]	; (8005968 <_fflush_r+0x70>)
 8005952:	429c      	cmp	r4, r3
 8005954:	d101      	bne.n	800595a <_fflush_r+0x62>
 8005956:	68ac      	ldr	r4, [r5, #8]
 8005958:	e7df      	b.n	800591a <_fflush_r+0x22>
 800595a:	4b04      	ldr	r3, [pc, #16]	; (800596c <_fflush_r+0x74>)
 800595c:	429c      	cmp	r4, r3
 800595e:	bf08      	it	eq
 8005960:	68ec      	ldreq	r4, [r5, #12]
 8005962:	e7da      	b.n	800591a <_fflush_r+0x22>
 8005964:	08006c04 	.word	0x08006c04
 8005968:	08006c24 	.word	0x08006c24
 800596c:	08006be4 	.word	0x08006be4

08005970 <std>:
 8005970:	2300      	movs	r3, #0
 8005972:	b510      	push	{r4, lr}
 8005974:	4604      	mov	r4, r0
 8005976:	e9c0 3300 	strd	r3, r3, [r0]
 800597a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800597e:	6083      	str	r3, [r0, #8]
 8005980:	8181      	strh	r1, [r0, #12]
 8005982:	6643      	str	r3, [r0, #100]	; 0x64
 8005984:	81c2      	strh	r2, [r0, #14]
 8005986:	6183      	str	r3, [r0, #24]
 8005988:	4619      	mov	r1, r3
 800598a:	2208      	movs	r2, #8
 800598c:	305c      	adds	r0, #92	; 0x5c
 800598e:	f7fe faf3 	bl	8003f78 <memset>
 8005992:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <std+0x38>)
 8005994:	6263      	str	r3, [r4, #36]	; 0x24
 8005996:	4b05      	ldr	r3, [pc, #20]	; (80059ac <std+0x3c>)
 8005998:	62a3      	str	r3, [r4, #40]	; 0x28
 800599a:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <std+0x40>)
 800599c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800599e:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <std+0x44>)
 80059a0:	6224      	str	r4, [r4, #32]
 80059a2:	6323      	str	r3, [r4, #48]	; 0x30
 80059a4:	bd10      	pop	{r4, pc}
 80059a6:	bf00      	nop
 80059a8:	08006829 	.word	0x08006829
 80059ac:	0800684b 	.word	0x0800684b
 80059b0:	08006883 	.word	0x08006883
 80059b4:	080068a7 	.word	0x080068a7

080059b8 <_cleanup_r>:
 80059b8:	4901      	ldr	r1, [pc, #4]	; (80059c0 <_cleanup_r+0x8>)
 80059ba:	f000 b8af 	b.w	8005b1c <_fwalk_reent>
 80059be:	bf00      	nop
 80059c0:	080058f9 	.word	0x080058f9

080059c4 <__sfmoreglue>:
 80059c4:	b570      	push	{r4, r5, r6, lr}
 80059c6:	2268      	movs	r2, #104	; 0x68
 80059c8:	1e4d      	subs	r5, r1, #1
 80059ca:	4355      	muls	r5, r2
 80059cc:	460e      	mov	r6, r1
 80059ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059d2:	f000 fd4b 	bl	800646c <_malloc_r>
 80059d6:	4604      	mov	r4, r0
 80059d8:	b140      	cbz	r0, 80059ec <__sfmoreglue+0x28>
 80059da:	2100      	movs	r1, #0
 80059dc:	e9c0 1600 	strd	r1, r6, [r0]
 80059e0:	300c      	adds	r0, #12
 80059e2:	60a0      	str	r0, [r4, #8]
 80059e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059e8:	f7fe fac6 	bl	8003f78 <memset>
 80059ec:	4620      	mov	r0, r4
 80059ee:	bd70      	pop	{r4, r5, r6, pc}

080059f0 <__sfp_lock_acquire>:
 80059f0:	4801      	ldr	r0, [pc, #4]	; (80059f8 <__sfp_lock_acquire+0x8>)
 80059f2:	f000 b8b8 	b.w	8005b66 <__retarget_lock_acquire_recursive>
 80059f6:	bf00      	nop
 80059f8:	20000751 	.word	0x20000751

080059fc <__sfp_lock_release>:
 80059fc:	4801      	ldr	r0, [pc, #4]	; (8005a04 <__sfp_lock_release+0x8>)
 80059fe:	f000 b8b3 	b.w	8005b68 <__retarget_lock_release_recursive>
 8005a02:	bf00      	nop
 8005a04:	20000751 	.word	0x20000751

08005a08 <__sinit_lock_acquire>:
 8005a08:	4801      	ldr	r0, [pc, #4]	; (8005a10 <__sinit_lock_acquire+0x8>)
 8005a0a:	f000 b8ac 	b.w	8005b66 <__retarget_lock_acquire_recursive>
 8005a0e:	bf00      	nop
 8005a10:	20000752 	.word	0x20000752

08005a14 <__sinit_lock_release>:
 8005a14:	4801      	ldr	r0, [pc, #4]	; (8005a1c <__sinit_lock_release+0x8>)
 8005a16:	f000 b8a7 	b.w	8005b68 <__retarget_lock_release_recursive>
 8005a1a:	bf00      	nop
 8005a1c:	20000752 	.word	0x20000752

08005a20 <__sinit>:
 8005a20:	b510      	push	{r4, lr}
 8005a22:	4604      	mov	r4, r0
 8005a24:	f7ff fff0 	bl	8005a08 <__sinit_lock_acquire>
 8005a28:	69a3      	ldr	r3, [r4, #24]
 8005a2a:	b11b      	cbz	r3, 8005a34 <__sinit+0x14>
 8005a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a30:	f7ff bff0 	b.w	8005a14 <__sinit_lock_release>
 8005a34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a38:	6523      	str	r3, [r4, #80]	; 0x50
 8005a3a:	4b13      	ldr	r3, [pc, #76]	; (8005a88 <__sinit+0x68>)
 8005a3c:	4a13      	ldr	r2, [pc, #76]	; (8005a8c <__sinit+0x6c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a42:	42a3      	cmp	r3, r4
 8005a44:	bf04      	itt	eq
 8005a46:	2301      	moveq	r3, #1
 8005a48:	61a3      	streq	r3, [r4, #24]
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f000 f820 	bl	8005a90 <__sfp>
 8005a50:	6060      	str	r0, [r4, #4]
 8005a52:	4620      	mov	r0, r4
 8005a54:	f000 f81c 	bl	8005a90 <__sfp>
 8005a58:	60a0      	str	r0, [r4, #8]
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f000 f818 	bl	8005a90 <__sfp>
 8005a60:	2200      	movs	r2, #0
 8005a62:	60e0      	str	r0, [r4, #12]
 8005a64:	2104      	movs	r1, #4
 8005a66:	6860      	ldr	r0, [r4, #4]
 8005a68:	f7ff ff82 	bl	8005970 <std>
 8005a6c:	68a0      	ldr	r0, [r4, #8]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	2109      	movs	r1, #9
 8005a72:	f7ff ff7d 	bl	8005970 <std>
 8005a76:	68e0      	ldr	r0, [r4, #12]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	2112      	movs	r1, #18
 8005a7c:	f7ff ff78 	bl	8005970 <std>
 8005a80:	2301      	movs	r3, #1
 8005a82:	61a3      	str	r3, [r4, #24]
 8005a84:	e7d2      	b.n	8005a2c <__sinit+0xc>
 8005a86:	bf00      	nop
 8005a88:	08006b1c 	.word	0x08006b1c
 8005a8c:	080059b9 	.word	0x080059b9

08005a90 <__sfp>:
 8005a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a92:	4607      	mov	r7, r0
 8005a94:	f7ff ffac 	bl	80059f0 <__sfp_lock_acquire>
 8005a98:	4b1e      	ldr	r3, [pc, #120]	; (8005b14 <__sfp+0x84>)
 8005a9a:	681e      	ldr	r6, [r3, #0]
 8005a9c:	69b3      	ldr	r3, [r6, #24]
 8005a9e:	b913      	cbnz	r3, 8005aa6 <__sfp+0x16>
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	f7ff ffbd 	bl	8005a20 <__sinit>
 8005aa6:	3648      	adds	r6, #72	; 0x48
 8005aa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	d503      	bpl.n	8005ab8 <__sfp+0x28>
 8005ab0:	6833      	ldr	r3, [r6, #0]
 8005ab2:	b30b      	cbz	r3, 8005af8 <__sfp+0x68>
 8005ab4:	6836      	ldr	r6, [r6, #0]
 8005ab6:	e7f7      	b.n	8005aa8 <__sfp+0x18>
 8005ab8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005abc:	b9d5      	cbnz	r5, 8005af4 <__sfp+0x64>
 8005abe:	4b16      	ldr	r3, [pc, #88]	; (8005b18 <__sfp+0x88>)
 8005ac0:	60e3      	str	r3, [r4, #12]
 8005ac2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ac6:	6665      	str	r5, [r4, #100]	; 0x64
 8005ac8:	f000 f84c 	bl	8005b64 <__retarget_lock_init_recursive>
 8005acc:	f7ff ff96 	bl	80059fc <__sfp_lock_release>
 8005ad0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ad4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ad8:	6025      	str	r5, [r4, #0]
 8005ada:	61a5      	str	r5, [r4, #24]
 8005adc:	2208      	movs	r2, #8
 8005ade:	4629      	mov	r1, r5
 8005ae0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ae4:	f7fe fa48 	bl	8003f78 <memset>
 8005ae8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005aec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005af0:	4620      	mov	r0, r4
 8005af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005af4:	3468      	adds	r4, #104	; 0x68
 8005af6:	e7d9      	b.n	8005aac <__sfp+0x1c>
 8005af8:	2104      	movs	r1, #4
 8005afa:	4638      	mov	r0, r7
 8005afc:	f7ff ff62 	bl	80059c4 <__sfmoreglue>
 8005b00:	4604      	mov	r4, r0
 8005b02:	6030      	str	r0, [r6, #0]
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d1d5      	bne.n	8005ab4 <__sfp+0x24>
 8005b08:	f7ff ff78 	bl	80059fc <__sfp_lock_release>
 8005b0c:	230c      	movs	r3, #12
 8005b0e:	603b      	str	r3, [r7, #0]
 8005b10:	e7ee      	b.n	8005af0 <__sfp+0x60>
 8005b12:	bf00      	nop
 8005b14:	08006b1c 	.word	0x08006b1c
 8005b18:	ffff0001 	.word	0xffff0001

08005b1c <_fwalk_reent>:
 8005b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b20:	4606      	mov	r6, r0
 8005b22:	4688      	mov	r8, r1
 8005b24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b28:	2700      	movs	r7, #0
 8005b2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b2e:	f1b9 0901 	subs.w	r9, r9, #1
 8005b32:	d505      	bpl.n	8005b40 <_fwalk_reent+0x24>
 8005b34:	6824      	ldr	r4, [r4, #0]
 8005b36:	2c00      	cmp	r4, #0
 8005b38:	d1f7      	bne.n	8005b2a <_fwalk_reent+0xe>
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b40:	89ab      	ldrh	r3, [r5, #12]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d907      	bls.n	8005b56 <_fwalk_reent+0x3a>
 8005b46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	d003      	beq.n	8005b56 <_fwalk_reent+0x3a>
 8005b4e:	4629      	mov	r1, r5
 8005b50:	4630      	mov	r0, r6
 8005b52:	47c0      	blx	r8
 8005b54:	4307      	orrs	r7, r0
 8005b56:	3568      	adds	r5, #104	; 0x68
 8005b58:	e7e9      	b.n	8005b2e <_fwalk_reent+0x12>
	...

08005b5c <_localeconv_r>:
 8005b5c:	4800      	ldr	r0, [pc, #0]	; (8005b60 <_localeconv_r+0x4>)
 8005b5e:	4770      	bx	lr
 8005b60:	20000160 	.word	0x20000160

08005b64 <__retarget_lock_init_recursive>:
 8005b64:	4770      	bx	lr

08005b66 <__retarget_lock_acquire_recursive>:
 8005b66:	4770      	bx	lr

08005b68 <__retarget_lock_release_recursive>:
 8005b68:	4770      	bx	lr

08005b6a <__swhatbuf_r>:
 8005b6a:	b570      	push	{r4, r5, r6, lr}
 8005b6c:	460e      	mov	r6, r1
 8005b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b72:	2900      	cmp	r1, #0
 8005b74:	b096      	sub	sp, #88	; 0x58
 8005b76:	4614      	mov	r4, r2
 8005b78:	461d      	mov	r5, r3
 8005b7a:	da08      	bge.n	8005b8e <__swhatbuf_r+0x24>
 8005b7c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	602a      	str	r2, [r5, #0]
 8005b84:	061a      	lsls	r2, r3, #24
 8005b86:	d410      	bmi.n	8005baa <__swhatbuf_r+0x40>
 8005b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b8c:	e00e      	b.n	8005bac <__swhatbuf_r+0x42>
 8005b8e:	466a      	mov	r2, sp
 8005b90:	f000 fee0 	bl	8006954 <_fstat_r>
 8005b94:	2800      	cmp	r0, #0
 8005b96:	dbf1      	blt.n	8005b7c <__swhatbuf_r+0x12>
 8005b98:	9a01      	ldr	r2, [sp, #4]
 8005b9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ba2:	425a      	negs	r2, r3
 8005ba4:	415a      	adcs	r2, r3
 8005ba6:	602a      	str	r2, [r5, #0]
 8005ba8:	e7ee      	b.n	8005b88 <__swhatbuf_r+0x1e>
 8005baa:	2340      	movs	r3, #64	; 0x40
 8005bac:	2000      	movs	r0, #0
 8005bae:	6023      	str	r3, [r4, #0]
 8005bb0:	b016      	add	sp, #88	; 0x58
 8005bb2:	bd70      	pop	{r4, r5, r6, pc}

08005bb4 <__smakebuf_r>:
 8005bb4:	898b      	ldrh	r3, [r1, #12]
 8005bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bb8:	079d      	lsls	r5, r3, #30
 8005bba:	4606      	mov	r6, r0
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	d507      	bpl.n	8005bd0 <__smakebuf_r+0x1c>
 8005bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bc4:	6023      	str	r3, [r4, #0]
 8005bc6:	6123      	str	r3, [r4, #16]
 8005bc8:	2301      	movs	r3, #1
 8005bca:	6163      	str	r3, [r4, #20]
 8005bcc:	b002      	add	sp, #8
 8005bce:	bd70      	pop	{r4, r5, r6, pc}
 8005bd0:	ab01      	add	r3, sp, #4
 8005bd2:	466a      	mov	r2, sp
 8005bd4:	f7ff ffc9 	bl	8005b6a <__swhatbuf_r>
 8005bd8:	9900      	ldr	r1, [sp, #0]
 8005bda:	4605      	mov	r5, r0
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f000 fc45 	bl	800646c <_malloc_r>
 8005be2:	b948      	cbnz	r0, 8005bf8 <__smakebuf_r+0x44>
 8005be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005be8:	059a      	lsls	r2, r3, #22
 8005bea:	d4ef      	bmi.n	8005bcc <__smakebuf_r+0x18>
 8005bec:	f023 0303 	bic.w	r3, r3, #3
 8005bf0:	f043 0302 	orr.w	r3, r3, #2
 8005bf4:	81a3      	strh	r3, [r4, #12]
 8005bf6:	e7e3      	b.n	8005bc0 <__smakebuf_r+0xc>
 8005bf8:	4b0d      	ldr	r3, [pc, #52]	; (8005c30 <__smakebuf_r+0x7c>)
 8005bfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	6020      	str	r0, [r4, #0]
 8005c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c04:	81a3      	strh	r3, [r4, #12]
 8005c06:	9b00      	ldr	r3, [sp, #0]
 8005c08:	6163      	str	r3, [r4, #20]
 8005c0a:	9b01      	ldr	r3, [sp, #4]
 8005c0c:	6120      	str	r0, [r4, #16]
 8005c0e:	b15b      	cbz	r3, 8005c28 <__smakebuf_r+0x74>
 8005c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c14:	4630      	mov	r0, r6
 8005c16:	f000 feaf 	bl	8006978 <_isatty_r>
 8005c1a:	b128      	cbz	r0, 8005c28 <__smakebuf_r+0x74>
 8005c1c:	89a3      	ldrh	r3, [r4, #12]
 8005c1e:	f023 0303 	bic.w	r3, r3, #3
 8005c22:	f043 0301 	orr.w	r3, r3, #1
 8005c26:	81a3      	strh	r3, [r4, #12]
 8005c28:	89a0      	ldrh	r0, [r4, #12]
 8005c2a:	4305      	orrs	r5, r0
 8005c2c:	81a5      	strh	r5, [r4, #12]
 8005c2e:	e7cd      	b.n	8005bcc <__smakebuf_r+0x18>
 8005c30:	080059b9 	.word	0x080059b9

08005c34 <malloc>:
 8005c34:	4b02      	ldr	r3, [pc, #8]	; (8005c40 <malloc+0xc>)
 8005c36:	4601      	mov	r1, r0
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	f000 bc17 	b.w	800646c <_malloc_r>
 8005c3e:	bf00      	nop
 8005c40:	2000000c 	.word	0x2000000c

08005c44 <memcpy>:
 8005c44:	440a      	add	r2, r1
 8005c46:	4291      	cmp	r1, r2
 8005c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c4c:	d100      	bne.n	8005c50 <memcpy+0xc>
 8005c4e:	4770      	bx	lr
 8005c50:	b510      	push	{r4, lr}
 8005c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c5a:	4291      	cmp	r1, r2
 8005c5c:	d1f9      	bne.n	8005c52 <memcpy+0xe>
 8005c5e:	bd10      	pop	{r4, pc}

08005c60 <_Balloc>:
 8005c60:	b570      	push	{r4, r5, r6, lr}
 8005c62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c64:	4604      	mov	r4, r0
 8005c66:	460d      	mov	r5, r1
 8005c68:	b976      	cbnz	r6, 8005c88 <_Balloc+0x28>
 8005c6a:	2010      	movs	r0, #16
 8005c6c:	f7ff ffe2 	bl	8005c34 <malloc>
 8005c70:	4602      	mov	r2, r0
 8005c72:	6260      	str	r0, [r4, #36]	; 0x24
 8005c74:	b920      	cbnz	r0, 8005c80 <_Balloc+0x20>
 8005c76:	4b18      	ldr	r3, [pc, #96]	; (8005cd8 <_Balloc+0x78>)
 8005c78:	4818      	ldr	r0, [pc, #96]	; (8005cdc <_Balloc+0x7c>)
 8005c7a:	2166      	movs	r1, #102	; 0x66
 8005c7c:	f000 fe2a 	bl	80068d4 <__assert_func>
 8005c80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c84:	6006      	str	r6, [r0, #0]
 8005c86:	60c6      	str	r6, [r0, #12]
 8005c88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c8a:	68f3      	ldr	r3, [r6, #12]
 8005c8c:	b183      	cbz	r3, 8005cb0 <_Balloc+0x50>
 8005c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c96:	b9b8      	cbnz	r0, 8005cc8 <_Balloc+0x68>
 8005c98:	2101      	movs	r1, #1
 8005c9a:	fa01 f605 	lsl.w	r6, r1, r5
 8005c9e:	1d72      	adds	r2, r6, #5
 8005ca0:	0092      	lsls	r2, r2, #2
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	f000 fb60 	bl	8006368 <_calloc_r>
 8005ca8:	b160      	cbz	r0, 8005cc4 <_Balloc+0x64>
 8005caa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005cae:	e00e      	b.n	8005cce <_Balloc+0x6e>
 8005cb0:	2221      	movs	r2, #33	; 0x21
 8005cb2:	2104      	movs	r1, #4
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f000 fb57 	bl	8006368 <_calloc_r>
 8005cba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cbc:	60f0      	str	r0, [r6, #12]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e4      	bne.n	8005c8e <_Balloc+0x2e>
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	bd70      	pop	{r4, r5, r6, pc}
 8005cc8:	6802      	ldr	r2, [r0, #0]
 8005cca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005cd4:	e7f7      	b.n	8005cc6 <_Balloc+0x66>
 8005cd6:	bf00      	nop
 8005cd8:	08006b61 	.word	0x08006b61
 8005cdc:	08006c44 	.word	0x08006c44

08005ce0 <_Bfree>:
 8005ce0:	b570      	push	{r4, r5, r6, lr}
 8005ce2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005ce4:	4605      	mov	r5, r0
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	b976      	cbnz	r6, 8005d08 <_Bfree+0x28>
 8005cea:	2010      	movs	r0, #16
 8005cec:	f7ff ffa2 	bl	8005c34 <malloc>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	6268      	str	r0, [r5, #36]	; 0x24
 8005cf4:	b920      	cbnz	r0, 8005d00 <_Bfree+0x20>
 8005cf6:	4b09      	ldr	r3, [pc, #36]	; (8005d1c <_Bfree+0x3c>)
 8005cf8:	4809      	ldr	r0, [pc, #36]	; (8005d20 <_Bfree+0x40>)
 8005cfa:	218a      	movs	r1, #138	; 0x8a
 8005cfc:	f000 fdea 	bl	80068d4 <__assert_func>
 8005d00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d04:	6006      	str	r6, [r0, #0]
 8005d06:	60c6      	str	r6, [r0, #12]
 8005d08:	b13c      	cbz	r4, 8005d1a <_Bfree+0x3a>
 8005d0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d0c:	6862      	ldr	r2, [r4, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d14:	6021      	str	r1, [r4, #0]
 8005d16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d1a:	bd70      	pop	{r4, r5, r6, pc}
 8005d1c:	08006b61 	.word	0x08006b61
 8005d20:	08006c44 	.word	0x08006c44

08005d24 <__multadd>:
 8005d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d28:	690d      	ldr	r5, [r1, #16]
 8005d2a:	4607      	mov	r7, r0
 8005d2c:	460c      	mov	r4, r1
 8005d2e:	461e      	mov	r6, r3
 8005d30:	f101 0c14 	add.w	ip, r1, #20
 8005d34:	2000      	movs	r0, #0
 8005d36:	f8dc 3000 	ldr.w	r3, [ip]
 8005d3a:	b299      	uxth	r1, r3
 8005d3c:	fb02 6101 	mla	r1, r2, r1, r6
 8005d40:	0c1e      	lsrs	r6, r3, #16
 8005d42:	0c0b      	lsrs	r3, r1, #16
 8005d44:	fb02 3306 	mla	r3, r2, r6, r3
 8005d48:	b289      	uxth	r1, r1
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d50:	4285      	cmp	r5, r0
 8005d52:	f84c 1b04 	str.w	r1, [ip], #4
 8005d56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d5a:	dcec      	bgt.n	8005d36 <__multadd+0x12>
 8005d5c:	b30e      	cbz	r6, 8005da2 <__multadd+0x7e>
 8005d5e:	68a3      	ldr	r3, [r4, #8]
 8005d60:	42ab      	cmp	r3, r5
 8005d62:	dc19      	bgt.n	8005d98 <__multadd+0x74>
 8005d64:	6861      	ldr	r1, [r4, #4]
 8005d66:	4638      	mov	r0, r7
 8005d68:	3101      	adds	r1, #1
 8005d6a:	f7ff ff79 	bl	8005c60 <_Balloc>
 8005d6e:	4680      	mov	r8, r0
 8005d70:	b928      	cbnz	r0, 8005d7e <__multadd+0x5a>
 8005d72:	4602      	mov	r2, r0
 8005d74:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <__multadd+0x84>)
 8005d76:	480d      	ldr	r0, [pc, #52]	; (8005dac <__multadd+0x88>)
 8005d78:	21b5      	movs	r1, #181	; 0xb5
 8005d7a:	f000 fdab 	bl	80068d4 <__assert_func>
 8005d7e:	6922      	ldr	r2, [r4, #16]
 8005d80:	3202      	adds	r2, #2
 8005d82:	f104 010c 	add.w	r1, r4, #12
 8005d86:	0092      	lsls	r2, r2, #2
 8005d88:	300c      	adds	r0, #12
 8005d8a:	f7ff ff5b 	bl	8005c44 <memcpy>
 8005d8e:	4621      	mov	r1, r4
 8005d90:	4638      	mov	r0, r7
 8005d92:	f7ff ffa5 	bl	8005ce0 <_Bfree>
 8005d96:	4644      	mov	r4, r8
 8005d98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d9c:	3501      	adds	r5, #1
 8005d9e:	615e      	str	r6, [r3, #20]
 8005da0:	6125      	str	r5, [r4, #16]
 8005da2:	4620      	mov	r0, r4
 8005da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005da8:	08006bd3 	.word	0x08006bd3
 8005dac:	08006c44 	.word	0x08006c44

08005db0 <__hi0bits>:
 8005db0:	0c03      	lsrs	r3, r0, #16
 8005db2:	041b      	lsls	r3, r3, #16
 8005db4:	b9d3      	cbnz	r3, 8005dec <__hi0bits+0x3c>
 8005db6:	0400      	lsls	r0, r0, #16
 8005db8:	2310      	movs	r3, #16
 8005dba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005dbe:	bf04      	itt	eq
 8005dc0:	0200      	lsleq	r0, r0, #8
 8005dc2:	3308      	addeq	r3, #8
 8005dc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005dc8:	bf04      	itt	eq
 8005dca:	0100      	lsleq	r0, r0, #4
 8005dcc:	3304      	addeq	r3, #4
 8005dce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005dd2:	bf04      	itt	eq
 8005dd4:	0080      	lsleq	r0, r0, #2
 8005dd6:	3302      	addeq	r3, #2
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	db05      	blt.n	8005de8 <__hi0bits+0x38>
 8005ddc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005de0:	f103 0301 	add.w	r3, r3, #1
 8005de4:	bf08      	it	eq
 8005de6:	2320      	moveq	r3, #32
 8005de8:	4618      	mov	r0, r3
 8005dea:	4770      	bx	lr
 8005dec:	2300      	movs	r3, #0
 8005dee:	e7e4      	b.n	8005dba <__hi0bits+0xa>

08005df0 <__lo0bits>:
 8005df0:	6803      	ldr	r3, [r0, #0]
 8005df2:	f013 0207 	ands.w	r2, r3, #7
 8005df6:	4601      	mov	r1, r0
 8005df8:	d00b      	beq.n	8005e12 <__lo0bits+0x22>
 8005dfa:	07da      	lsls	r2, r3, #31
 8005dfc:	d423      	bmi.n	8005e46 <__lo0bits+0x56>
 8005dfe:	0798      	lsls	r0, r3, #30
 8005e00:	bf49      	itett	mi
 8005e02:	085b      	lsrmi	r3, r3, #1
 8005e04:	089b      	lsrpl	r3, r3, #2
 8005e06:	2001      	movmi	r0, #1
 8005e08:	600b      	strmi	r3, [r1, #0]
 8005e0a:	bf5c      	itt	pl
 8005e0c:	600b      	strpl	r3, [r1, #0]
 8005e0e:	2002      	movpl	r0, #2
 8005e10:	4770      	bx	lr
 8005e12:	b298      	uxth	r0, r3
 8005e14:	b9a8      	cbnz	r0, 8005e42 <__lo0bits+0x52>
 8005e16:	0c1b      	lsrs	r3, r3, #16
 8005e18:	2010      	movs	r0, #16
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	b90a      	cbnz	r2, 8005e22 <__lo0bits+0x32>
 8005e1e:	3008      	adds	r0, #8
 8005e20:	0a1b      	lsrs	r3, r3, #8
 8005e22:	071a      	lsls	r2, r3, #28
 8005e24:	bf04      	itt	eq
 8005e26:	091b      	lsreq	r3, r3, #4
 8005e28:	3004      	addeq	r0, #4
 8005e2a:	079a      	lsls	r2, r3, #30
 8005e2c:	bf04      	itt	eq
 8005e2e:	089b      	lsreq	r3, r3, #2
 8005e30:	3002      	addeq	r0, #2
 8005e32:	07da      	lsls	r2, r3, #31
 8005e34:	d403      	bmi.n	8005e3e <__lo0bits+0x4e>
 8005e36:	085b      	lsrs	r3, r3, #1
 8005e38:	f100 0001 	add.w	r0, r0, #1
 8005e3c:	d005      	beq.n	8005e4a <__lo0bits+0x5a>
 8005e3e:	600b      	str	r3, [r1, #0]
 8005e40:	4770      	bx	lr
 8005e42:	4610      	mov	r0, r2
 8005e44:	e7e9      	b.n	8005e1a <__lo0bits+0x2a>
 8005e46:	2000      	movs	r0, #0
 8005e48:	4770      	bx	lr
 8005e4a:	2020      	movs	r0, #32
 8005e4c:	4770      	bx	lr
	...

08005e50 <__i2b>:
 8005e50:	b510      	push	{r4, lr}
 8005e52:	460c      	mov	r4, r1
 8005e54:	2101      	movs	r1, #1
 8005e56:	f7ff ff03 	bl	8005c60 <_Balloc>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	b928      	cbnz	r0, 8005e6a <__i2b+0x1a>
 8005e5e:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <__i2b+0x24>)
 8005e60:	4805      	ldr	r0, [pc, #20]	; (8005e78 <__i2b+0x28>)
 8005e62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005e66:	f000 fd35 	bl	80068d4 <__assert_func>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	6144      	str	r4, [r0, #20]
 8005e6e:	6103      	str	r3, [r0, #16]
 8005e70:	bd10      	pop	{r4, pc}
 8005e72:	bf00      	nop
 8005e74:	08006bd3 	.word	0x08006bd3
 8005e78:	08006c44 	.word	0x08006c44

08005e7c <__multiply>:
 8005e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e80:	4691      	mov	r9, r2
 8005e82:	690a      	ldr	r2, [r1, #16]
 8005e84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	bfb8      	it	lt
 8005e8c:	460b      	movlt	r3, r1
 8005e8e:	460c      	mov	r4, r1
 8005e90:	bfbc      	itt	lt
 8005e92:	464c      	movlt	r4, r9
 8005e94:	4699      	movlt	r9, r3
 8005e96:	6927      	ldr	r7, [r4, #16]
 8005e98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005e9c:	68a3      	ldr	r3, [r4, #8]
 8005e9e:	6861      	ldr	r1, [r4, #4]
 8005ea0:	eb07 060a 	add.w	r6, r7, sl
 8005ea4:	42b3      	cmp	r3, r6
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	bfb8      	it	lt
 8005eaa:	3101      	addlt	r1, #1
 8005eac:	f7ff fed8 	bl	8005c60 <_Balloc>
 8005eb0:	b930      	cbnz	r0, 8005ec0 <__multiply+0x44>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	4b44      	ldr	r3, [pc, #272]	; (8005fc8 <__multiply+0x14c>)
 8005eb6:	4845      	ldr	r0, [pc, #276]	; (8005fcc <__multiply+0x150>)
 8005eb8:	f240 115d 	movw	r1, #349	; 0x15d
 8005ebc:	f000 fd0a 	bl	80068d4 <__assert_func>
 8005ec0:	f100 0514 	add.w	r5, r0, #20
 8005ec4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ec8:	462b      	mov	r3, r5
 8005eca:	2200      	movs	r2, #0
 8005ecc:	4543      	cmp	r3, r8
 8005ece:	d321      	bcc.n	8005f14 <__multiply+0x98>
 8005ed0:	f104 0314 	add.w	r3, r4, #20
 8005ed4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005ed8:	f109 0314 	add.w	r3, r9, #20
 8005edc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005ee0:	9202      	str	r2, [sp, #8]
 8005ee2:	1b3a      	subs	r2, r7, r4
 8005ee4:	3a15      	subs	r2, #21
 8005ee6:	f022 0203 	bic.w	r2, r2, #3
 8005eea:	3204      	adds	r2, #4
 8005eec:	f104 0115 	add.w	r1, r4, #21
 8005ef0:	428f      	cmp	r7, r1
 8005ef2:	bf38      	it	cc
 8005ef4:	2204      	movcc	r2, #4
 8005ef6:	9201      	str	r2, [sp, #4]
 8005ef8:	9a02      	ldr	r2, [sp, #8]
 8005efa:	9303      	str	r3, [sp, #12]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d80c      	bhi.n	8005f1a <__multiply+0x9e>
 8005f00:	2e00      	cmp	r6, #0
 8005f02:	dd03      	ble.n	8005f0c <__multiply+0x90>
 8005f04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d05a      	beq.n	8005fc2 <__multiply+0x146>
 8005f0c:	6106      	str	r6, [r0, #16]
 8005f0e:	b005      	add	sp, #20
 8005f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f14:	f843 2b04 	str.w	r2, [r3], #4
 8005f18:	e7d8      	b.n	8005ecc <__multiply+0x50>
 8005f1a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f1e:	f1ba 0f00 	cmp.w	sl, #0
 8005f22:	d024      	beq.n	8005f6e <__multiply+0xf2>
 8005f24:	f104 0e14 	add.w	lr, r4, #20
 8005f28:	46a9      	mov	r9, r5
 8005f2a:	f04f 0c00 	mov.w	ip, #0
 8005f2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005f32:	f8d9 1000 	ldr.w	r1, [r9]
 8005f36:	fa1f fb82 	uxth.w	fp, r2
 8005f3a:	b289      	uxth	r1, r1
 8005f3c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005f40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005f44:	f8d9 2000 	ldr.w	r2, [r9]
 8005f48:	4461      	add	r1, ip
 8005f4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f4e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005f52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005f56:	b289      	uxth	r1, r1
 8005f58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005f5c:	4577      	cmp	r7, lr
 8005f5e:	f849 1b04 	str.w	r1, [r9], #4
 8005f62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f66:	d8e2      	bhi.n	8005f2e <__multiply+0xb2>
 8005f68:	9a01      	ldr	r2, [sp, #4]
 8005f6a:	f845 c002 	str.w	ip, [r5, r2]
 8005f6e:	9a03      	ldr	r2, [sp, #12]
 8005f70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005f74:	3304      	adds	r3, #4
 8005f76:	f1b9 0f00 	cmp.w	r9, #0
 8005f7a:	d020      	beq.n	8005fbe <__multiply+0x142>
 8005f7c:	6829      	ldr	r1, [r5, #0]
 8005f7e:	f104 0c14 	add.w	ip, r4, #20
 8005f82:	46ae      	mov	lr, r5
 8005f84:	f04f 0a00 	mov.w	sl, #0
 8005f88:	f8bc b000 	ldrh.w	fp, [ip]
 8005f8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005f90:	fb09 220b 	mla	r2, r9, fp, r2
 8005f94:	4492      	add	sl, r2
 8005f96:	b289      	uxth	r1, r1
 8005f98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005f9c:	f84e 1b04 	str.w	r1, [lr], #4
 8005fa0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005fa4:	f8be 1000 	ldrh.w	r1, [lr]
 8005fa8:	0c12      	lsrs	r2, r2, #16
 8005faa:	fb09 1102 	mla	r1, r9, r2, r1
 8005fae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005fb2:	4567      	cmp	r7, ip
 8005fb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005fb8:	d8e6      	bhi.n	8005f88 <__multiply+0x10c>
 8005fba:	9a01      	ldr	r2, [sp, #4]
 8005fbc:	50a9      	str	r1, [r5, r2]
 8005fbe:	3504      	adds	r5, #4
 8005fc0:	e79a      	b.n	8005ef8 <__multiply+0x7c>
 8005fc2:	3e01      	subs	r6, #1
 8005fc4:	e79c      	b.n	8005f00 <__multiply+0x84>
 8005fc6:	bf00      	nop
 8005fc8:	08006bd3 	.word	0x08006bd3
 8005fcc:	08006c44 	.word	0x08006c44

08005fd0 <__pow5mult>:
 8005fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fd4:	4615      	mov	r5, r2
 8005fd6:	f012 0203 	ands.w	r2, r2, #3
 8005fda:	4606      	mov	r6, r0
 8005fdc:	460f      	mov	r7, r1
 8005fde:	d007      	beq.n	8005ff0 <__pow5mult+0x20>
 8005fe0:	4c25      	ldr	r4, [pc, #148]	; (8006078 <__pow5mult+0xa8>)
 8005fe2:	3a01      	subs	r2, #1
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005fea:	f7ff fe9b 	bl	8005d24 <__multadd>
 8005fee:	4607      	mov	r7, r0
 8005ff0:	10ad      	asrs	r5, r5, #2
 8005ff2:	d03d      	beq.n	8006070 <__pow5mult+0xa0>
 8005ff4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005ff6:	b97c      	cbnz	r4, 8006018 <__pow5mult+0x48>
 8005ff8:	2010      	movs	r0, #16
 8005ffa:	f7ff fe1b 	bl	8005c34 <malloc>
 8005ffe:	4602      	mov	r2, r0
 8006000:	6270      	str	r0, [r6, #36]	; 0x24
 8006002:	b928      	cbnz	r0, 8006010 <__pow5mult+0x40>
 8006004:	4b1d      	ldr	r3, [pc, #116]	; (800607c <__pow5mult+0xac>)
 8006006:	481e      	ldr	r0, [pc, #120]	; (8006080 <__pow5mult+0xb0>)
 8006008:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800600c:	f000 fc62 	bl	80068d4 <__assert_func>
 8006010:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006014:	6004      	str	r4, [r0, #0]
 8006016:	60c4      	str	r4, [r0, #12]
 8006018:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800601c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006020:	b94c      	cbnz	r4, 8006036 <__pow5mult+0x66>
 8006022:	f240 2171 	movw	r1, #625	; 0x271
 8006026:	4630      	mov	r0, r6
 8006028:	f7ff ff12 	bl	8005e50 <__i2b>
 800602c:	2300      	movs	r3, #0
 800602e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006032:	4604      	mov	r4, r0
 8006034:	6003      	str	r3, [r0, #0]
 8006036:	f04f 0900 	mov.w	r9, #0
 800603a:	07eb      	lsls	r3, r5, #31
 800603c:	d50a      	bpl.n	8006054 <__pow5mult+0x84>
 800603e:	4639      	mov	r1, r7
 8006040:	4622      	mov	r2, r4
 8006042:	4630      	mov	r0, r6
 8006044:	f7ff ff1a 	bl	8005e7c <__multiply>
 8006048:	4639      	mov	r1, r7
 800604a:	4680      	mov	r8, r0
 800604c:	4630      	mov	r0, r6
 800604e:	f7ff fe47 	bl	8005ce0 <_Bfree>
 8006052:	4647      	mov	r7, r8
 8006054:	106d      	asrs	r5, r5, #1
 8006056:	d00b      	beq.n	8006070 <__pow5mult+0xa0>
 8006058:	6820      	ldr	r0, [r4, #0]
 800605a:	b938      	cbnz	r0, 800606c <__pow5mult+0x9c>
 800605c:	4622      	mov	r2, r4
 800605e:	4621      	mov	r1, r4
 8006060:	4630      	mov	r0, r6
 8006062:	f7ff ff0b 	bl	8005e7c <__multiply>
 8006066:	6020      	str	r0, [r4, #0]
 8006068:	f8c0 9000 	str.w	r9, [r0]
 800606c:	4604      	mov	r4, r0
 800606e:	e7e4      	b.n	800603a <__pow5mult+0x6a>
 8006070:	4638      	mov	r0, r7
 8006072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006076:	bf00      	nop
 8006078:	08006d90 	.word	0x08006d90
 800607c:	08006b61 	.word	0x08006b61
 8006080:	08006c44 	.word	0x08006c44

08006084 <__lshift>:
 8006084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006088:	460c      	mov	r4, r1
 800608a:	6849      	ldr	r1, [r1, #4]
 800608c:	6923      	ldr	r3, [r4, #16]
 800608e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006092:	68a3      	ldr	r3, [r4, #8]
 8006094:	4607      	mov	r7, r0
 8006096:	4691      	mov	r9, r2
 8006098:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800609c:	f108 0601 	add.w	r6, r8, #1
 80060a0:	42b3      	cmp	r3, r6
 80060a2:	db0b      	blt.n	80060bc <__lshift+0x38>
 80060a4:	4638      	mov	r0, r7
 80060a6:	f7ff fddb 	bl	8005c60 <_Balloc>
 80060aa:	4605      	mov	r5, r0
 80060ac:	b948      	cbnz	r0, 80060c2 <__lshift+0x3e>
 80060ae:	4602      	mov	r2, r0
 80060b0:	4b2a      	ldr	r3, [pc, #168]	; (800615c <__lshift+0xd8>)
 80060b2:	482b      	ldr	r0, [pc, #172]	; (8006160 <__lshift+0xdc>)
 80060b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80060b8:	f000 fc0c 	bl	80068d4 <__assert_func>
 80060bc:	3101      	adds	r1, #1
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	e7ee      	b.n	80060a0 <__lshift+0x1c>
 80060c2:	2300      	movs	r3, #0
 80060c4:	f100 0114 	add.w	r1, r0, #20
 80060c8:	f100 0210 	add.w	r2, r0, #16
 80060cc:	4618      	mov	r0, r3
 80060ce:	4553      	cmp	r3, sl
 80060d0:	db37      	blt.n	8006142 <__lshift+0xbe>
 80060d2:	6920      	ldr	r0, [r4, #16]
 80060d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060d8:	f104 0314 	add.w	r3, r4, #20
 80060dc:	f019 091f 	ands.w	r9, r9, #31
 80060e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80060e8:	d02f      	beq.n	800614a <__lshift+0xc6>
 80060ea:	f1c9 0e20 	rsb	lr, r9, #32
 80060ee:	468a      	mov	sl, r1
 80060f0:	f04f 0c00 	mov.w	ip, #0
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	fa02 f209 	lsl.w	r2, r2, r9
 80060fa:	ea42 020c 	orr.w	r2, r2, ip
 80060fe:	f84a 2b04 	str.w	r2, [sl], #4
 8006102:	f853 2b04 	ldr.w	r2, [r3], #4
 8006106:	4298      	cmp	r0, r3
 8006108:	fa22 fc0e 	lsr.w	ip, r2, lr
 800610c:	d8f2      	bhi.n	80060f4 <__lshift+0x70>
 800610e:	1b03      	subs	r3, r0, r4
 8006110:	3b15      	subs	r3, #21
 8006112:	f023 0303 	bic.w	r3, r3, #3
 8006116:	3304      	adds	r3, #4
 8006118:	f104 0215 	add.w	r2, r4, #21
 800611c:	4290      	cmp	r0, r2
 800611e:	bf38      	it	cc
 8006120:	2304      	movcc	r3, #4
 8006122:	f841 c003 	str.w	ip, [r1, r3]
 8006126:	f1bc 0f00 	cmp.w	ip, #0
 800612a:	d001      	beq.n	8006130 <__lshift+0xac>
 800612c:	f108 0602 	add.w	r6, r8, #2
 8006130:	3e01      	subs	r6, #1
 8006132:	4638      	mov	r0, r7
 8006134:	612e      	str	r6, [r5, #16]
 8006136:	4621      	mov	r1, r4
 8006138:	f7ff fdd2 	bl	8005ce0 <_Bfree>
 800613c:	4628      	mov	r0, r5
 800613e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006142:	f842 0f04 	str.w	r0, [r2, #4]!
 8006146:	3301      	adds	r3, #1
 8006148:	e7c1      	b.n	80060ce <__lshift+0x4a>
 800614a:	3904      	subs	r1, #4
 800614c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006150:	f841 2f04 	str.w	r2, [r1, #4]!
 8006154:	4298      	cmp	r0, r3
 8006156:	d8f9      	bhi.n	800614c <__lshift+0xc8>
 8006158:	e7ea      	b.n	8006130 <__lshift+0xac>
 800615a:	bf00      	nop
 800615c:	08006bd3 	.word	0x08006bd3
 8006160:	08006c44 	.word	0x08006c44

08006164 <__mcmp>:
 8006164:	b530      	push	{r4, r5, lr}
 8006166:	6902      	ldr	r2, [r0, #16]
 8006168:	690c      	ldr	r4, [r1, #16]
 800616a:	1b12      	subs	r2, r2, r4
 800616c:	d10e      	bne.n	800618c <__mcmp+0x28>
 800616e:	f100 0314 	add.w	r3, r0, #20
 8006172:	3114      	adds	r1, #20
 8006174:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006178:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800617c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006180:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006184:	42a5      	cmp	r5, r4
 8006186:	d003      	beq.n	8006190 <__mcmp+0x2c>
 8006188:	d305      	bcc.n	8006196 <__mcmp+0x32>
 800618a:	2201      	movs	r2, #1
 800618c:	4610      	mov	r0, r2
 800618e:	bd30      	pop	{r4, r5, pc}
 8006190:	4283      	cmp	r3, r0
 8006192:	d3f3      	bcc.n	800617c <__mcmp+0x18>
 8006194:	e7fa      	b.n	800618c <__mcmp+0x28>
 8006196:	f04f 32ff 	mov.w	r2, #4294967295
 800619a:	e7f7      	b.n	800618c <__mcmp+0x28>

0800619c <__mdiff>:
 800619c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a0:	460c      	mov	r4, r1
 80061a2:	4606      	mov	r6, r0
 80061a4:	4611      	mov	r1, r2
 80061a6:	4620      	mov	r0, r4
 80061a8:	4690      	mov	r8, r2
 80061aa:	f7ff ffdb 	bl	8006164 <__mcmp>
 80061ae:	1e05      	subs	r5, r0, #0
 80061b0:	d110      	bne.n	80061d4 <__mdiff+0x38>
 80061b2:	4629      	mov	r1, r5
 80061b4:	4630      	mov	r0, r6
 80061b6:	f7ff fd53 	bl	8005c60 <_Balloc>
 80061ba:	b930      	cbnz	r0, 80061ca <__mdiff+0x2e>
 80061bc:	4b3a      	ldr	r3, [pc, #232]	; (80062a8 <__mdiff+0x10c>)
 80061be:	4602      	mov	r2, r0
 80061c0:	f240 2132 	movw	r1, #562	; 0x232
 80061c4:	4839      	ldr	r0, [pc, #228]	; (80062ac <__mdiff+0x110>)
 80061c6:	f000 fb85 	bl	80068d4 <__assert_func>
 80061ca:	2301      	movs	r3, #1
 80061cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80061d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d4:	bfa4      	itt	ge
 80061d6:	4643      	movge	r3, r8
 80061d8:	46a0      	movge	r8, r4
 80061da:	4630      	mov	r0, r6
 80061dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80061e0:	bfa6      	itte	ge
 80061e2:	461c      	movge	r4, r3
 80061e4:	2500      	movge	r5, #0
 80061e6:	2501      	movlt	r5, #1
 80061e8:	f7ff fd3a 	bl	8005c60 <_Balloc>
 80061ec:	b920      	cbnz	r0, 80061f8 <__mdiff+0x5c>
 80061ee:	4b2e      	ldr	r3, [pc, #184]	; (80062a8 <__mdiff+0x10c>)
 80061f0:	4602      	mov	r2, r0
 80061f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80061f6:	e7e5      	b.n	80061c4 <__mdiff+0x28>
 80061f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80061fc:	6926      	ldr	r6, [r4, #16]
 80061fe:	60c5      	str	r5, [r0, #12]
 8006200:	f104 0914 	add.w	r9, r4, #20
 8006204:	f108 0514 	add.w	r5, r8, #20
 8006208:	f100 0e14 	add.w	lr, r0, #20
 800620c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006210:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006214:	f108 0210 	add.w	r2, r8, #16
 8006218:	46f2      	mov	sl, lr
 800621a:	2100      	movs	r1, #0
 800621c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006220:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006224:	fa1f f883 	uxth.w	r8, r3
 8006228:	fa11 f18b 	uxtah	r1, r1, fp
 800622c:	0c1b      	lsrs	r3, r3, #16
 800622e:	eba1 0808 	sub.w	r8, r1, r8
 8006232:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006236:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800623a:	fa1f f888 	uxth.w	r8, r8
 800623e:	1419      	asrs	r1, r3, #16
 8006240:	454e      	cmp	r6, r9
 8006242:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006246:	f84a 3b04 	str.w	r3, [sl], #4
 800624a:	d8e7      	bhi.n	800621c <__mdiff+0x80>
 800624c:	1b33      	subs	r3, r6, r4
 800624e:	3b15      	subs	r3, #21
 8006250:	f023 0303 	bic.w	r3, r3, #3
 8006254:	3304      	adds	r3, #4
 8006256:	3415      	adds	r4, #21
 8006258:	42a6      	cmp	r6, r4
 800625a:	bf38      	it	cc
 800625c:	2304      	movcc	r3, #4
 800625e:	441d      	add	r5, r3
 8006260:	4473      	add	r3, lr
 8006262:	469e      	mov	lr, r3
 8006264:	462e      	mov	r6, r5
 8006266:	4566      	cmp	r6, ip
 8006268:	d30e      	bcc.n	8006288 <__mdiff+0xec>
 800626a:	f10c 0203 	add.w	r2, ip, #3
 800626e:	1b52      	subs	r2, r2, r5
 8006270:	f022 0203 	bic.w	r2, r2, #3
 8006274:	3d03      	subs	r5, #3
 8006276:	45ac      	cmp	ip, r5
 8006278:	bf38      	it	cc
 800627a:	2200      	movcc	r2, #0
 800627c:	441a      	add	r2, r3
 800627e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006282:	b17b      	cbz	r3, 80062a4 <__mdiff+0x108>
 8006284:	6107      	str	r7, [r0, #16]
 8006286:	e7a3      	b.n	80061d0 <__mdiff+0x34>
 8006288:	f856 8b04 	ldr.w	r8, [r6], #4
 800628c:	fa11 f288 	uxtah	r2, r1, r8
 8006290:	1414      	asrs	r4, r2, #16
 8006292:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006296:	b292      	uxth	r2, r2
 8006298:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800629c:	f84e 2b04 	str.w	r2, [lr], #4
 80062a0:	1421      	asrs	r1, r4, #16
 80062a2:	e7e0      	b.n	8006266 <__mdiff+0xca>
 80062a4:	3f01      	subs	r7, #1
 80062a6:	e7ea      	b.n	800627e <__mdiff+0xe2>
 80062a8:	08006bd3 	.word	0x08006bd3
 80062ac:	08006c44 	.word	0x08006c44

080062b0 <__d2b>:
 80062b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80062b4:	4689      	mov	r9, r1
 80062b6:	2101      	movs	r1, #1
 80062b8:	ec57 6b10 	vmov	r6, r7, d0
 80062bc:	4690      	mov	r8, r2
 80062be:	f7ff fccf 	bl	8005c60 <_Balloc>
 80062c2:	4604      	mov	r4, r0
 80062c4:	b930      	cbnz	r0, 80062d4 <__d2b+0x24>
 80062c6:	4602      	mov	r2, r0
 80062c8:	4b25      	ldr	r3, [pc, #148]	; (8006360 <__d2b+0xb0>)
 80062ca:	4826      	ldr	r0, [pc, #152]	; (8006364 <__d2b+0xb4>)
 80062cc:	f240 310a 	movw	r1, #778	; 0x30a
 80062d0:	f000 fb00 	bl	80068d4 <__assert_func>
 80062d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80062d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80062dc:	bb35      	cbnz	r5, 800632c <__d2b+0x7c>
 80062de:	2e00      	cmp	r6, #0
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	d028      	beq.n	8006336 <__d2b+0x86>
 80062e4:	4668      	mov	r0, sp
 80062e6:	9600      	str	r6, [sp, #0]
 80062e8:	f7ff fd82 	bl	8005df0 <__lo0bits>
 80062ec:	9900      	ldr	r1, [sp, #0]
 80062ee:	b300      	cbz	r0, 8006332 <__d2b+0x82>
 80062f0:	9a01      	ldr	r2, [sp, #4]
 80062f2:	f1c0 0320 	rsb	r3, r0, #32
 80062f6:	fa02 f303 	lsl.w	r3, r2, r3
 80062fa:	430b      	orrs	r3, r1
 80062fc:	40c2      	lsrs	r2, r0
 80062fe:	6163      	str	r3, [r4, #20]
 8006300:	9201      	str	r2, [sp, #4]
 8006302:	9b01      	ldr	r3, [sp, #4]
 8006304:	61a3      	str	r3, [r4, #24]
 8006306:	2b00      	cmp	r3, #0
 8006308:	bf14      	ite	ne
 800630a:	2202      	movne	r2, #2
 800630c:	2201      	moveq	r2, #1
 800630e:	6122      	str	r2, [r4, #16]
 8006310:	b1d5      	cbz	r5, 8006348 <__d2b+0x98>
 8006312:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006316:	4405      	add	r5, r0
 8006318:	f8c9 5000 	str.w	r5, [r9]
 800631c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006320:	f8c8 0000 	str.w	r0, [r8]
 8006324:	4620      	mov	r0, r4
 8006326:	b003      	add	sp, #12
 8006328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800632c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006330:	e7d5      	b.n	80062de <__d2b+0x2e>
 8006332:	6161      	str	r1, [r4, #20]
 8006334:	e7e5      	b.n	8006302 <__d2b+0x52>
 8006336:	a801      	add	r0, sp, #4
 8006338:	f7ff fd5a 	bl	8005df0 <__lo0bits>
 800633c:	9b01      	ldr	r3, [sp, #4]
 800633e:	6163      	str	r3, [r4, #20]
 8006340:	2201      	movs	r2, #1
 8006342:	6122      	str	r2, [r4, #16]
 8006344:	3020      	adds	r0, #32
 8006346:	e7e3      	b.n	8006310 <__d2b+0x60>
 8006348:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800634c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006350:	f8c9 0000 	str.w	r0, [r9]
 8006354:	6918      	ldr	r0, [r3, #16]
 8006356:	f7ff fd2b 	bl	8005db0 <__hi0bits>
 800635a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800635e:	e7df      	b.n	8006320 <__d2b+0x70>
 8006360:	08006bd3 	.word	0x08006bd3
 8006364:	08006c44 	.word	0x08006c44

08006368 <_calloc_r>:
 8006368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800636a:	fba1 2402 	umull	r2, r4, r1, r2
 800636e:	b94c      	cbnz	r4, 8006384 <_calloc_r+0x1c>
 8006370:	4611      	mov	r1, r2
 8006372:	9201      	str	r2, [sp, #4]
 8006374:	f000 f87a 	bl	800646c <_malloc_r>
 8006378:	9a01      	ldr	r2, [sp, #4]
 800637a:	4605      	mov	r5, r0
 800637c:	b930      	cbnz	r0, 800638c <_calloc_r+0x24>
 800637e:	4628      	mov	r0, r5
 8006380:	b003      	add	sp, #12
 8006382:	bd30      	pop	{r4, r5, pc}
 8006384:	220c      	movs	r2, #12
 8006386:	6002      	str	r2, [r0, #0]
 8006388:	2500      	movs	r5, #0
 800638a:	e7f8      	b.n	800637e <_calloc_r+0x16>
 800638c:	4621      	mov	r1, r4
 800638e:	f7fd fdf3 	bl	8003f78 <memset>
 8006392:	e7f4      	b.n	800637e <_calloc_r+0x16>

08006394 <_free_r>:
 8006394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006396:	2900      	cmp	r1, #0
 8006398:	d044      	beq.n	8006424 <_free_r+0x90>
 800639a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800639e:	9001      	str	r0, [sp, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f1a1 0404 	sub.w	r4, r1, #4
 80063a6:	bfb8      	it	lt
 80063a8:	18e4      	addlt	r4, r4, r3
 80063aa:	f000 fb19 	bl	80069e0 <__malloc_lock>
 80063ae:	4a1e      	ldr	r2, [pc, #120]	; (8006428 <_free_r+0x94>)
 80063b0:	9801      	ldr	r0, [sp, #4]
 80063b2:	6813      	ldr	r3, [r2, #0]
 80063b4:	b933      	cbnz	r3, 80063c4 <_free_r+0x30>
 80063b6:	6063      	str	r3, [r4, #4]
 80063b8:	6014      	str	r4, [r2, #0]
 80063ba:	b003      	add	sp, #12
 80063bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063c0:	f000 bb14 	b.w	80069ec <__malloc_unlock>
 80063c4:	42a3      	cmp	r3, r4
 80063c6:	d908      	bls.n	80063da <_free_r+0x46>
 80063c8:	6825      	ldr	r5, [r4, #0]
 80063ca:	1961      	adds	r1, r4, r5
 80063cc:	428b      	cmp	r3, r1
 80063ce:	bf01      	itttt	eq
 80063d0:	6819      	ldreq	r1, [r3, #0]
 80063d2:	685b      	ldreq	r3, [r3, #4]
 80063d4:	1949      	addeq	r1, r1, r5
 80063d6:	6021      	streq	r1, [r4, #0]
 80063d8:	e7ed      	b.n	80063b6 <_free_r+0x22>
 80063da:	461a      	mov	r2, r3
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	b10b      	cbz	r3, 80063e4 <_free_r+0x50>
 80063e0:	42a3      	cmp	r3, r4
 80063e2:	d9fa      	bls.n	80063da <_free_r+0x46>
 80063e4:	6811      	ldr	r1, [r2, #0]
 80063e6:	1855      	adds	r5, r2, r1
 80063e8:	42a5      	cmp	r5, r4
 80063ea:	d10b      	bne.n	8006404 <_free_r+0x70>
 80063ec:	6824      	ldr	r4, [r4, #0]
 80063ee:	4421      	add	r1, r4
 80063f0:	1854      	adds	r4, r2, r1
 80063f2:	42a3      	cmp	r3, r4
 80063f4:	6011      	str	r1, [r2, #0]
 80063f6:	d1e0      	bne.n	80063ba <_free_r+0x26>
 80063f8:	681c      	ldr	r4, [r3, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	6053      	str	r3, [r2, #4]
 80063fe:	4421      	add	r1, r4
 8006400:	6011      	str	r1, [r2, #0]
 8006402:	e7da      	b.n	80063ba <_free_r+0x26>
 8006404:	d902      	bls.n	800640c <_free_r+0x78>
 8006406:	230c      	movs	r3, #12
 8006408:	6003      	str	r3, [r0, #0]
 800640a:	e7d6      	b.n	80063ba <_free_r+0x26>
 800640c:	6825      	ldr	r5, [r4, #0]
 800640e:	1961      	adds	r1, r4, r5
 8006410:	428b      	cmp	r3, r1
 8006412:	bf04      	itt	eq
 8006414:	6819      	ldreq	r1, [r3, #0]
 8006416:	685b      	ldreq	r3, [r3, #4]
 8006418:	6063      	str	r3, [r4, #4]
 800641a:	bf04      	itt	eq
 800641c:	1949      	addeq	r1, r1, r5
 800641e:	6021      	streq	r1, [r4, #0]
 8006420:	6054      	str	r4, [r2, #4]
 8006422:	e7ca      	b.n	80063ba <_free_r+0x26>
 8006424:	b003      	add	sp, #12
 8006426:	bd30      	pop	{r4, r5, pc}
 8006428:	20000754 	.word	0x20000754

0800642c <sbrk_aligned>:
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	4e0e      	ldr	r6, [pc, #56]	; (8006468 <sbrk_aligned+0x3c>)
 8006430:	460c      	mov	r4, r1
 8006432:	6831      	ldr	r1, [r6, #0]
 8006434:	4605      	mov	r5, r0
 8006436:	b911      	cbnz	r1, 800643e <sbrk_aligned+0x12>
 8006438:	f000 f9e6 	bl	8006808 <_sbrk_r>
 800643c:	6030      	str	r0, [r6, #0]
 800643e:	4621      	mov	r1, r4
 8006440:	4628      	mov	r0, r5
 8006442:	f000 f9e1 	bl	8006808 <_sbrk_r>
 8006446:	1c43      	adds	r3, r0, #1
 8006448:	d00a      	beq.n	8006460 <sbrk_aligned+0x34>
 800644a:	1cc4      	adds	r4, r0, #3
 800644c:	f024 0403 	bic.w	r4, r4, #3
 8006450:	42a0      	cmp	r0, r4
 8006452:	d007      	beq.n	8006464 <sbrk_aligned+0x38>
 8006454:	1a21      	subs	r1, r4, r0
 8006456:	4628      	mov	r0, r5
 8006458:	f000 f9d6 	bl	8006808 <_sbrk_r>
 800645c:	3001      	adds	r0, #1
 800645e:	d101      	bne.n	8006464 <sbrk_aligned+0x38>
 8006460:	f04f 34ff 	mov.w	r4, #4294967295
 8006464:	4620      	mov	r0, r4
 8006466:	bd70      	pop	{r4, r5, r6, pc}
 8006468:	20000758 	.word	0x20000758

0800646c <_malloc_r>:
 800646c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006470:	1ccd      	adds	r5, r1, #3
 8006472:	f025 0503 	bic.w	r5, r5, #3
 8006476:	3508      	adds	r5, #8
 8006478:	2d0c      	cmp	r5, #12
 800647a:	bf38      	it	cc
 800647c:	250c      	movcc	r5, #12
 800647e:	2d00      	cmp	r5, #0
 8006480:	4607      	mov	r7, r0
 8006482:	db01      	blt.n	8006488 <_malloc_r+0x1c>
 8006484:	42a9      	cmp	r1, r5
 8006486:	d905      	bls.n	8006494 <_malloc_r+0x28>
 8006488:	230c      	movs	r3, #12
 800648a:	603b      	str	r3, [r7, #0]
 800648c:	2600      	movs	r6, #0
 800648e:	4630      	mov	r0, r6
 8006490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006494:	4e2e      	ldr	r6, [pc, #184]	; (8006550 <_malloc_r+0xe4>)
 8006496:	f000 faa3 	bl	80069e0 <__malloc_lock>
 800649a:	6833      	ldr	r3, [r6, #0]
 800649c:	461c      	mov	r4, r3
 800649e:	bb34      	cbnz	r4, 80064ee <_malloc_r+0x82>
 80064a0:	4629      	mov	r1, r5
 80064a2:	4638      	mov	r0, r7
 80064a4:	f7ff ffc2 	bl	800642c <sbrk_aligned>
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	4604      	mov	r4, r0
 80064ac:	d14d      	bne.n	800654a <_malloc_r+0xde>
 80064ae:	6834      	ldr	r4, [r6, #0]
 80064b0:	4626      	mov	r6, r4
 80064b2:	2e00      	cmp	r6, #0
 80064b4:	d140      	bne.n	8006538 <_malloc_r+0xcc>
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	4631      	mov	r1, r6
 80064ba:	4638      	mov	r0, r7
 80064bc:	eb04 0803 	add.w	r8, r4, r3
 80064c0:	f000 f9a2 	bl	8006808 <_sbrk_r>
 80064c4:	4580      	cmp	r8, r0
 80064c6:	d13a      	bne.n	800653e <_malloc_r+0xd2>
 80064c8:	6821      	ldr	r1, [r4, #0]
 80064ca:	3503      	adds	r5, #3
 80064cc:	1a6d      	subs	r5, r5, r1
 80064ce:	f025 0503 	bic.w	r5, r5, #3
 80064d2:	3508      	adds	r5, #8
 80064d4:	2d0c      	cmp	r5, #12
 80064d6:	bf38      	it	cc
 80064d8:	250c      	movcc	r5, #12
 80064da:	4629      	mov	r1, r5
 80064dc:	4638      	mov	r0, r7
 80064de:	f7ff ffa5 	bl	800642c <sbrk_aligned>
 80064e2:	3001      	adds	r0, #1
 80064e4:	d02b      	beq.n	800653e <_malloc_r+0xd2>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	442b      	add	r3, r5
 80064ea:	6023      	str	r3, [r4, #0]
 80064ec:	e00e      	b.n	800650c <_malloc_r+0xa0>
 80064ee:	6822      	ldr	r2, [r4, #0]
 80064f0:	1b52      	subs	r2, r2, r5
 80064f2:	d41e      	bmi.n	8006532 <_malloc_r+0xc6>
 80064f4:	2a0b      	cmp	r2, #11
 80064f6:	d916      	bls.n	8006526 <_malloc_r+0xba>
 80064f8:	1961      	adds	r1, r4, r5
 80064fa:	42a3      	cmp	r3, r4
 80064fc:	6025      	str	r5, [r4, #0]
 80064fe:	bf18      	it	ne
 8006500:	6059      	strne	r1, [r3, #4]
 8006502:	6863      	ldr	r3, [r4, #4]
 8006504:	bf08      	it	eq
 8006506:	6031      	streq	r1, [r6, #0]
 8006508:	5162      	str	r2, [r4, r5]
 800650a:	604b      	str	r3, [r1, #4]
 800650c:	4638      	mov	r0, r7
 800650e:	f104 060b 	add.w	r6, r4, #11
 8006512:	f000 fa6b 	bl	80069ec <__malloc_unlock>
 8006516:	f026 0607 	bic.w	r6, r6, #7
 800651a:	1d23      	adds	r3, r4, #4
 800651c:	1af2      	subs	r2, r6, r3
 800651e:	d0b6      	beq.n	800648e <_malloc_r+0x22>
 8006520:	1b9b      	subs	r3, r3, r6
 8006522:	50a3      	str	r3, [r4, r2]
 8006524:	e7b3      	b.n	800648e <_malloc_r+0x22>
 8006526:	6862      	ldr	r2, [r4, #4]
 8006528:	42a3      	cmp	r3, r4
 800652a:	bf0c      	ite	eq
 800652c:	6032      	streq	r2, [r6, #0]
 800652e:	605a      	strne	r2, [r3, #4]
 8006530:	e7ec      	b.n	800650c <_malloc_r+0xa0>
 8006532:	4623      	mov	r3, r4
 8006534:	6864      	ldr	r4, [r4, #4]
 8006536:	e7b2      	b.n	800649e <_malloc_r+0x32>
 8006538:	4634      	mov	r4, r6
 800653a:	6876      	ldr	r6, [r6, #4]
 800653c:	e7b9      	b.n	80064b2 <_malloc_r+0x46>
 800653e:	230c      	movs	r3, #12
 8006540:	603b      	str	r3, [r7, #0]
 8006542:	4638      	mov	r0, r7
 8006544:	f000 fa52 	bl	80069ec <__malloc_unlock>
 8006548:	e7a1      	b.n	800648e <_malloc_r+0x22>
 800654a:	6025      	str	r5, [r4, #0]
 800654c:	e7de      	b.n	800650c <_malloc_r+0xa0>
 800654e:	bf00      	nop
 8006550:	20000754 	.word	0x20000754

08006554 <__sfputc_r>:
 8006554:	6893      	ldr	r3, [r2, #8]
 8006556:	3b01      	subs	r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	b410      	push	{r4}
 800655c:	6093      	str	r3, [r2, #8]
 800655e:	da08      	bge.n	8006572 <__sfputc_r+0x1e>
 8006560:	6994      	ldr	r4, [r2, #24]
 8006562:	42a3      	cmp	r3, r4
 8006564:	db01      	blt.n	800656a <__sfputc_r+0x16>
 8006566:	290a      	cmp	r1, #10
 8006568:	d103      	bne.n	8006572 <__sfputc_r+0x1e>
 800656a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800656e:	f7fe ba03 	b.w	8004978 <__swbuf_r>
 8006572:	6813      	ldr	r3, [r2, #0]
 8006574:	1c58      	adds	r0, r3, #1
 8006576:	6010      	str	r0, [r2, #0]
 8006578:	7019      	strb	r1, [r3, #0]
 800657a:	4608      	mov	r0, r1
 800657c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006580:	4770      	bx	lr

08006582 <__sfputs_r>:
 8006582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006584:	4606      	mov	r6, r0
 8006586:	460f      	mov	r7, r1
 8006588:	4614      	mov	r4, r2
 800658a:	18d5      	adds	r5, r2, r3
 800658c:	42ac      	cmp	r4, r5
 800658e:	d101      	bne.n	8006594 <__sfputs_r+0x12>
 8006590:	2000      	movs	r0, #0
 8006592:	e007      	b.n	80065a4 <__sfputs_r+0x22>
 8006594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006598:	463a      	mov	r2, r7
 800659a:	4630      	mov	r0, r6
 800659c:	f7ff ffda 	bl	8006554 <__sfputc_r>
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d1f3      	bne.n	800658c <__sfputs_r+0xa>
 80065a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065a8 <_vfiprintf_r>:
 80065a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ac:	460d      	mov	r5, r1
 80065ae:	b09d      	sub	sp, #116	; 0x74
 80065b0:	4614      	mov	r4, r2
 80065b2:	4698      	mov	r8, r3
 80065b4:	4606      	mov	r6, r0
 80065b6:	b118      	cbz	r0, 80065c0 <_vfiprintf_r+0x18>
 80065b8:	6983      	ldr	r3, [r0, #24]
 80065ba:	b90b      	cbnz	r3, 80065c0 <_vfiprintf_r+0x18>
 80065bc:	f7ff fa30 	bl	8005a20 <__sinit>
 80065c0:	4b89      	ldr	r3, [pc, #548]	; (80067e8 <_vfiprintf_r+0x240>)
 80065c2:	429d      	cmp	r5, r3
 80065c4:	d11b      	bne.n	80065fe <_vfiprintf_r+0x56>
 80065c6:	6875      	ldr	r5, [r6, #4]
 80065c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065ca:	07d9      	lsls	r1, r3, #31
 80065cc:	d405      	bmi.n	80065da <_vfiprintf_r+0x32>
 80065ce:	89ab      	ldrh	r3, [r5, #12]
 80065d0:	059a      	lsls	r2, r3, #22
 80065d2:	d402      	bmi.n	80065da <_vfiprintf_r+0x32>
 80065d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065d6:	f7ff fac6 	bl	8005b66 <__retarget_lock_acquire_recursive>
 80065da:	89ab      	ldrh	r3, [r5, #12]
 80065dc:	071b      	lsls	r3, r3, #28
 80065de:	d501      	bpl.n	80065e4 <_vfiprintf_r+0x3c>
 80065e0:	692b      	ldr	r3, [r5, #16]
 80065e2:	b9eb      	cbnz	r3, 8006620 <_vfiprintf_r+0x78>
 80065e4:	4629      	mov	r1, r5
 80065e6:	4630      	mov	r0, r6
 80065e8:	f7fe fa18 	bl	8004a1c <__swsetup_r>
 80065ec:	b1c0      	cbz	r0, 8006620 <_vfiprintf_r+0x78>
 80065ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065f0:	07dc      	lsls	r4, r3, #31
 80065f2:	d50e      	bpl.n	8006612 <_vfiprintf_r+0x6a>
 80065f4:	f04f 30ff 	mov.w	r0, #4294967295
 80065f8:	b01d      	add	sp, #116	; 0x74
 80065fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065fe:	4b7b      	ldr	r3, [pc, #492]	; (80067ec <_vfiprintf_r+0x244>)
 8006600:	429d      	cmp	r5, r3
 8006602:	d101      	bne.n	8006608 <_vfiprintf_r+0x60>
 8006604:	68b5      	ldr	r5, [r6, #8]
 8006606:	e7df      	b.n	80065c8 <_vfiprintf_r+0x20>
 8006608:	4b79      	ldr	r3, [pc, #484]	; (80067f0 <_vfiprintf_r+0x248>)
 800660a:	429d      	cmp	r5, r3
 800660c:	bf08      	it	eq
 800660e:	68f5      	ldreq	r5, [r6, #12]
 8006610:	e7da      	b.n	80065c8 <_vfiprintf_r+0x20>
 8006612:	89ab      	ldrh	r3, [r5, #12]
 8006614:	0598      	lsls	r0, r3, #22
 8006616:	d4ed      	bmi.n	80065f4 <_vfiprintf_r+0x4c>
 8006618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800661a:	f7ff faa5 	bl	8005b68 <__retarget_lock_release_recursive>
 800661e:	e7e9      	b.n	80065f4 <_vfiprintf_r+0x4c>
 8006620:	2300      	movs	r3, #0
 8006622:	9309      	str	r3, [sp, #36]	; 0x24
 8006624:	2320      	movs	r3, #32
 8006626:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800662a:	f8cd 800c 	str.w	r8, [sp, #12]
 800662e:	2330      	movs	r3, #48	; 0x30
 8006630:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80067f4 <_vfiprintf_r+0x24c>
 8006634:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006638:	f04f 0901 	mov.w	r9, #1
 800663c:	4623      	mov	r3, r4
 800663e:	469a      	mov	sl, r3
 8006640:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006644:	b10a      	cbz	r2, 800664a <_vfiprintf_r+0xa2>
 8006646:	2a25      	cmp	r2, #37	; 0x25
 8006648:	d1f9      	bne.n	800663e <_vfiprintf_r+0x96>
 800664a:	ebba 0b04 	subs.w	fp, sl, r4
 800664e:	d00b      	beq.n	8006668 <_vfiprintf_r+0xc0>
 8006650:	465b      	mov	r3, fp
 8006652:	4622      	mov	r2, r4
 8006654:	4629      	mov	r1, r5
 8006656:	4630      	mov	r0, r6
 8006658:	f7ff ff93 	bl	8006582 <__sfputs_r>
 800665c:	3001      	adds	r0, #1
 800665e:	f000 80aa 	beq.w	80067b6 <_vfiprintf_r+0x20e>
 8006662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006664:	445a      	add	r2, fp
 8006666:	9209      	str	r2, [sp, #36]	; 0x24
 8006668:	f89a 3000 	ldrb.w	r3, [sl]
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 80a2 	beq.w	80067b6 <_vfiprintf_r+0x20e>
 8006672:	2300      	movs	r3, #0
 8006674:	f04f 32ff 	mov.w	r2, #4294967295
 8006678:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800667c:	f10a 0a01 	add.w	sl, sl, #1
 8006680:	9304      	str	r3, [sp, #16]
 8006682:	9307      	str	r3, [sp, #28]
 8006684:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006688:	931a      	str	r3, [sp, #104]	; 0x68
 800668a:	4654      	mov	r4, sl
 800668c:	2205      	movs	r2, #5
 800668e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006692:	4858      	ldr	r0, [pc, #352]	; (80067f4 <_vfiprintf_r+0x24c>)
 8006694:	f7f9 fdc4 	bl	8000220 <memchr>
 8006698:	9a04      	ldr	r2, [sp, #16]
 800669a:	b9d8      	cbnz	r0, 80066d4 <_vfiprintf_r+0x12c>
 800669c:	06d1      	lsls	r1, r2, #27
 800669e:	bf44      	itt	mi
 80066a0:	2320      	movmi	r3, #32
 80066a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066a6:	0713      	lsls	r3, r2, #28
 80066a8:	bf44      	itt	mi
 80066aa:	232b      	movmi	r3, #43	; 0x2b
 80066ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066b0:	f89a 3000 	ldrb.w	r3, [sl]
 80066b4:	2b2a      	cmp	r3, #42	; 0x2a
 80066b6:	d015      	beq.n	80066e4 <_vfiprintf_r+0x13c>
 80066b8:	9a07      	ldr	r2, [sp, #28]
 80066ba:	4654      	mov	r4, sl
 80066bc:	2000      	movs	r0, #0
 80066be:	f04f 0c0a 	mov.w	ip, #10
 80066c2:	4621      	mov	r1, r4
 80066c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066c8:	3b30      	subs	r3, #48	; 0x30
 80066ca:	2b09      	cmp	r3, #9
 80066cc:	d94e      	bls.n	800676c <_vfiprintf_r+0x1c4>
 80066ce:	b1b0      	cbz	r0, 80066fe <_vfiprintf_r+0x156>
 80066d0:	9207      	str	r2, [sp, #28]
 80066d2:	e014      	b.n	80066fe <_vfiprintf_r+0x156>
 80066d4:	eba0 0308 	sub.w	r3, r0, r8
 80066d8:	fa09 f303 	lsl.w	r3, r9, r3
 80066dc:	4313      	orrs	r3, r2
 80066de:	9304      	str	r3, [sp, #16]
 80066e0:	46a2      	mov	sl, r4
 80066e2:	e7d2      	b.n	800668a <_vfiprintf_r+0xe2>
 80066e4:	9b03      	ldr	r3, [sp, #12]
 80066e6:	1d19      	adds	r1, r3, #4
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	9103      	str	r1, [sp, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	bfbb      	ittet	lt
 80066f0:	425b      	neglt	r3, r3
 80066f2:	f042 0202 	orrlt.w	r2, r2, #2
 80066f6:	9307      	strge	r3, [sp, #28]
 80066f8:	9307      	strlt	r3, [sp, #28]
 80066fa:	bfb8      	it	lt
 80066fc:	9204      	strlt	r2, [sp, #16]
 80066fe:	7823      	ldrb	r3, [r4, #0]
 8006700:	2b2e      	cmp	r3, #46	; 0x2e
 8006702:	d10c      	bne.n	800671e <_vfiprintf_r+0x176>
 8006704:	7863      	ldrb	r3, [r4, #1]
 8006706:	2b2a      	cmp	r3, #42	; 0x2a
 8006708:	d135      	bne.n	8006776 <_vfiprintf_r+0x1ce>
 800670a:	9b03      	ldr	r3, [sp, #12]
 800670c:	1d1a      	adds	r2, r3, #4
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	9203      	str	r2, [sp, #12]
 8006712:	2b00      	cmp	r3, #0
 8006714:	bfb8      	it	lt
 8006716:	f04f 33ff 	movlt.w	r3, #4294967295
 800671a:	3402      	adds	r4, #2
 800671c:	9305      	str	r3, [sp, #20]
 800671e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006804 <_vfiprintf_r+0x25c>
 8006722:	7821      	ldrb	r1, [r4, #0]
 8006724:	2203      	movs	r2, #3
 8006726:	4650      	mov	r0, sl
 8006728:	f7f9 fd7a 	bl	8000220 <memchr>
 800672c:	b140      	cbz	r0, 8006740 <_vfiprintf_r+0x198>
 800672e:	2340      	movs	r3, #64	; 0x40
 8006730:	eba0 000a 	sub.w	r0, r0, sl
 8006734:	fa03 f000 	lsl.w	r0, r3, r0
 8006738:	9b04      	ldr	r3, [sp, #16]
 800673a:	4303      	orrs	r3, r0
 800673c:	3401      	adds	r4, #1
 800673e:	9304      	str	r3, [sp, #16]
 8006740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006744:	482c      	ldr	r0, [pc, #176]	; (80067f8 <_vfiprintf_r+0x250>)
 8006746:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800674a:	2206      	movs	r2, #6
 800674c:	f7f9 fd68 	bl	8000220 <memchr>
 8006750:	2800      	cmp	r0, #0
 8006752:	d03f      	beq.n	80067d4 <_vfiprintf_r+0x22c>
 8006754:	4b29      	ldr	r3, [pc, #164]	; (80067fc <_vfiprintf_r+0x254>)
 8006756:	bb1b      	cbnz	r3, 80067a0 <_vfiprintf_r+0x1f8>
 8006758:	9b03      	ldr	r3, [sp, #12]
 800675a:	3307      	adds	r3, #7
 800675c:	f023 0307 	bic.w	r3, r3, #7
 8006760:	3308      	adds	r3, #8
 8006762:	9303      	str	r3, [sp, #12]
 8006764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006766:	443b      	add	r3, r7
 8006768:	9309      	str	r3, [sp, #36]	; 0x24
 800676a:	e767      	b.n	800663c <_vfiprintf_r+0x94>
 800676c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006770:	460c      	mov	r4, r1
 8006772:	2001      	movs	r0, #1
 8006774:	e7a5      	b.n	80066c2 <_vfiprintf_r+0x11a>
 8006776:	2300      	movs	r3, #0
 8006778:	3401      	adds	r4, #1
 800677a:	9305      	str	r3, [sp, #20]
 800677c:	4619      	mov	r1, r3
 800677e:	f04f 0c0a 	mov.w	ip, #10
 8006782:	4620      	mov	r0, r4
 8006784:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006788:	3a30      	subs	r2, #48	; 0x30
 800678a:	2a09      	cmp	r2, #9
 800678c:	d903      	bls.n	8006796 <_vfiprintf_r+0x1ee>
 800678e:	2b00      	cmp	r3, #0
 8006790:	d0c5      	beq.n	800671e <_vfiprintf_r+0x176>
 8006792:	9105      	str	r1, [sp, #20]
 8006794:	e7c3      	b.n	800671e <_vfiprintf_r+0x176>
 8006796:	fb0c 2101 	mla	r1, ip, r1, r2
 800679a:	4604      	mov	r4, r0
 800679c:	2301      	movs	r3, #1
 800679e:	e7f0      	b.n	8006782 <_vfiprintf_r+0x1da>
 80067a0:	ab03      	add	r3, sp, #12
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	462a      	mov	r2, r5
 80067a6:	4b16      	ldr	r3, [pc, #88]	; (8006800 <_vfiprintf_r+0x258>)
 80067a8:	a904      	add	r1, sp, #16
 80067aa:	4630      	mov	r0, r6
 80067ac:	f7fd fc8c 	bl	80040c8 <_printf_float>
 80067b0:	4607      	mov	r7, r0
 80067b2:	1c78      	adds	r0, r7, #1
 80067b4:	d1d6      	bne.n	8006764 <_vfiprintf_r+0x1bc>
 80067b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067b8:	07d9      	lsls	r1, r3, #31
 80067ba:	d405      	bmi.n	80067c8 <_vfiprintf_r+0x220>
 80067bc:	89ab      	ldrh	r3, [r5, #12]
 80067be:	059a      	lsls	r2, r3, #22
 80067c0:	d402      	bmi.n	80067c8 <_vfiprintf_r+0x220>
 80067c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067c4:	f7ff f9d0 	bl	8005b68 <__retarget_lock_release_recursive>
 80067c8:	89ab      	ldrh	r3, [r5, #12]
 80067ca:	065b      	lsls	r3, r3, #25
 80067cc:	f53f af12 	bmi.w	80065f4 <_vfiprintf_r+0x4c>
 80067d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067d2:	e711      	b.n	80065f8 <_vfiprintf_r+0x50>
 80067d4:	ab03      	add	r3, sp, #12
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	462a      	mov	r2, r5
 80067da:	4b09      	ldr	r3, [pc, #36]	; (8006800 <_vfiprintf_r+0x258>)
 80067dc:	a904      	add	r1, sp, #16
 80067de:	4630      	mov	r0, r6
 80067e0:	f7fd ff16 	bl	8004610 <_printf_i>
 80067e4:	e7e4      	b.n	80067b0 <_vfiprintf_r+0x208>
 80067e6:	bf00      	nop
 80067e8:	08006c04 	.word	0x08006c04
 80067ec:	08006c24 	.word	0x08006c24
 80067f0:	08006be4 	.word	0x08006be4
 80067f4:	08006d9c 	.word	0x08006d9c
 80067f8:	08006da6 	.word	0x08006da6
 80067fc:	080040c9 	.word	0x080040c9
 8006800:	08006583 	.word	0x08006583
 8006804:	08006da2 	.word	0x08006da2

08006808 <_sbrk_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	4d06      	ldr	r5, [pc, #24]	; (8006824 <_sbrk_r+0x1c>)
 800680c:	2300      	movs	r3, #0
 800680e:	4604      	mov	r4, r0
 8006810:	4608      	mov	r0, r1
 8006812:	602b      	str	r3, [r5, #0]
 8006814:	f7fa fed2 	bl	80015bc <_sbrk>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d102      	bne.n	8006822 <_sbrk_r+0x1a>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	b103      	cbz	r3, 8006822 <_sbrk_r+0x1a>
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	2000075c 	.word	0x2000075c

08006828 <__sread>:
 8006828:	b510      	push	{r4, lr}
 800682a:	460c      	mov	r4, r1
 800682c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006830:	f000 f8e2 	bl	80069f8 <_read_r>
 8006834:	2800      	cmp	r0, #0
 8006836:	bfab      	itete	ge
 8006838:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800683a:	89a3      	ldrhlt	r3, [r4, #12]
 800683c:	181b      	addge	r3, r3, r0
 800683e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006842:	bfac      	ite	ge
 8006844:	6563      	strge	r3, [r4, #84]	; 0x54
 8006846:	81a3      	strhlt	r3, [r4, #12]
 8006848:	bd10      	pop	{r4, pc}

0800684a <__swrite>:
 800684a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800684e:	461f      	mov	r7, r3
 8006850:	898b      	ldrh	r3, [r1, #12]
 8006852:	05db      	lsls	r3, r3, #23
 8006854:	4605      	mov	r5, r0
 8006856:	460c      	mov	r4, r1
 8006858:	4616      	mov	r6, r2
 800685a:	d505      	bpl.n	8006868 <__swrite+0x1e>
 800685c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006860:	2302      	movs	r3, #2
 8006862:	2200      	movs	r2, #0
 8006864:	f000 f898 	bl	8006998 <_lseek_r>
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800686e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006872:	81a3      	strh	r3, [r4, #12]
 8006874:	4632      	mov	r2, r6
 8006876:	463b      	mov	r3, r7
 8006878:	4628      	mov	r0, r5
 800687a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800687e:	f000 b817 	b.w	80068b0 <_write_r>

08006882 <__sseek>:
 8006882:	b510      	push	{r4, lr}
 8006884:	460c      	mov	r4, r1
 8006886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800688a:	f000 f885 	bl	8006998 <_lseek_r>
 800688e:	1c43      	adds	r3, r0, #1
 8006890:	89a3      	ldrh	r3, [r4, #12]
 8006892:	bf15      	itete	ne
 8006894:	6560      	strne	r0, [r4, #84]	; 0x54
 8006896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800689a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800689e:	81a3      	strheq	r3, [r4, #12]
 80068a0:	bf18      	it	ne
 80068a2:	81a3      	strhne	r3, [r4, #12]
 80068a4:	bd10      	pop	{r4, pc}

080068a6 <__sclose>:
 80068a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068aa:	f000 b831 	b.w	8006910 <_close_r>
	...

080068b0 <_write_r>:
 80068b0:	b538      	push	{r3, r4, r5, lr}
 80068b2:	4d07      	ldr	r5, [pc, #28]	; (80068d0 <_write_r+0x20>)
 80068b4:	4604      	mov	r4, r0
 80068b6:	4608      	mov	r0, r1
 80068b8:	4611      	mov	r1, r2
 80068ba:	2200      	movs	r2, #0
 80068bc:	602a      	str	r2, [r5, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	f7fa fe2b 	bl	800151a <_write>
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	d102      	bne.n	80068ce <_write_r+0x1e>
 80068c8:	682b      	ldr	r3, [r5, #0]
 80068ca:	b103      	cbz	r3, 80068ce <_write_r+0x1e>
 80068cc:	6023      	str	r3, [r4, #0]
 80068ce:	bd38      	pop	{r3, r4, r5, pc}
 80068d0:	2000075c 	.word	0x2000075c

080068d4 <__assert_func>:
 80068d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068d6:	4614      	mov	r4, r2
 80068d8:	461a      	mov	r2, r3
 80068da:	4b09      	ldr	r3, [pc, #36]	; (8006900 <__assert_func+0x2c>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4605      	mov	r5, r0
 80068e0:	68d8      	ldr	r0, [r3, #12]
 80068e2:	b14c      	cbz	r4, 80068f8 <__assert_func+0x24>
 80068e4:	4b07      	ldr	r3, [pc, #28]	; (8006904 <__assert_func+0x30>)
 80068e6:	9100      	str	r1, [sp, #0]
 80068e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80068ec:	4906      	ldr	r1, [pc, #24]	; (8006908 <__assert_func+0x34>)
 80068ee:	462b      	mov	r3, r5
 80068f0:	f000 f81e 	bl	8006930 <fiprintf>
 80068f4:	f000 f89f 	bl	8006a36 <abort>
 80068f8:	4b04      	ldr	r3, [pc, #16]	; (800690c <__assert_func+0x38>)
 80068fa:	461c      	mov	r4, r3
 80068fc:	e7f3      	b.n	80068e6 <__assert_func+0x12>
 80068fe:	bf00      	nop
 8006900:	2000000c 	.word	0x2000000c
 8006904:	08006dad 	.word	0x08006dad
 8006908:	08006dba 	.word	0x08006dba
 800690c:	08006de8 	.word	0x08006de8

08006910 <_close_r>:
 8006910:	b538      	push	{r3, r4, r5, lr}
 8006912:	4d06      	ldr	r5, [pc, #24]	; (800692c <_close_r+0x1c>)
 8006914:	2300      	movs	r3, #0
 8006916:	4604      	mov	r4, r0
 8006918:	4608      	mov	r0, r1
 800691a:	602b      	str	r3, [r5, #0]
 800691c:	f7fa fe19 	bl	8001552 <_close>
 8006920:	1c43      	adds	r3, r0, #1
 8006922:	d102      	bne.n	800692a <_close_r+0x1a>
 8006924:	682b      	ldr	r3, [r5, #0]
 8006926:	b103      	cbz	r3, 800692a <_close_r+0x1a>
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	bd38      	pop	{r3, r4, r5, pc}
 800692c:	2000075c 	.word	0x2000075c

08006930 <fiprintf>:
 8006930:	b40e      	push	{r1, r2, r3}
 8006932:	b503      	push	{r0, r1, lr}
 8006934:	4601      	mov	r1, r0
 8006936:	ab03      	add	r3, sp, #12
 8006938:	4805      	ldr	r0, [pc, #20]	; (8006950 <fiprintf+0x20>)
 800693a:	f853 2b04 	ldr.w	r2, [r3], #4
 800693e:	6800      	ldr	r0, [r0, #0]
 8006940:	9301      	str	r3, [sp, #4]
 8006942:	f7ff fe31 	bl	80065a8 <_vfiprintf_r>
 8006946:	b002      	add	sp, #8
 8006948:	f85d eb04 	ldr.w	lr, [sp], #4
 800694c:	b003      	add	sp, #12
 800694e:	4770      	bx	lr
 8006950:	2000000c 	.word	0x2000000c

08006954 <_fstat_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	4d07      	ldr	r5, [pc, #28]	; (8006974 <_fstat_r+0x20>)
 8006958:	2300      	movs	r3, #0
 800695a:	4604      	mov	r4, r0
 800695c:	4608      	mov	r0, r1
 800695e:	4611      	mov	r1, r2
 8006960:	602b      	str	r3, [r5, #0]
 8006962:	f7fa fe02 	bl	800156a <_fstat>
 8006966:	1c43      	adds	r3, r0, #1
 8006968:	d102      	bne.n	8006970 <_fstat_r+0x1c>
 800696a:	682b      	ldr	r3, [r5, #0]
 800696c:	b103      	cbz	r3, 8006970 <_fstat_r+0x1c>
 800696e:	6023      	str	r3, [r4, #0]
 8006970:	bd38      	pop	{r3, r4, r5, pc}
 8006972:	bf00      	nop
 8006974:	2000075c 	.word	0x2000075c

08006978 <_isatty_r>:
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	4d06      	ldr	r5, [pc, #24]	; (8006994 <_isatty_r+0x1c>)
 800697c:	2300      	movs	r3, #0
 800697e:	4604      	mov	r4, r0
 8006980:	4608      	mov	r0, r1
 8006982:	602b      	str	r3, [r5, #0]
 8006984:	f7fa fe01 	bl	800158a <_isatty>
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	d102      	bne.n	8006992 <_isatty_r+0x1a>
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	b103      	cbz	r3, 8006992 <_isatty_r+0x1a>
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	bd38      	pop	{r3, r4, r5, pc}
 8006994:	2000075c 	.word	0x2000075c

08006998 <_lseek_r>:
 8006998:	b538      	push	{r3, r4, r5, lr}
 800699a:	4d07      	ldr	r5, [pc, #28]	; (80069b8 <_lseek_r+0x20>)
 800699c:	4604      	mov	r4, r0
 800699e:	4608      	mov	r0, r1
 80069a0:	4611      	mov	r1, r2
 80069a2:	2200      	movs	r2, #0
 80069a4:	602a      	str	r2, [r5, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	f7fa fdfa 	bl	80015a0 <_lseek>
 80069ac:	1c43      	adds	r3, r0, #1
 80069ae:	d102      	bne.n	80069b6 <_lseek_r+0x1e>
 80069b0:	682b      	ldr	r3, [r5, #0]
 80069b2:	b103      	cbz	r3, 80069b6 <_lseek_r+0x1e>
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	bd38      	pop	{r3, r4, r5, pc}
 80069b8:	2000075c 	.word	0x2000075c

080069bc <__ascii_mbtowc>:
 80069bc:	b082      	sub	sp, #8
 80069be:	b901      	cbnz	r1, 80069c2 <__ascii_mbtowc+0x6>
 80069c0:	a901      	add	r1, sp, #4
 80069c2:	b142      	cbz	r2, 80069d6 <__ascii_mbtowc+0x1a>
 80069c4:	b14b      	cbz	r3, 80069da <__ascii_mbtowc+0x1e>
 80069c6:	7813      	ldrb	r3, [r2, #0]
 80069c8:	600b      	str	r3, [r1, #0]
 80069ca:	7812      	ldrb	r2, [r2, #0]
 80069cc:	1e10      	subs	r0, r2, #0
 80069ce:	bf18      	it	ne
 80069d0:	2001      	movne	r0, #1
 80069d2:	b002      	add	sp, #8
 80069d4:	4770      	bx	lr
 80069d6:	4610      	mov	r0, r2
 80069d8:	e7fb      	b.n	80069d2 <__ascii_mbtowc+0x16>
 80069da:	f06f 0001 	mvn.w	r0, #1
 80069de:	e7f8      	b.n	80069d2 <__ascii_mbtowc+0x16>

080069e0 <__malloc_lock>:
 80069e0:	4801      	ldr	r0, [pc, #4]	; (80069e8 <__malloc_lock+0x8>)
 80069e2:	f7ff b8c0 	b.w	8005b66 <__retarget_lock_acquire_recursive>
 80069e6:	bf00      	nop
 80069e8:	20000750 	.word	0x20000750

080069ec <__malloc_unlock>:
 80069ec:	4801      	ldr	r0, [pc, #4]	; (80069f4 <__malloc_unlock+0x8>)
 80069ee:	f7ff b8bb 	b.w	8005b68 <__retarget_lock_release_recursive>
 80069f2:	bf00      	nop
 80069f4:	20000750 	.word	0x20000750

080069f8 <_read_r>:
 80069f8:	b538      	push	{r3, r4, r5, lr}
 80069fa:	4d07      	ldr	r5, [pc, #28]	; (8006a18 <_read_r+0x20>)
 80069fc:	4604      	mov	r4, r0
 80069fe:	4608      	mov	r0, r1
 8006a00:	4611      	mov	r1, r2
 8006a02:	2200      	movs	r2, #0
 8006a04:	602a      	str	r2, [r5, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	f7fa fd6a 	bl	80014e0 <_read>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	d102      	bne.n	8006a16 <_read_r+0x1e>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	b103      	cbz	r3, 8006a16 <_read_r+0x1e>
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	bd38      	pop	{r3, r4, r5, pc}
 8006a18:	2000075c 	.word	0x2000075c

08006a1c <__ascii_wctomb>:
 8006a1c:	b149      	cbz	r1, 8006a32 <__ascii_wctomb+0x16>
 8006a1e:	2aff      	cmp	r2, #255	; 0xff
 8006a20:	bf85      	ittet	hi
 8006a22:	238a      	movhi	r3, #138	; 0x8a
 8006a24:	6003      	strhi	r3, [r0, #0]
 8006a26:	700a      	strbls	r2, [r1, #0]
 8006a28:	f04f 30ff 	movhi.w	r0, #4294967295
 8006a2c:	bf98      	it	ls
 8006a2e:	2001      	movls	r0, #1
 8006a30:	4770      	bx	lr
 8006a32:	4608      	mov	r0, r1
 8006a34:	4770      	bx	lr

08006a36 <abort>:
 8006a36:	b508      	push	{r3, lr}
 8006a38:	2006      	movs	r0, #6
 8006a3a:	f000 f82b 	bl	8006a94 <raise>
 8006a3e:	2001      	movs	r0, #1
 8006a40:	f7fa fd44 	bl	80014cc <_exit>

08006a44 <_raise_r>:
 8006a44:	291f      	cmp	r1, #31
 8006a46:	b538      	push	{r3, r4, r5, lr}
 8006a48:	4604      	mov	r4, r0
 8006a4a:	460d      	mov	r5, r1
 8006a4c:	d904      	bls.n	8006a58 <_raise_r+0x14>
 8006a4e:	2316      	movs	r3, #22
 8006a50:	6003      	str	r3, [r0, #0]
 8006a52:	f04f 30ff 	mov.w	r0, #4294967295
 8006a56:	bd38      	pop	{r3, r4, r5, pc}
 8006a58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006a5a:	b112      	cbz	r2, 8006a62 <_raise_r+0x1e>
 8006a5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a60:	b94b      	cbnz	r3, 8006a76 <_raise_r+0x32>
 8006a62:	4620      	mov	r0, r4
 8006a64:	f000 f830 	bl	8006ac8 <_getpid_r>
 8006a68:	462a      	mov	r2, r5
 8006a6a:	4601      	mov	r1, r0
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a72:	f000 b817 	b.w	8006aa4 <_kill_r>
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d00a      	beq.n	8006a90 <_raise_r+0x4c>
 8006a7a:	1c59      	adds	r1, r3, #1
 8006a7c:	d103      	bne.n	8006a86 <_raise_r+0x42>
 8006a7e:	2316      	movs	r3, #22
 8006a80:	6003      	str	r3, [r0, #0]
 8006a82:	2001      	movs	r0, #1
 8006a84:	e7e7      	b.n	8006a56 <_raise_r+0x12>
 8006a86:	2400      	movs	r4, #0
 8006a88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	4798      	blx	r3
 8006a90:	2000      	movs	r0, #0
 8006a92:	e7e0      	b.n	8006a56 <_raise_r+0x12>

08006a94 <raise>:
 8006a94:	4b02      	ldr	r3, [pc, #8]	; (8006aa0 <raise+0xc>)
 8006a96:	4601      	mov	r1, r0
 8006a98:	6818      	ldr	r0, [r3, #0]
 8006a9a:	f7ff bfd3 	b.w	8006a44 <_raise_r>
 8006a9e:	bf00      	nop
 8006aa0:	2000000c 	.word	0x2000000c

08006aa4 <_kill_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	4d07      	ldr	r5, [pc, #28]	; (8006ac4 <_kill_r+0x20>)
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	4604      	mov	r4, r0
 8006aac:	4608      	mov	r0, r1
 8006aae:	4611      	mov	r1, r2
 8006ab0:	602b      	str	r3, [r5, #0]
 8006ab2:	f7fa fcfb 	bl	80014ac <_kill>
 8006ab6:	1c43      	adds	r3, r0, #1
 8006ab8:	d102      	bne.n	8006ac0 <_kill_r+0x1c>
 8006aba:	682b      	ldr	r3, [r5, #0]
 8006abc:	b103      	cbz	r3, 8006ac0 <_kill_r+0x1c>
 8006abe:	6023      	str	r3, [r4, #0]
 8006ac0:	bd38      	pop	{r3, r4, r5, pc}
 8006ac2:	bf00      	nop
 8006ac4:	2000075c 	.word	0x2000075c

08006ac8 <_getpid_r>:
 8006ac8:	f7fa bce8 	b.w	800149c <_getpid>

08006acc <_init>:
 8006acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ace:	bf00      	nop
 8006ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ad2:	bc08      	pop	{r3}
 8006ad4:	469e      	mov	lr, r3
 8006ad6:	4770      	bx	lr

08006ad8 <_fini>:
 8006ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ada:	bf00      	nop
 8006adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ade:	bc08      	pop	{r3}
 8006ae0:	469e      	mov	lr, r3
 8006ae2:	4770      	bx	lr
