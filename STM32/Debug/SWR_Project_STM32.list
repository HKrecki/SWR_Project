
SWR_Project_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d74  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003f38  08003f38  00013f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fd4  08003fd4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003fd4  08003fd4  00013fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fdc  08003fdc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fdc  08003fdc  00013fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fe0  08003fe0  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  20000070  08004054  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  08004054  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d13e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e97  00000000  00000000  0002d1de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002f078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002fb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225af  00000000  00000000  000304e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d219  00000000  00000000  00052a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbdc1  00000000  00000000  0005fca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012ba69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003210  00000000  00000000  0012babc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003f20 	.word	0x08003f20

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	08003f20 	.word	0x08003f20

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	if(ch == '\n'){
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b0a      	cmp	r3, #10
 8000514:	d109      	bne.n	800052a <__io_putchar+0x22>
		uint8_t ch2 = '\r';
 8000516:	230d      	movs	r3, #13
 8000518:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart3, &ch2, 1, HAL_MAX_DELAY);
 800051a:	f107 010f 	add.w	r1, r7, #15
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
 8000522:	2201      	movs	r2, #1
 8000524:	4807      	ldr	r0, [pc, #28]	; (8000544 <__io_putchar+0x3c>)
 8000526:	f002 f95a 	bl	80027de <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800052a:	1d39      	adds	r1, r7, #4
 800052c:	f04f 33ff 	mov.w	r3, #4294967295
 8000530:	2201      	movs	r2, #1
 8000532:	4804      	ldr	r0, [pc, #16]	; (8000544 <__io_putchar+0x3c>)
 8000534:	f002 f953 	bl	80027de <HAL_UART_Transmit>
	return 1;
 8000538:	2301      	movs	r3, #1
}
 800053a:	4618      	mov	r0, r3
 800053c:	3710      	adds	r7, #16
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	2000008c 	.word	0x2000008c

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054c:	f000 fb76 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000550:	f000 f812 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000554:	f000 f8d4 	bl	8000700 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000558:	f000 f87a 	bl	8000650 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800055c:	f000 f8a2 	bl	80006a4 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE BEGIN 2 */

  printf("Hello world1!\n");
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <main+0x28>)
 8000562:	f003 f84d 	bl	8003600 <puts>
  printf("Hello world2!\n");
 8000566:	4803      	ldr	r0, [pc, #12]	; (8000574 <main+0x2c>)
 8000568:	f003 f84a 	bl	8003600 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */

  /* USER CODE BEGIN WHILE */
  while (1)
 800056c:	e7fe      	b.n	800056c <main+0x24>
 800056e:	bf00      	nop
 8000570:	08003f38 	.word	0x08003f38
 8000574:	08003f48 	.word	0x08003f48

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2234      	movs	r2, #52	; 0x34
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f002 ffc4 	bl	8003514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 0308 	add.w	r3, r7, #8
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b29      	ldr	r3, [pc, #164]	; (8000648 <SystemClock_Config+0xd0>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a28      	ldr	r2, [pc, #160]	; (8000648 <SystemClock_Config+0xd0>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b26      	ldr	r3, [pc, #152]	; (8000648 <SystemClock_Config+0xd0>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <SystemClock_Config+0xd4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a22      	ldr	r2, [pc, #136]	; (800064c <SystemClock_Config+0xd4>)
 80005c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b20      	ldr	r3, [pc, #128]	; (800064c <SystemClock_Config+0xd4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d4:	2301      	movs	r3, #1
 80005d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e8:	2304      	movs	r3, #4
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005ec:	23a8      	movs	r3, #168	; 0xa8
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f4:	2307      	movs	r3, #7
 80005f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4618      	mov	r0, r3
 8000602:	f001 fe01 	bl	8002208 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800060c:	f000 f926 	bl	800085c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800061c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000620:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000626:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	2105      	movs	r1, #5
 800062e:	4618      	mov	r0, r3
 8000630:	f000 ff76 	bl	8001520 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800063a:	f000 f90f 	bl	800085c <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	; 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_USART3_UART_Init+0x4c>)
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <MX_USART3_UART_Init+0x50>)
 8000658:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_USART3_UART_Init+0x4c>)
 800065c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000660:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_USART3_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_USART3_UART_Init+0x4c>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_USART3_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_USART3_UART_Init+0x4c>)
 8000676:	220c      	movs	r2, #12
 8000678:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_USART3_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_USART3_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_USART3_UART_Init+0x4c>)
 8000688:	f002 f85c 	bl	8002744 <HAL_UART_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000692:	f000 f8e3 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2000008c 	.word	0x2000008c
 80006a0:	40004800 	.word	0x40004800

080006a4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006b2:	2206      	movs	r2, #6
 80006b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006b8:	2202      	movs	r2, #2
 80006ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006c4:	2202      	movs	r2, #2
 80006c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006dc:	2201      	movs	r2, #1
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e8:	f000 fdd1 	bl	800128e <HAL_PCD_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80006f2:	f000 f8b3 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000d0 	.word	0x200000d0

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08c      	sub	sp, #48	; 0x30
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]
 800071a:	4b4c      	ldr	r3, [pc, #304]	; (800084c <MX_GPIO_Init+0x14c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a4b      	ldr	r2, [pc, #300]	; (800084c <MX_GPIO_Init+0x14c>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b49      	ldr	r3, [pc, #292]	; (800084c <MX_GPIO_Init+0x14c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	61bb      	str	r3, [r7, #24]
 8000730:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	4b45      	ldr	r3, [pc, #276]	; (800084c <MX_GPIO_Init+0x14c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a44      	ldr	r2, [pc, #272]	; (800084c <MX_GPIO_Init+0x14c>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b42      	ldr	r3, [pc, #264]	; (800084c <MX_GPIO_Init+0x14c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	4b3e      	ldr	r3, [pc, #248]	; (800084c <MX_GPIO_Init+0x14c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a3d      	ldr	r2, [pc, #244]	; (800084c <MX_GPIO_Init+0x14c>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b3b      	ldr	r3, [pc, #236]	; (800084c <MX_GPIO_Init+0x14c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	4b37      	ldr	r3, [pc, #220]	; (800084c <MX_GPIO_Init+0x14c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a36      	ldr	r2, [pc, #216]	; (800084c <MX_GPIO_Init+0x14c>)
 8000774:	f043 0308 	orr.w	r3, r3, #8
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b34      	ldr	r3, [pc, #208]	; (800084c <MX_GPIO_Init+0x14c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0308 	and.w	r3, r3, #8
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	4b30      	ldr	r3, [pc, #192]	; (800084c <MX_GPIO_Init+0x14c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a2f      	ldr	r2, [pc, #188]	; (800084c <MX_GPIO_Init+0x14c>)
 8000790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MX_GPIO_Init+0x14c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b29      	ldr	r3, [pc, #164]	; (800084c <MX_GPIO_Init+0x14c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a28      	ldr	r2, [pc, #160]	; (800084c <MX_GPIO_Init+0x14c>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_GPIO_Init+0x14c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f244 0181 	movw	r1, #16513	; 0x4081
 80007c4:	4822      	ldr	r0, [pc, #136]	; (8000850 <MX_GPIO_Init+0x150>)
 80007c6:	f000 fd49 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2140      	movs	r1, #64	; 0x40
 80007ce:	4821      	ldr	r0, [pc, #132]	; (8000854 <MX_GPIO_Init+0x154>)
 80007d0:	f000 fd44 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	481b      	ldr	r0, [pc, #108]	; (8000858 <MX_GPIO_Init+0x158>)
 80007ec:	f000 fba2 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007f0:	f244 0381 	movw	r3, #16513	; 0x4081
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4811      	ldr	r0, [pc, #68]	; (8000850 <MX_GPIO_Init+0x150>)
 800080a:	f000 fb93 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800080e:	2340      	movs	r3, #64	; 0x40
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <MX_GPIO_Init+0x154>)
 8000826:	f000 fb85 	bl	8000f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800082a:	2380      	movs	r3, #128	; 0x80
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_GPIO_Init+0x154>)
 800083e:	f000 fb79 	bl	8000f34 <HAL_GPIO_Init>

}
 8000842:	bf00      	nop
 8000844:	3730      	adds	r7, #48	; 0x30
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40020400 	.word	0x40020400
 8000854:	40021800 	.word	0x40021800
 8000858:	40020800 	.word	0x40020800

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	e7fe      	b.n	8000864 <Error_Handler+0x8>
	...

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_MspInit+0x4c>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	4a0f      	ldr	r2, [pc, #60]	; (80008b4 <HAL_MspInit+0x4c>)
 8000878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087c:	6453      	str	r3, [r2, #68]	; 0x44
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <HAL_MspInit+0x4c>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <HAL_MspInit+0x4c>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <HAL_MspInit+0x4c>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000898:	6413      	str	r3, [r2, #64]	; 0x40
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800

080008b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a19      	ldr	r2, [pc, #100]	; (800093c <HAL_UART_MspInit+0x84>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d12c      	bne.n	8000934 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <HAL_UART_MspInit+0x88>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	4a17      	ldr	r2, [pc, #92]	; (8000940 <HAL_UART_MspInit+0x88>)
 80008e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008e8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_UART_MspInit+0x88>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <HAL_UART_MspInit+0x88>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a10      	ldr	r2, [pc, #64]	; (8000940 <HAL_UART_MspInit+0x88>)
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <HAL_UART_MspInit+0x88>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000912:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000920:	2303      	movs	r3, #3
 8000922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000924:	2307      	movs	r3, #7
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4619      	mov	r1, r3
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <HAL_UART_MspInit+0x8c>)
 8000930:	f000 fb00 	bl	8000f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	; 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40004800 	.word	0x40004800
 8000940:	40023800 	.word	0x40023800
 8000944:	40020c00 	.word	0x40020c00

08000948 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b0a0      	sub	sp, #128	; 0x80
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	225c      	movs	r2, #92	; 0x5c
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f002 fdd3 	bl	8003514 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000976:	d14e      	bne.n	8000a16 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800097c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800097e:	2300      	movs	r3, #0
 8000980:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fee4 	bl	8001754 <HAL_RCCEx_PeriphCLKConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000992:	f7ff ff63 	bl	800085c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <HAL_PCD_MspInit+0xd8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a20      	ldr	r2, [pc, #128]	; (8000a20 <HAL_PCD_MspInit+0xd8>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <HAL_PCD_MspInit+0xd8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009b2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c4:	230a      	movs	r3, #10
 80009c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009cc:	4619      	mov	r1, r3
 80009ce:	4815      	ldr	r0, [pc, #84]	; (8000a24 <HAL_PCD_MspInit+0xdc>)
 80009d0:	f000 fab0 	bl	8000f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009da:	2300      	movs	r3, #0
 80009dc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009e6:	4619      	mov	r1, r3
 80009e8:	480e      	ldr	r0, [pc, #56]	; (8000a24 <HAL_PCD_MspInit+0xdc>)
 80009ea:	f000 faa3 	bl	8000f34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <HAL_PCD_MspInit+0xd8>)
 80009f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f2:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <HAL_PCD_MspInit+0xd8>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f8:	6353      	str	r3, [r2, #52]	; 0x34
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_PCD_MspInit+0xd8>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <HAL_PCD_MspInit+0xd8>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a08:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_PCD_MspInit+0xd8>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a16:	bf00      	nop
 8000a18:	3780      	adds	r7, #128	; 0x80
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020000 	.word	0x40020000

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <NMI_Handler+0x4>

08000a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a74:	f000 f934 	bl	8000ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	e00a      	b.n	8000aa4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a8e:	f3af 8000 	nop.w
 8000a92:	4601      	mov	r1, r0
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	60ba      	str	r2, [r7, #8]
 8000a9a:	b2ca      	uxtb	r2, r1
 8000a9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	dbf0      	blt.n	8000a8e <_read+0x12>
  }

  return len;
 8000aac:	687b      	ldr	r3, [r7, #4]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	60f8      	str	r0, [r7, #12]
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	e009      	b.n	8000adc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	60ba      	str	r2, [r7, #8]
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fd19 	bl	8000508 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	dbf1      	blt.n	8000ac8 <_write+0x12>
  }
  return len;
 8000ae4:	687b      	ldr	r3, [r7, #4]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_close>:

int _close(int file)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b16:	605a      	str	r2, [r3, #4]
  return 0;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <_isatty>:

int _isatty(int file)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b2e:	2301      	movs	r3, #1
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b60:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <_sbrk+0x5c>)
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <_sbrk+0x60>)
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d102      	bne.n	8000b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <_sbrk+0x64>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <_sbrk+0x68>)
 8000b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d207      	bcs.n	8000b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b88:	f002 fc9a 	bl	80034c0 <__errno>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	220c      	movs	r2, #12
 8000b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
 8000b96:	e009      	b.n	8000bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <_sbrk+0x64>)
 8000ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000baa:	68fb      	ldr	r3, [r7, #12]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20020000 	.word	0x20020000
 8000bb8:	00000400 	.word	0x00000400
 8000bbc:	200005dc 	.word	0x200005dc
 8000bc0:	200005f8 	.word	0x200005f8

08000bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <SystemInit+0x20>)
 8000bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <SystemInit+0x20>)
 8000bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bee:	490e      	ldr	r1, [pc, #56]	; (8000c28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bf0:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c04:	4c0b      	ldr	r4, [pc, #44]	; (8000c34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c12:	f7ff ffd7 	bl	8000bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c16:	f002 fc59 	bl	80034cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1a:	f7ff fc95 	bl	8000548 <main>
  bx  lr    
 8000c1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c2c:	08003fe4 	.word	0x08003fe4
  ldr r2, =_sbss
 8000c30:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c34:	200005f4 	.word	0x200005f4

08000c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC_IRQHandler>
	...

08000c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0d      	ldr	r2, [pc, #52]	; (8000c7c <HAL_Init+0x40>)
 8000c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_Init+0x40>)
 8000c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <HAL_Init+0x40>)
 8000c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f931 	bl	8000ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f000 f808 	bl	8000c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c70:	f7ff fdfa 	bl	8000868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023c00 	.word	0x40023c00

08000c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_InitTick+0x54>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_InitTick+0x58>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f93b 	bl	8000f1a <HAL_SYSTICK_Config>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00e      	b.n	8000ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d80a      	bhi.n	8000cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f000 f911 	bl	8000ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc0:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <HAL_InitTick+0x5c>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e000      	b.n	8000ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000004 	.word	0x20000004

08000ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x20>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_IncTick+0x24>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <HAL_IncTick+0x24>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008
 8000d04:	200005e0 	.word	0x200005e0

08000d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_GetTick+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	200005e0 	.word	0x200005e0

08000d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d28:	f7ff ffee 	bl	8000d08 <HAL_GetTick>
 8000d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d38:	d005      	beq.n	8000d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <HAL_Delay+0x44>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	4413      	add	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d46:	bf00      	nop
 8000d48:	f7ff ffde 	bl	8000d08 <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d8f7      	bhi.n	8000d48 <HAL_Delay+0x28>
  {
  }
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008

08000d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	f003 0307 	and.w	r3, r3, #7
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	db0a      	blt.n	8000df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	490c      	ldr	r1, [pc, #48]	; (8000e18 <__NVIC_SetPriority+0x4c>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	0112      	lsls	r2, r2, #4
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	440b      	add	r3, r1
 8000df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df4:	e00a      	b.n	8000e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4908      	ldr	r1, [pc, #32]	; (8000e1c <__NVIC_SetPriority+0x50>)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	3b04      	subs	r3, #4
 8000e04:	0112      	lsls	r2, r2, #4
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	761a      	strb	r2, [r3, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f1c3 0307 	rsb	r3, r3, #7
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf28      	it	cs
 8000e3e:	2304      	movcs	r3, #4
 8000e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3304      	adds	r3, #4
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d902      	bls.n	8000e50 <NVIC_EncodePriority+0x30>
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3b03      	subs	r3, #3
 8000e4e:	e000      	b.n	8000e52 <NVIC_EncodePriority+0x32>
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43d9      	mvns	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	4313      	orrs	r3, r2
         );
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3724      	adds	r7, #36	; 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e98:	d301      	bcc.n	8000e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00f      	b.n	8000ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <SysTick_Config+0x40>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f7ff ff8e 	bl	8000dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <SysTick_Config+0x40>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <SysTick_Config+0x40>)
 8000eb8:	2207      	movs	r2, #7
 8000eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	e000e010 	.word	0xe000e010

08000ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ff47 	bl	8000d68 <__NVIC_SetPriorityGrouping>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef4:	f7ff ff5c 	bl	8000db0 <__NVIC_GetPriorityGrouping>
 8000ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	6978      	ldr	r0, [r7, #20]
 8000f00:	f7ff ff8e 	bl	8000e20 <NVIC_EncodePriority>
 8000f04:	4602      	mov	r2, r0
 8000f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff5d 	bl	8000dcc <__NVIC_SetPriority>
}
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ffb0 	bl	8000e88 <SysTick_Config>
 8000f28:	4603      	mov	r3, r0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	; 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
 8000f4e:	e165      	b.n	800121c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f50:	2201      	movs	r2, #1
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	f040 8154 	bne.w	8001216 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d005      	beq.n	8000f86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d130      	bne.n	8000fe8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	2203      	movs	r2, #3
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	68da      	ldr	r2, [r3, #12]
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	091b      	lsrs	r3, r3, #4
 8000fd2:	f003 0201 	and.w	r2, r3, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d017      	beq.n	8001024 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d123      	bne.n	8001078 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	08da      	lsrs	r2, r3, #3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3208      	adds	r2, #8
 8001038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	220f      	movs	r2, #15
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	691a      	ldr	r2, [r3, #16]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	08da      	lsrs	r2, r3, #3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3208      	adds	r2, #8
 8001072:	69b9      	ldr	r1, [r7, #24]
 8001074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0203 	and.w	r2, r3, #3
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 80ae 	beq.w	8001216 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b5d      	ldr	r3, [pc, #372]	; (8001234 <HAL_GPIO_Init+0x300>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	4a5c      	ldr	r2, [pc, #368]	; (8001234 <HAL_GPIO_Init+0x300>)
 80010c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ca:	4b5a      	ldr	r3, [pc, #360]	; (8001234 <HAL_GPIO_Init+0x300>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d6:	4a58      	ldr	r2, [pc, #352]	; (8001238 <HAL_GPIO_Init+0x304>)
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	089b      	lsrs	r3, r3, #2
 80010dc:	3302      	adds	r3, #2
 80010de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	220f      	movs	r2, #15
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4f      	ldr	r2, [pc, #316]	; (800123c <HAL_GPIO_Init+0x308>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d025      	beq.n	800114e <HAL_GPIO_Init+0x21a>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4e      	ldr	r2, [pc, #312]	; (8001240 <HAL_GPIO_Init+0x30c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d01f      	beq.n	800114a <HAL_GPIO_Init+0x216>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4d      	ldr	r2, [pc, #308]	; (8001244 <HAL_GPIO_Init+0x310>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d019      	beq.n	8001146 <HAL_GPIO_Init+0x212>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4c      	ldr	r2, [pc, #304]	; (8001248 <HAL_GPIO_Init+0x314>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d013      	beq.n	8001142 <HAL_GPIO_Init+0x20e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4b      	ldr	r2, [pc, #300]	; (800124c <HAL_GPIO_Init+0x318>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d00d      	beq.n	800113e <HAL_GPIO_Init+0x20a>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4a      	ldr	r2, [pc, #296]	; (8001250 <HAL_GPIO_Init+0x31c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d007      	beq.n	800113a <HAL_GPIO_Init+0x206>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a49      	ldr	r2, [pc, #292]	; (8001254 <HAL_GPIO_Init+0x320>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d101      	bne.n	8001136 <HAL_GPIO_Init+0x202>
 8001132:	2306      	movs	r3, #6
 8001134:	e00c      	b.n	8001150 <HAL_GPIO_Init+0x21c>
 8001136:	2307      	movs	r3, #7
 8001138:	e00a      	b.n	8001150 <HAL_GPIO_Init+0x21c>
 800113a:	2305      	movs	r3, #5
 800113c:	e008      	b.n	8001150 <HAL_GPIO_Init+0x21c>
 800113e:	2304      	movs	r3, #4
 8001140:	e006      	b.n	8001150 <HAL_GPIO_Init+0x21c>
 8001142:	2303      	movs	r3, #3
 8001144:	e004      	b.n	8001150 <HAL_GPIO_Init+0x21c>
 8001146:	2302      	movs	r3, #2
 8001148:	e002      	b.n	8001150 <HAL_GPIO_Init+0x21c>
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <HAL_GPIO_Init+0x21c>
 800114e:	2300      	movs	r3, #0
 8001150:	69fa      	ldr	r2, [r7, #28]
 8001152:	f002 0203 	and.w	r2, r2, #3
 8001156:	0092      	lsls	r2, r2, #2
 8001158:	4093      	lsls	r3, r2
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001160:	4935      	ldr	r1, [pc, #212]	; (8001238 <HAL_GPIO_Init+0x304>)
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	3302      	adds	r3, #2
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800116e:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <HAL_GPIO_Init+0x324>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001192:	4a31      	ldr	r2, [pc, #196]	; (8001258 <HAL_GPIO_Init+0x324>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001198:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <HAL_GPIO_Init+0x324>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011bc:	4a26      	ldr	r2, [pc, #152]	; (8001258 <HAL_GPIO_Init+0x324>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011c2:	4b25      	ldr	r3, [pc, #148]	; (8001258 <HAL_GPIO_Init+0x324>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011e6:	4a1c      	ldr	r2, [pc, #112]	; (8001258 <HAL_GPIO_Init+0x324>)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <HAL_GPIO_Init+0x324>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001210:	4a11      	ldr	r2, [pc, #68]	; (8001258 <HAL_GPIO_Init+0x324>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3301      	adds	r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	2b0f      	cmp	r3, #15
 8001220:	f67f ae96 	bls.w	8000f50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3724      	adds	r7, #36	; 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40013800 	.word	0x40013800
 800123c:	40020000 	.word	0x40020000
 8001240:	40020400 	.word	0x40020400
 8001244:	40020800 	.word	0x40020800
 8001248:	40020c00 	.word	0x40020c00
 800124c:	40021000 	.word	0x40021000
 8001250:	40021400 	.word	0x40021400
 8001254:	40021800 	.word	0x40021800
 8001258:	40013c00 	.word	0x40013c00

0800125c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
 8001268:	4613      	mov	r3, r2
 800126a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800126c:	787b      	ldrb	r3, [r7, #1]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001278:	e003      	b.n	8001282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	041a      	lsls	r2, r3, #16
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	619a      	str	r2, [r3, #24]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800128e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001290:	b08f      	sub	sp, #60	; 0x3c
 8001292:	af0a      	add	r7, sp, #40	; 0x28
 8001294:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d101      	bne.n	80012a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e116      	b.n	80014ce <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d106      	bne.n	80012c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fb44 	bl	8000948 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2203      	movs	r2, #3
 80012c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d102      	bne.n	80012da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 fe53 	bl	8002f8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	687e      	ldr	r6, [r7, #4]
 80012ec:	466d      	mov	r5, sp
 80012ee:	f106 0410 	add.w	r4, r6, #16
 80012f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001302:	1d33      	adds	r3, r6, #4
 8001304:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001306:	6838      	ldr	r0, [r7, #0]
 8001308:	f001 fdde 	bl	8002ec8 <USB_CoreInit>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d005      	beq.n	800131e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2202      	movs	r2, #2
 8001316:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e0d7      	b.n	80014ce <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f001 fe41 	bl	8002fac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800132a:	2300      	movs	r3, #0
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	e04a      	b.n	80013c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	333d      	adds	r3, #61	; 0x3d
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	4413      	add	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	333c      	adds	r3, #60	; 0x3c
 8001354:	7bfa      	ldrb	r2, [r7, #15]
 8001356:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	b298      	uxth	r0, r3
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	4613      	mov	r3, r2
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	4413      	add	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	440b      	add	r3, r1
 800136a:	3344      	adds	r3, #68	; 0x44
 800136c:	4602      	mov	r2, r0
 800136e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4413      	add	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	3340      	adds	r3, #64	; 0x40
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001384:	7bfa      	ldrb	r2, [r7, #15]
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	4613      	mov	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	4413      	add	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	3348      	adds	r3, #72	; 0x48
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001398:	7bfa      	ldrb	r2, [r7, #15]
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	4413      	add	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	440b      	add	r3, r1
 80013a6:	334c      	adds	r3, #76	; 0x4c
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4413      	add	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	3354      	adds	r3, #84	; 0x54
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	3301      	adds	r3, #1
 80013c4:	73fb      	strb	r3, [r7, #15]
 80013c6:	7bfa      	ldrb	r2, [r7, #15]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d3af      	bcc.n	8001330 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	e044      	b.n	8001460 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	4613      	mov	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4413      	add	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	440b      	add	r3, r1
 80013e4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4413      	add	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80013fe:	7bfa      	ldrb	r2, [r7, #15]
 8001400:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4413      	add	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4413      	add	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	440b      	add	r3, r1
 8001452:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	3301      	adds	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	429a      	cmp	r2, r3
 8001468:	d3b5      	bcc.n	80013d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	687e      	ldr	r6, [r7, #4]
 8001472:	466d      	mov	r5, sp
 8001474:	f106 0410 	add.w	r4, r6, #16
 8001478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001480:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001484:	e885 0003 	stmia.w	r5, {r0, r1}
 8001488:	1d33      	adds	r3, r6, #4
 800148a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800148c:	6838      	ldr	r0, [r7, #0]
 800148e:	f001 fdd9 	bl	8003044 <USB_DevInit>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2202      	movs	r2, #2
 800149c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e014      	b.n	80014ce <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d102      	bne.n	80014c2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 f80a 	bl	80014d6 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f001 ff97 	bl	80033fa <USB_DevDisconnect>

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014d6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	f043 0303 	orr.w	r3, r3, #3
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0cc      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001534:	4b68      	ldr	r3, [pc, #416]	; (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 030f 	and.w	r3, r3, #15
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d90c      	bls.n	800155c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001542:	4b65      	ldr	r3, [pc, #404]	; (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800154a:	4b63      	ldr	r3, [pc, #396]	; (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d001      	beq.n	800155c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0b8      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d020      	beq.n	80015aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001574:	4b59      	ldr	r3, [pc, #356]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4a58      	ldr	r2, [pc, #352]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800157e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b00      	cmp	r3, #0
 800158a:	d005      	beq.n	8001598 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800158c:	4b53      	ldr	r3, [pc, #332]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4a52      	ldr	r2, [pc, #328]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001596:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001598:	4b50      	ldr	r3, [pc, #320]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	494d      	ldr	r1, [pc, #308]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d044      	beq.n	8001640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d107      	bne.n	80015ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	4b47      	ldr	r3, [pc, #284]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d119      	bne.n	80015fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e07f      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d003      	beq.n	80015de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d107      	bne.n	80015ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015de:	4b3f      	ldr	r3, [pc, #252]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d109      	bne.n	80015fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e06f      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ee:	4b3b      	ldr	r3, [pc, #236]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e067      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015fe:	4b37      	ldr	r3, [pc, #220]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f023 0203 	bic.w	r2, r3, #3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	4934      	ldr	r1, [pc, #208]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	4313      	orrs	r3, r2
 800160e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001610:	f7ff fb7a 	bl	8000d08 <HAL_GetTick>
 8001614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001616:	e00a      	b.n	800162e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001618:	f7ff fb76 	bl	8000d08 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f241 3288 	movw	r2, #5000	; 0x1388
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e04f      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162e:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 020c 	and.w	r2, r3, #12
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	429a      	cmp	r2, r3
 800163e:	d1eb      	bne.n	8001618 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 030f 	and.w	r3, r3, #15
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d20c      	bcs.n	8001668 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164e:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001656:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	d001      	beq.n	8001668 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e032      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	4916      	ldr	r1, [pc, #88]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	4313      	orrs	r3, r2
 8001684:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	2b00      	cmp	r3, #0
 8001690:	d009      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	490e      	ldr	r1, [pc, #56]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016a6:	f000 fb7f 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 80016aa:	4602      	mov	r2, r0
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	490a      	ldr	r1, [pc, #40]	; (80016e0 <HAL_RCC_ClockConfig+0x1c0>)
 80016b8:	5ccb      	ldrb	r3, [r1, r3]
 80016ba:	fa22 f303 	lsr.w	r3, r2, r3
 80016be:	4a09      	ldr	r2, [pc, #36]	; (80016e4 <HAL_RCC_ClockConfig+0x1c4>)
 80016c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_RCC_ClockConfig+0x1c8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fada 	bl	8000c80 <HAL_InitTick>

  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023c00 	.word	0x40023c00
 80016dc:	40023800 	.word	0x40023800
 80016e0:	08003f58 	.word	0x08003f58
 80016e4:	20000000 	.word	0x20000000
 80016e8:	20000004 	.word	0x20000004

080016ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <HAL_RCC_GetHCLKFreq+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000000 	.word	0x20000000

08001704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001708:	f7ff fff0 	bl	80016ec <HAL_RCC_GetHCLKFreq>
 800170c:	4602      	mov	r2, r0
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	0a9b      	lsrs	r3, r3, #10
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	4903      	ldr	r1, [pc, #12]	; (8001728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800171a:	5ccb      	ldrb	r3, [r1, r3]
 800171c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001720:	4618      	mov	r0, r3
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40023800 	.word	0x40023800
 8001728:	08003f68 	.word	0x08003f68

0800172c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001730:	f7ff ffdc 	bl	80016ec <HAL_RCC_GetHCLKFreq>
 8001734:	4602      	mov	r2, r0
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	0b5b      	lsrs	r3, r3, #13
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	4903      	ldr	r1, [pc, #12]	; (8001750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001742:	5ccb      	ldrb	r3, [r1, r3]
 8001744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001748:	4618      	mov	r0, r3
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40023800 	.word	0x40023800
 8001750:	08003f68 	.word	0x08003f68

08001754 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08c      	sub	sp, #48	; 0x30
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b00      	cmp	r3, #0
 800178a:	d010      	beq.n	80017ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800178c:	4b6f      	ldr	r3, [pc, #444]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800178e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001792:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800179a:	496c      	ldr	r1, [pc, #432]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800179c:	4313      	orrs	r3, r2
 800179e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80017aa:	2301      	movs	r3, #1
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d010      	beq.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80017ba:	4b64      	ldr	r3, [pc, #400]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017c0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c8:	4960      	ldr	r1, [pc, #384]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80017d8:	2301      	movs	r3, #1
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d017      	beq.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80017e8:	4b58      	ldr	r3, [pc, #352]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4955      	ldr	r1, [pc, #340]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001806:	d101      	bne.n	800180c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001808:	2301      	movs	r3, #1
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001814:	2301      	movs	r3, #1
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b00      	cmp	r3, #0
 8001822:	d017      	beq.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001824:	4b49      	ldr	r3, [pc, #292]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800182a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001832:	4946      	ldr	r1, [pc, #280]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001834:	4313      	orrs	r3, r2
 8001836:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001842:	d101      	bne.n	8001848 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001844:	2301      	movs	r3, #1
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001850:	2301      	movs	r3, #1
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0320 	and.w	r3, r3, #32
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 808a 	beq.w	8001976 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	4b39      	ldr	r3, [pc, #228]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a38      	ldr	r2, [pc, #224]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800186c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
 8001872:	4b36      	ldr	r3, [pc, #216]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800187e:	4b34      	ldr	r3, [pc, #208]	; (8001950 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a33      	ldr	r2, [pc, #204]	; (8001950 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001888:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800188a:	f7ff fa3d 	bl	8000d08 <HAL_GetTick>
 800188e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001890:	e008      	b.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001892:	f7ff fa39 	bl	8000d08 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e278      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80018a4:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018b0:	4b26      	ldr	r3, [pc, #152]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018b8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d02f      	beq.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018c8:	6a3a      	ldr	r2, [r7, #32]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d028      	beq.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018ce:	4b1f      	ldr	r3, [pc, #124]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018d6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018de:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80018e4:	4a19      	ldr	r2, [pc, #100]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d114      	bne.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80018f6:	f7ff fa07 	bl	8000d08 <HAL_GetTick>
 80018fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fc:	e00a      	b.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fe:	f7ff fa03 	bl	8000d08 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	f241 3288 	movw	r2, #5000	; 0x1388
 800190c:	4293      	cmp	r3, r2
 800190e:	d901      	bls.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e240      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001914:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0ee      	beq.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001928:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800192c:	d114      	bne.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800192e:	4b07      	ldr	r3, [pc, #28]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800193e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001942:	4902      	ldr	r1, [pc, #8]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001944:	4313      	orrs	r3, r2
 8001946:	608b      	str	r3, [r1, #8]
 8001948:	e00c      	b.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	40007000 	.word	0x40007000
 8001954:	42470e40 	.word	0x42470e40
 8001958:	4b4a      	ldr	r3, [pc, #296]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	4a49      	ldr	r2, [pc, #292]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800195e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001962:	6093      	str	r3, [r2, #8]
 8001964:	4b47      	ldr	r3, [pc, #284]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001966:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001970:	4944      	ldr	r1, [pc, #272]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001972:	4313      	orrs	r3, r2
 8001974:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	2b00      	cmp	r3, #0
 8001980:	d004      	beq.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001988:	4b3f      	ldr	r3, [pc, #252]	; (8001a88 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800198a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00a      	beq.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001998:	4b3a      	ldr	r3, [pc, #232]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800199a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a6:	4937      	ldr	r1, [pc, #220]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00a      	beq.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80019ba:	4b32      	ldr	r3, [pc, #200]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c8:	492e      	ldr	r1, [pc, #184]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d011      	beq.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80019dc:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ea:	4926      	ldr	r1, [pc, #152]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80019fa:	d101      	bne.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80019fc:	2301      	movs	r3, #1
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00a      	beq.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	491a      	ldr	r1, [pc, #104]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d011      	beq.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a34:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a3c:	4911      	ldr	r1, [pc, #68]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d005      	beq.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a60:	f040 80ff 	bne.w	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001a6a:	f7ff f94d 	bl	8000d08 <HAL_GetTick>
 8001a6e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001a70:	e00e      	b.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001a72:	f7ff f949 	bl	8000d08 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d907      	bls.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e188      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001a84:	40023800 	.word	0x40023800
 8001a88:	424711e0 	.word	0x424711e0
 8001a8c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001a90:	4b7e      	ldr	r3, [pc, #504]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1ea      	bne.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d009      	beq.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d028      	beq.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d124      	bne.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001ac4:	4b71      	ldr	r3, [pc, #452]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aca:	0c1b      	lsrs	r3, r3, #16
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001ad6:	4b6d      	ldr	r3, [pc, #436]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001adc:	0e1b      	lsrs	r3, r3, #24
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	019b      	lsls	r3, r3, #6
 8001aee:	431a      	orrs	r2, r3
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	085b      	lsrs	r3, r3, #1
 8001af4:	3b01      	subs	r3, #1
 8001af6:	041b      	lsls	r3, r3, #16
 8001af8:	431a      	orrs	r2, r3
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	061b      	lsls	r3, r3, #24
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	071b      	lsls	r3, r3, #28
 8001b06:	4961      	ldr	r1, [pc, #388]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d004      	beq.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b22:	d00a      	beq.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d035      	beq.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b38:	d130      	bne.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001b3a:	4b54      	ldr	r3, [pc, #336]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b40:	0c1b      	lsrs	r3, r3, #16
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	3301      	adds	r3, #1
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b4c:	4b4f      	ldr	r3, [pc, #316]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b52:	0f1b      	lsrs	r3, r3, #28
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	019b      	lsls	r3, r3, #6
 8001b64:	431a      	orrs	r2, r3
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	085b      	lsrs	r3, r3, #1
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	041b      	lsls	r3, r3, #16
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	061b      	lsls	r3, r3, #24
 8001b76:	431a      	orrs	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	071b      	lsls	r3, r3, #28
 8001b7c:	4943      	ldr	r1, [pc, #268]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001b84:	4b41      	ldr	r3, [pc, #260]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b8a:	f023 021f 	bic.w	r2, r3, #31
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	3b01      	subs	r3, #1
 8001b94:	493d      	ldr	r1, [pc, #244]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d029      	beq.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bb0:	d124      	bne.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001bb2:	4b36      	ldr	r3, [pc, #216]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bb8:	0c1b      	lsrs	r3, r3, #16
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001bc4:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bca:	0f1b      	lsrs	r3, r3, #28
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	019b      	lsls	r3, r3, #6
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	085b      	lsrs	r3, r3, #1
 8001be4:	3b01      	subs	r3, #1
 8001be6:	041b      	lsls	r3, r3, #16
 8001be8:	431a      	orrs	r2, r3
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	061b      	lsls	r3, r3, #24
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	071b      	lsls	r3, r3, #28
 8001bf4:	4925      	ldr	r1, [pc, #148]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d016      	beq.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	019b      	lsls	r3, r3, #6
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	085b      	lsrs	r3, r3, #1
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	041b      	lsls	r3, r3, #16
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	061b      	lsls	r3, r3, #24
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	071b      	lsls	r3, r3, #28
 8001c2e:	4917      	ldr	r1, [pc, #92]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001c36:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c3c:	f7ff f864 	bl	8000d08 <HAL_GetTick>
 8001c40:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c44:	f7ff f860 	bl	8000d08 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e09f      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	f040 8095 	bne.w	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c70:	f7ff f84a 	bl	8000d08 <HAL_GetTick>
 8001c74:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c76:	e00f      	b.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001c78:	f7ff f846 	bl	8000d08 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d908      	bls.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e085      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	42470068 	.word	0x42470068
 8001c94:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c98:	4b41      	ldr	r3, [pc, #260]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ca4:	d0e8      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d009      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d02b      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d127      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001cce:	4b34      	ldr	r3, [pc, #208]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd4:	0c1b      	lsrs	r3, r3, #16
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699a      	ldr	r2, [r3, #24]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	019b      	lsls	r3, r3, #6
 8001cea:	431a      	orrs	r2, r3
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	085b      	lsrs	r3, r3, #1
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	041b      	lsls	r3, r3, #16
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	061b      	lsls	r3, r3, #24
 8001cfc:	4928      	ldr	r1, [pc, #160]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001d04:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d0a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d12:	3b01      	subs	r3, #1
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	4922      	ldr	r1, [pc, #136]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d01d      	beq.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d32:	d118      	bne.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001d34:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3a:	0e1b      	lsrs	r3, r3, #24
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699a      	ldr	r2, [r3, #24]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	019b      	lsls	r3, r3, #6
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	085b      	lsrs	r3, r3, #1
 8001d54:	3b01      	subs	r3, #1
 8001d56:	041b      	lsls	r3, r3, #16
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	061b      	lsls	r3, r3, #24
 8001d5e:	4910      	ldr	r1, [pc, #64]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001d66:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d6c:	f7fe ffcc 	bl	8000d08 <HAL_GetTick>
 8001d70:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001d74:	f7fe ffc8 	bl	8000d08 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e007      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d92:	d1ef      	bne.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3730      	adds	r7, #48	; 0x30
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	42470070 	.word	0x42470070

08001da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dac:	b0ae      	sub	sp, #184	; 0xb8
 8001dae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dce:	4bcb      	ldr	r3, [pc, #812]	; (80020fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	f200 8206 	bhi.w	80021e8 <HAL_RCC_GetSysClockFreq+0x440>
 8001ddc:	a201      	add	r2, pc, #4	; (adr r2, 8001de4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de2:	bf00      	nop
 8001de4:	08001e19 	.word	0x08001e19
 8001de8:	080021e9 	.word	0x080021e9
 8001dec:	080021e9 	.word	0x080021e9
 8001df0:	080021e9 	.word	0x080021e9
 8001df4:	08001e21 	.word	0x08001e21
 8001df8:	080021e9 	.word	0x080021e9
 8001dfc:	080021e9 	.word	0x080021e9
 8001e00:	080021e9 	.word	0x080021e9
 8001e04:	08001e29 	.word	0x08001e29
 8001e08:	080021e9 	.word	0x080021e9
 8001e0c:	080021e9 	.word	0x080021e9
 8001e10:	080021e9 	.word	0x080021e9
 8001e14:	08002019 	.word	0x08002019
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e18:	4bb9      	ldr	r3, [pc, #740]	; (8002100 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001e1e:	e1e7      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e20:	4bb8      	ldr	r3, [pc, #736]	; (8002104 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e26:	e1e3      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e28:	4bb4      	ldr	r3, [pc, #720]	; (80020fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e34:	4bb1      	ldr	r3, [pc, #708]	; (80020fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d071      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e40:	4bae      	ldr	r3, [pc, #696]	; (80020fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	099b      	lsrs	r3, r3, #6
 8001e46:	2200      	movs	r2, #0
 8001e48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e4c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001e62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001e66:	4622      	mov	r2, r4
 8001e68:	462b      	mov	r3, r5
 8001e6a:	f04f 0000 	mov.w	r0, #0
 8001e6e:	f04f 0100 	mov.w	r1, #0
 8001e72:	0159      	lsls	r1, r3, #5
 8001e74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e78:	0150      	lsls	r0, r2, #5
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4621      	mov	r1, r4
 8001e80:	1a51      	subs	r1, r2, r1
 8001e82:	6439      	str	r1, [r7, #64]	; 0x40
 8001e84:	4629      	mov	r1, r5
 8001e86:	eb63 0301 	sbc.w	r3, r3, r1
 8001e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001e98:	4649      	mov	r1, r9
 8001e9a:	018b      	lsls	r3, r1, #6
 8001e9c:	4641      	mov	r1, r8
 8001e9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ea2:	4641      	mov	r1, r8
 8001ea4:	018a      	lsls	r2, r1, #6
 8001ea6:	4641      	mov	r1, r8
 8001ea8:	1a51      	subs	r1, r2, r1
 8001eaa:	63b9      	str	r1, [r7, #56]	; 0x38
 8001eac:	4649      	mov	r1, r9
 8001eae:	eb63 0301 	sbc.w	r3, r3, r1
 8001eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001ec0:	4649      	mov	r1, r9
 8001ec2:	00cb      	lsls	r3, r1, #3
 8001ec4:	4641      	mov	r1, r8
 8001ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001eca:	4641      	mov	r1, r8
 8001ecc:	00ca      	lsls	r2, r1, #3
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4622      	mov	r2, r4
 8001ed6:	189b      	adds	r3, r3, r2
 8001ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8001eda:	462b      	mov	r3, r5
 8001edc:	460a      	mov	r2, r1
 8001ede:	eb42 0303 	adc.w	r3, r2, r3
 8001ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	024b      	lsls	r3, r1, #9
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001efa:	4621      	mov	r1, r4
 8001efc:	024a      	lsls	r2, r1, #9
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f06:	2200      	movs	r2, #0
 8001f08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001f10:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001f14:	f7fe f976 	bl	8000204 <__aeabi_uldivmod>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f22:	e067      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f24:	4b75      	ldr	r3, [pc, #468]	; (80020fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	099b      	lsrs	r3, r3, #6
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f30:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001f34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f3e:	2300      	movs	r3, #0
 8001f40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f42:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001f46:	4622      	mov	r2, r4
 8001f48:	462b      	mov	r3, r5
 8001f4a:	f04f 0000 	mov.w	r0, #0
 8001f4e:	f04f 0100 	mov.w	r1, #0
 8001f52:	0159      	lsls	r1, r3, #5
 8001f54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f58:	0150      	lsls	r0, r2, #5
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4621      	mov	r1, r4
 8001f60:	1a51      	subs	r1, r2, r1
 8001f62:	62b9      	str	r1, [r7, #40]	; 0x28
 8001f64:	4629      	mov	r1, r5
 8001f66:	eb63 0301 	sbc.w	r3, r3, r1
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001f78:	4649      	mov	r1, r9
 8001f7a:	018b      	lsls	r3, r1, #6
 8001f7c:	4641      	mov	r1, r8
 8001f7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f82:	4641      	mov	r1, r8
 8001f84:	018a      	lsls	r2, r1, #6
 8001f86:	4641      	mov	r1, r8
 8001f88:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f8c:	4649      	mov	r1, r9
 8001f8e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f9e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001fa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fa6:	4692      	mov	sl, r2
 8001fa8:	469b      	mov	fp, r3
 8001faa:	4623      	mov	r3, r4
 8001fac:	eb1a 0303 	adds.w	r3, sl, r3
 8001fb0:	623b      	str	r3, [r7, #32]
 8001fb2:	462b      	mov	r3, r5
 8001fb4:	eb4b 0303 	adc.w	r3, fp, r3
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001fc6:	4629      	mov	r1, r5
 8001fc8:	028b      	lsls	r3, r1, #10
 8001fca:	4621      	mov	r1, r4
 8001fcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fd0:	4621      	mov	r1, r4
 8001fd2:	028a      	lsls	r2, r1, #10
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fdc:	2200      	movs	r2, #0
 8001fde:	673b      	str	r3, [r7, #112]	; 0x70
 8001fe0:	677a      	str	r2, [r7, #116]	; 0x74
 8001fe2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001fe6:	f7fe f90d 	bl	8000204 <__aeabi_uldivmod>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4613      	mov	r3, r2
 8001ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ff4:	4b41      	ldr	r3, [pc, #260]	; (80020fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	0c1b      	lsrs	r3, r3, #16
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	3301      	adds	r3, #1
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002006:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800200a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800200e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002012:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002016:	e0eb      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002018:	4b38      	ldr	r3, [pc, #224]	; (80020fc <HAL_RCC_GetSysClockFreq+0x354>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002020:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002024:	4b35      	ldr	r3, [pc, #212]	; (80020fc <HAL_RCC_GetSysClockFreq+0x354>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d06b      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002030:	4b32      	ldr	r3, [pc, #200]	; (80020fc <HAL_RCC_GetSysClockFreq+0x354>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	099b      	lsrs	r3, r3, #6
 8002036:	2200      	movs	r2, #0
 8002038:	66bb      	str	r3, [r7, #104]	; 0x68
 800203a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800203c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800203e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002042:	663b      	str	r3, [r7, #96]	; 0x60
 8002044:	2300      	movs	r3, #0
 8002046:	667b      	str	r3, [r7, #100]	; 0x64
 8002048:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800204c:	4622      	mov	r2, r4
 800204e:	462b      	mov	r3, r5
 8002050:	f04f 0000 	mov.w	r0, #0
 8002054:	f04f 0100 	mov.w	r1, #0
 8002058:	0159      	lsls	r1, r3, #5
 800205a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800205e:	0150      	lsls	r0, r2, #5
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4621      	mov	r1, r4
 8002066:	1a51      	subs	r1, r2, r1
 8002068:	61b9      	str	r1, [r7, #24]
 800206a:	4629      	mov	r1, r5
 800206c:	eb63 0301 	sbc.w	r3, r3, r1
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800207e:	4659      	mov	r1, fp
 8002080:	018b      	lsls	r3, r1, #6
 8002082:	4651      	mov	r1, sl
 8002084:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002088:	4651      	mov	r1, sl
 800208a:	018a      	lsls	r2, r1, #6
 800208c:	4651      	mov	r1, sl
 800208e:	ebb2 0801 	subs.w	r8, r2, r1
 8002092:	4659      	mov	r1, fp
 8002094:	eb63 0901 	sbc.w	r9, r3, r1
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020ac:	4690      	mov	r8, r2
 80020ae:	4699      	mov	r9, r3
 80020b0:	4623      	mov	r3, r4
 80020b2:	eb18 0303 	adds.w	r3, r8, r3
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	462b      	mov	r3, r5
 80020ba:	eb49 0303 	adc.w	r3, r9, r3
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80020cc:	4629      	mov	r1, r5
 80020ce:	024b      	lsls	r3, r1, #9
 80020d0:	4621      	mov	r1, r4
 80020d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020d6:	4621      	mov	r1, r4
 80020d8:	024a      	lsls	r2, r1, #9
 80020da:	4610      	mov	r0, r2
 80020dc:	4619      	mov	r1, r3
 80020de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020e2:	2200      	movs	r2, #0
 80020e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80020e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80020e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020ec:	f7fe f88a 	bl	8000204 <__aeabi_uldivmod>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4613      	mov	r3, r2
 80020f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020fa:	e065      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0x420>
 80020fc:	40023800 	.word	0x40023800
 8002100:	00f42400 	.word	0x00f42400
 8002104:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002108:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <HAL_RCC_GetSysClockFreq+0x458>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	099b      	lsrs	r3, r3, #6
 800210e:	2200      	movs	r2, #0
 8002110:	4618      	mov	r0, r3
 8002112:	4611      	mov	r1, r2
 8002114:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002118:	653b      	str	r3, [r7, #80]	; 0x50
 800211a:	2300      	movs	r3, #0
 800211c:	657b      	str	r3, [r7, #84]	; 0x54
 800211e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002122:	4642      	mov	r2, r8
 8002124:	464b      	mov	r3, r9
 8002126:	f04f 0000 	mov.w	r0, #0
 800212a:	f04f 0100 	mov.w	r1, #0
 800212e:	0159      	lsls	r1, r3, #5
 8002130:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002134:	0150      	lsls	r0, r2, #5
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4641      	mov	r1, r8
 800213c:	1a51      	subs	r1, r2, r1
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	4649      	mov	r1, r9
 8002142:	eb63 0301 	sbc.w	r3, r3, r1
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002154:	4659      	mov	r1, fp
 8002156:	018b      	lsls	r3, r1, #6
 8002158:	4651      	mov	r1, sl
 800215a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800215e:	4651      	mov	r1, sl
 8002160:	018a      	lsls	r2, r1, #6
 8002162:	4651      	mov	r1, sl
 8002164:	1a54      	subs	r4, r2, r1
 8002166:	4659      	mov	r1, fp
 8002168:	eb63 0501 	sbc.w	r5, r3, r1
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	00eb      	lsls	r3, r5, #3
 8002176:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800217a:	00e2      	lsls	r2, r4, #3
 800217c:	4614      	mov	r4, r2
 800217e:	461d      	mov	r5, r3
 8002180:	4643      	mov	r3, r8
 8002182:	18e3      	adds	r3, r4, r3
 8002184:	603b      	str	r3, [r7, #0]
 8002186:	464b      	mov	r3, r9
 8002188:	eb45 0303 	adc.w	r3, r5, r3
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	e9d7 4500 	ldrd	r4, r5, [r7]
 800219a:	4629      	mov	r1, r5
 800219c:	028b      	lsls	r3, r1, #10
 800219e:	4621      	mov	r1, r4
 80021a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021a4:	4621      	mov	r1, r4
 80021a6:	028a      	lsls	r2, r1, #10
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021b0:	2200      	movs	r2, #0
 80021b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80021b4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80021b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80021ba:	f7fe f823 	bl	8000204 <__aeabi_uldivmod>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4613      	mov	r3, r2
 80021c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80021c8:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <HAL_RCC_GetSysClockFreq+0x458>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	0f1b      	lsrs	r3, r3, #28
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80021d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80021da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021de:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80021e6:	e003      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_RCC_GetSysClockFreq+0x45c>)
 80021ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80021ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	37b8      	adds	r7, #184	; 0xb8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800
 8002204:	00f42400 	.word	0x00f42400

08002208 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e28d      	b.n	8002736 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 8083 	beq.w	800232e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002228:	4b94      	ldr	r3, [pc, #592]	; (800247c <HAL_RCC_OscConfig+0x274>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 030c 	and.w	r3, r3, #12
 8002230:	2b04      	cmp	r3, #4
 8002232:	d019      	beq.n	8002268 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002234:	4b91      	ldr	r3, [pc, #580]	; (800247c <HAL_RCC_OscConfig+0x274>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800223c:	2b08      	cmp	r3, #8
 800223e:	d106      	bne.n	800224e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002240:	4b8e      	ldr	r3, [pc, #568]	; (800247c <HAL_RCC_OscConfig+0x274>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002248:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800224c:	d00c      	beq.n	8002268 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800224e:	4b8b      	ldr	r3, [pc, #556]	; (800247c <HAL_RCC_OscConfig+0x274>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002256:	2b0c      	cmp	r3, #12
 8002258:	d112      	bne.n	8002280 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800225a:	4b88      	ldr	r3, [pc, #544]	; (800247c <HAL_RCC_OscConfig+0x274>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002266:	d10b      	bne.n	8002280 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	4b84      	ldr	r3, [pc, #528]	; (800247c <HAL_RCC_OscConfig+0x274>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d05b      	beq.n	800232c <HAL_RCC_OscConfig+0x124>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d157      	bne.n	800232c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e25a      	b.n	8002736 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002288:	d106      	bne.n	8002298 <HAL_RCC_OscConfig+0x90>
 800228a:	4b7c      	ldr	r3, [pc, #496]	; (800247c <HAL_RCC_OscConfig+0x274>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a7b      	ldr	r2, [pc, #492]	; (800247c <HAL_RCC_OscConfig+0x274>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e01d      	b.n	80022d4 <HAL_RCC_OscConfig+0xcc>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0xb4>
 80022a2:	4b76      	ldr	r3, [pc, #472]	; (800247c <HAL_RCC_OscConfig+0x274>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a75      	ldr	r2, [pc, #468]	; (800247c <HAL_RCC_OscConfig+0x274>)
 80022a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b73      	ldr	r3, [pc, #460]	; (800247c <HAL_RCC_OscConfig+0x274>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a72      	ldr	r2, [pc, #456]	; (800247c <HAL_RCC_OscConfig+0x274>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_OscConfig+0xcc>
 80022bc:	4b6f      	ldr	r3, [pc, #444]	; (800247c <HAL_RCC_OscConfig+0x274>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a6e      	ldr	r2, [pc, #440]	; (800247c <HAL_RCC_OscConfig+0x274>)
 80022c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b6c      	ldr	r3, [pc, #432]	; (800247c <HAL_RCC_OscConfig+0x274>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a6b      	ldr	r2, [pc, #428]	; (800247c <HAL_RCC_OscConfig+0x274>)
 80022ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022dc:	f7fe fd14 	bl	8000d08 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e4:	f7fe fd10 	bl	8000d08 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	; 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e21f      	b.n	8002736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b61      	ldr	r3, [pc, #388]	; (800247c <HAL_RCC_OscConfig+0x274>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0xdc>
 8002302:	e014      	b.n	800232e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002304:	f7fe fd00 	bl	8000d08 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800230c:	f7fe fcfc 	bl	8000d08 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	; 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e20b      	b.n	8002736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231e:	4b57      	ldr	r3, [pc, #348]	; (800247c <HAL_RCC_OscConfig+0x274>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x104>
 800232a:	e000      	b.n	800232e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d06f      	beq.n	800241a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800233a:	4b50      	ldr	r3, [pc, #320]	; (800247c <HAL_RCC_OscConfig+0x274>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b00      	cmp	r3, #0
 8002344:	d017      	beq.n	8002376 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002346:	4b4d      	ldr	r3, [pc, #308]	; (800247c <HAL_RCC_OscConfig+0x274>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800234e:	2b08      	cmp	r3, #8
 8002350:	d105      	bne.n	800235e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002352:	4b4a      	ldr	r3, [pc, #296]	; (800247c <HAL_RCC_OscConfig+0x274>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800235e:	4b47      	ldr	r3, [pc, #284]	; (800247c <HAL_RCC_OscConfig+0x274>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002366:	2b0c      	cmp	r3, #12
 8002368:	d11c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800236a:	4b44      	ldr	r3, [pc, #272]	; (800247c <HAL_RCC_OscConfig+0x274>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d116      	bne.n	80023a4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002376:	4b41      	ldr	r3, [pc, #260]	; (800247c <HAL_RCC_OscConfig+0x274>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <HAL_RCC_OscConfig+0x186>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d001      	beq.n	800238e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e1d3      	b.n	8002736 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238e:	4b3b      	ldr	r3, [pc, #236]	; (800247c <HAL_RCC_OscConfig+0x274>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4937      	ldr	r1, [pc, #220]	; (800247c <HAL_RCC_OscConfig+0x274>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a2:	e03a      	b.n	800241a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d020      	beq.n	80023ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ac:	4b34      	ldr	r3, [pc, #208]	; (8002480 <HAL_RCC_OscConfig+0x278>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b2:	f7fe fca9 	bl	8000d08 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ba:	f7fe fca5 	bl	8000d08 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e1b4      	b.n	8002736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023cc:	4b2b      	ldr	r3, [pc, #172]	; (800247c <HAL_RCC_OscConfig+0x274>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d8:	4b28      	ldr	r3, [pc, #160]	; (800247c <HAL_RCC_OscConfig+0x274>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4925      	ldr	r1, [pc, #148]	; (800247c <HAL_RCC_OscConfig+0x274>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	600b      	str	r3, [r1, #0]
 80023ec:	e015      	b.n	800241a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ee:	4b24      	ldr	r3, [pc, #144]	; (8002480 <HAL_RCC_OscConfig+0x278>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7fe fc88 	bl	8000d08 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023fc:	f7fe fc84 	bl	8000d08 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e193      	b.n	8002736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240e:	4b1b      	ldr	r3, [pc, #108]	; (800247c <HAL_RCC_OscConfig+0x274>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d036      	beq.n	8002494 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d016      	beq.n	800245c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_RCC_OscConfig+0x27c>)
 8002430:	2201      	movs	r2, #1
 8002432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002434:	f7fe fc68 	bl	8000d08 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800243c:	f7fe fc64 	bl	8000d08 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e173      	b.n	8002736 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_RCC_OscConfig+0x274>)
 8002450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0x234>
 800245a:	e01b      	b.n	8002494 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800245c:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_RCC_OscConfig+0x27c>)
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002462:	f7fe fc51 	bl	8000d08 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002468:	e00e      	b.n	8002488 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800246a:	f7fe fc4d 	bl	8000d08 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d907      	bls.n	8002488 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e15c      	b.n	8002736 <HAL_RCC_OscConfig+0x52e>
 800247c:	40023800 	.word	0x40023800
 8002480:	42470000 	.word	0x42470000
 8002484:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002488:	4b8a      	ldr	r3, [pc, #552]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 800248a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1ea      	bne.n	800246a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 8097 	beq.w	80025d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a2:	2300      	movs	r3, #0
 80024a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a6:	4b83      	ldr	r3, [pc, #524]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10f      	bne.n	80024d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	4b7f      	ldr	r3, [pc, #508]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	4a7e      	ldr	r2, [pc, #504]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 80024bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c0:	6413      	str	r3, [r2, #64]	; 0x40
 80024c2:	4b7c      	ldr	r3, [pc, #496]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ce:	2301      	movs	r3, #1
 80024d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d2:	4b79      	ldr	r3, [pc, #484]	; (80026b8 <HAL_RCC_OscConfig+0x4b0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d118      	bne.n	8002510 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024de:	4b76      	ldr	r3, [pc, #472]	; (80026b8 <HAL_RCC_OscConfig+0x4b0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a75      	ldr	r2, [pc, #468]	; (80026b8 <HAL_RCC_OscConfig+0x4b0>)
 80024e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ea:	f7fe fc0d 	bl	8000d08 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f2:	f7fe fc09 	bl	8000d08 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e118      	b.n	8002736 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002504:	4b6c      	ldr	r3, [pc, #432]	; (80026b8 <HAL_RCC_OscConfig+0x4b0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d106      	bne.n	8002526 <HAL_RCC_OscConfig+0x31e>
 8002518:	4b66      	ldr	r3, [pc, #408]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 800251a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251c:	4a65      	ldr	r2, [pc, #404]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6713      	str	r3, [r2, #112]	; 0x70
 8002524:	e01c      	b.n	8002560 <HAL_RCC_OscConfig+0x358>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b05      	cmp	r3, #5
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0x340>
 800252e:	4b61      	ldr	r3, [pc, #388]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	4a60      	ldr	r2, [pc, #384]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 8002534:	f043 0304 	orr.w	r3, r3, #4
 8002538:	6713      	str	r3, [r2, #112]	; 0x70
 800253a:	4b5e      	ldr	r3, [pc, #376]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	4a5d      	ldr	r2, [pc, #372]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	6713      	str	r3, [r2, #112]	; 0x70
 8002546:	e00b      	b.n	8002560 <HAL_RCC_OscConfig+0x358>
 8002548:	4b5a      	ldr	r3, [pc, #360]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 800254a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254c:	4a59      	ldr	r2, [pc, #356]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 800254e:	f023 0301 	bic.w	r3, r3, #1
 8002552:	6713      	str	r3, [r2, #112]	; 0x70
 8002554:	4b57      	ldr	r3, [pc, #348]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 8002556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002558:	4a56      	ldr	r2, [pc, #344]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 800255a:	f023 0304 	bic.w	r3, r3, #4
 800255e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d015      	beq.n	8002594 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002568:	f7fe fbce 	bl	8000d08 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256e:	e00a      	b.n	8002586 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002570:	f7fe fbca 	bl	8000d08 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e0d7      	b.n	8002736 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002586:	4b4b      	ldr	r3, [pc, #300]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0ee      	beq.n	8002570 <HAL_RCC_OscConfig+0x368>
 8002592:	e014      	b.n	80025be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002594:	f7fe fbb8 	bl	8000d08 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259a:	e00a      	b.n	80025b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800259c:	f7fe fbb4 	bl	8000d08 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e0c1      	b.n	8002736 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b2:	4b40      	ldr	r3, [pc, #256]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1ee      	bne.n	800259c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025be:	7dfb      	ldrb	r3, [r7, #23]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d105      	bne.n	80025d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c4:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	4a3a      	ldr	r2, [pc, #232]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 80025ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80ad 	beq.w	8002734 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025da:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d060      	beq.n	80026a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d145      	bne.n	800267a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ee:	4b33      	ldr	r3, [pc, #204]	; (80026bc <HAL_RCC_OscConfig+0x4b4>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe fb88 	bl	8000d08 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fc:	f7fe fb84 	bl	8000d08 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e093      	b.n	8002736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260e:	4b29      	ldr	r3, [pc, #164]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69da      	ldr	r2, [r3, #28]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	019b      	lsls	r3, r3, #6
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	085b      	lsrs	r3, r3, #1
 8002632:	3b01      	subs	r3, #1
 8002634:	041b      	lsls	r3, r3, #16
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263c:	061b      	lsls	r3, r3, #24
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	071b      	lsls	r3, r3, #28
 8002646:	491b      	ldr	r1, [pc, #108]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800264c:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <HAL_RCC_OscConfig+0x4b4>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002652:	f7fe fb59 	bl	8000d08 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265a:	f7fe fb55 	bl	8000d08 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e064      	b.n	8002736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x452>
 8002678:	e05c      	b.n	8002734 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_RCC_OscConfig+0x4b4>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe fb42 	bl	8000d08 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002688:	f7fe fb3e 	bl	8000d08 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e04d      	b.n	8002736 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_RCC_OscConfig+0x4ac>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x480>
 80026a6:	e045      	b.n	8002734 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d107      	bne.n	80026c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e040      	b.n	8002736 <HAL_RCC_OscConfig+0x52e>
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40007000 	.word	0x40007000
 80026bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026c0:	4b1f      	ldr	r3, [pc, #124]	; (8002740 <HAL_RCC_OscConfig+0x538>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d030      	beq.n	8002730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d129      	bne.n	8002730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d122      	bne.n	8002730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026f0:	4013      	ands	r3, r2
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d119      	bne.n	8002730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	085b      	lsrs	r3, r3, #1
 8002708:	3b01      	subs	r3, #1
 800270a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d10f      	bne.n	8002730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800271c:	429a      	cmp	r2, r3
 800271e:	d107      	bne.n	8002730 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800

08002744 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e03f      	b.n	80027d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7fe f8a4 	bl	80008b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2224      	movs	r2, #36	; 0x24
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002786:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f929 	bl	80029e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800279c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b08a      	sub	sp, #40	; 0x28
 80027e2:	af02      	add	r7, sp, #8
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	603b      	str	r3, [r7, #0]
 80027ea:	4613      	mov	r3, r2
 80027ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b20      	cmp	r3, #32
 80027fc:	d17c      	bne.n	80028f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <HAL_UART_Transmit+0x2c>
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e075      	b.n	80028fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_UART_Transmit+0x3e>
 8002818:	2302      	movs	r3, #2
 800281a:	e06e      	b.n	80028fa <HAL_UART_Transmit+0x11c>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2221      	movs	r2, #33	; 0x21
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002832:	f7fe fa69 	bl	8000d08 <HAL_GetTick>
 8002836:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	88fa      	ldrh	r2, [r7, #6]
 800283c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	88fa      	ldrh	r2, [r7, #6]
 8002842:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284c:	d108      	bne.n	8002860 <HAL_UART_Transmit+0x82>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d104      	bne.n	8002860 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	e003      	b.n	8002868 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002864:	2300      	movs	r3, #0
 8002866:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002870:	e02a      	b.n	80028c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2200      	movs	r2, #0
 800287a:	2180      	movs	r1, #128	; 0x80
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 f840 	bl	8002902 <UART_WaitOnFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e036      	b.n	80028fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10b      	bne.n	80028aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	3302      	adds	r3, #2
 80028a6:	61bb      	str	r3, [r7, #24]
 80028a8:	e007      	b.n	80028ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	781a      	ldrb	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	3301      	adds	r3, #1
 80028b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028be:	b29b      	uxth	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1cf      	bne.n	8002872 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2200      	movs	r2, #0
 80028da:	2140      	movs	r1, #64	; 0x40
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f810 	bl	8002902 <UART_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e006      	b.n	80028fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	e000      	b.n	80028fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028f8:	2302      	movs	r3, #2
  }
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3720      	adds	r7, #32
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b090      	sub	sp, #64	; 0x40
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	4613      	mov	r3, r2
 8002910:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002912:	e050      	b.n	80029b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291a:	d04c      	beq.n	80029b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800291c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <UART_WaitOnFlagUntilTimeout+0x30>
 8002922:	f7fe f9f1 	bl	8000d08 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800292e:	429a      	cmp	r2, r3
 8002930:	d241      	bcs.n	80029b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	330c      	adds	r3, #12
 8002938:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	e853 3f00 	ldrex	r3, [r3]
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002948:	63fb      	str	r3, [r7, #60]	; 0x3c
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	330c      	adds	r3, #12
 8002950:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002952:	637a      	str	r2, [r7, #52]	; 0x34
 8002954:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002956:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002958:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800295a:	e841 2300 	strex	r3, r2, [r1]
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1e5      	bne.n	8002932 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	3314      	adds	r3, #20
 800296c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	e853 3f00 	ldrex	r3, [r3]
 8002974:	613b      	str	r3, [r7, #16]
   return(result);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	63bb      	str	r3, [r7, #56]	; 0x38
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	3314      	adds	r3, #20
 8002984:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002986:	623a      	str	r2, [r7, #32]
 8002988:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298a:	69f9      	ldr	r1, [r7, #28]
 800298c:	6a3a      	ldr	r2, [r7, #32]
 800298e:	e841 2300 	strex	r3, r2, [r1]
 8002992:	61bb      	str	r3, [r7, #24]
   return(result);
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1e5      	bne.n	8002966 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e00f      	b.n	80029d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4013      	ands	r3, r2
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	bf0c      	ite	eq
 80029c6:	2301      	moveq	r3, #1
 80029c8:	2300      	movne	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d09f      	beq.n	8002914 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3740      	adds	r7, #64	; 0x40
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029e4:	b0c0      	sub	sp, #256	; 0x100
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80029f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029fc:	68d9      	ldr	r1, [r3, #12]
 80029fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	ea40 0301 	orr.w	r3, r0, r1
 8002a08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a38:	f021 010c 	bic.w	r1, r1, #12
 8002a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a46:	430b      	orrs	r3, r1
 8002a48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5a:	6999      	ldr	r1, [r3, #24]
 8002a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	ea40 0301 	orr.w	r3, r0, r1
 8002a66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4b8f      	ldr	r3, [pc, #572]	; (8002cac <UART_SetConfig+0x2cc>)
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d005      	beq.n	8002a80 <UART_SetConfig+0xa0>
 8002a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	4b8d      	ldr	r3, [pc, #564]	; (8002cb0 <UART_SetConfig+0x2d0>)
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d104      	bne.n	8002a8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a80:	f7fe fe54 	bl	800172c <HAL_RCC_GetPCLK2Freq>
 8002a84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a88:	e003      	b.n	8002a92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a8a:	f7fe fe3b 	bl	8001704 <HAL_RCC_GetPCLK1Freq>
 8002a8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a9c:	f040 810c 	bne.w	8002cb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002aaa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002aae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ab2:	4622      	mov	r2, r4
 8002ab4:	462b      	mov	r3, r5
 8002ab6:	1891      	adds	r1, r2, r2
 8002ab8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002aba:	415b      	adcs	r3, r3
 8002abc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002abe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	eb12 0801 	adds.w	r8, r2, r1
 8002ac8:	4629      	mov	r1, r5
 8002aca:	eb43 0901 	adc.w	r9, r3, r1
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ae2:	4690      	mov	r8, r2
 8002ae4:	4699      	mov	r9, r3
 8002ae6:	4623      	mov	r3, r4
 8002ae8:	eb18 0303 	adds.w	r3, r8, r3
 8002aec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002af0:	462b      	mov	r3, r5
 8002af2:	eb49 0303 	adc.w	r3, r9, r3
 8002af6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b0e:	460b      	mov	r3, r1
 8002b10:	18db      	adds	r3, r3, r3
 8002b12:	653b      	str	r3, [r7, #80]	; 0x50
 8002b14:	4613      	mov	r3, r2
 8002b16:	eb42 0303 	adc.w	r3, r2, r3
 8002b1a:	657b      	str	r3, [r7, #84]	; 0x54
 8002b1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b24:	f7fd fb6e 	bl	8000204 <__aeabi_uldivmod>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4b61      	ldr	r3, [pc, #388]	; (8002cb4 <UART_SetConfig+0x2d4>)
 8002b2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	011c      	lsls	r4, r3, #4
 8002b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b48:	4642      	mov	r2, r8
 8002b4a:	464b      	mov	r3, r9
 8002b4c:	1891      	adds	r1, r2, r2
 8002b4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b50:	415b      	adcs	r3, r3
 8002b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b58:	4641      	mov	r1, r8
 8002b5a:	eb12 0a01 	adds.w	sl, r2, r1
 8002b5e:	4649      	mov	r1, r9
 8002b60:	eb43 0b01 	adc.w	fp, r3, r1
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b78:	4692      	mov	sl, r2
 8002b7a:	469b      	mov	fp, r3
 8002b7c:	4643      	mov	r3, r8
 8002b7e:	eb1a 0303 	adds.w	r3, sl, r3
 8002b82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b86:	464b      	mov	r3, r9
 8002b88:	eb4b 0303 	adc.w	r3, fp, r3
 8002b8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ba0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	18db      	adds	r3, r3, r3
 8002ba8:	643b      	str	r3, [r7, #64]	; 0x40
 8002baa:	4613      	mov	r3, r2
 8002bac:	eb42 0303 	adc.w	r3, r2, r3
 8002bb0:	647b      	str	r3, [r7, #68]	; 0x44
 8002bb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002bba:	f7fd fb23 	bl	8000204 <__aeabi_uldivmod>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <UART_SetConfig+0x2d4>)
 8002bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	2264      	movs	r2, #100	; 0x64
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	1acb      	subs	r3, r1, r3
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002bda:	4b36      	ldr	r3, [pc, #216]	; (8002cb4 <UART_SetConfig+0x2d4>)
 8002bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002be8:	441c      	add	r4, r3
 8002bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bf4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002bf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002bfc:	4642      	mov	r2, r8
 8002bfe:	464b      	mov	r3, r9
 8002c00:	1891      	adds	r1, r2, r2
 8002c02:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c04:	415b      	adcs	r3, r3
 8002c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c0c:	4641      	mov	r1, r8
 8002c0e:	1851      	adds	r1, r2, r1
 8002c10:	6339      	str	r1, [r7, #48]	; 0x30
 8002c12:	4649      	mov	r1, r9
 8002c14:	414b      	adcs	r3, r1
 8002c16:	637b      	str	r3, [r7, #52]	; 0x34
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c24:	4659      	mov	r1, fp
 8002c26:	00cb      	lsls	r3, r1, #3
 8002c28:	4651      	mov	r1, sl
 8002c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c2e:	4651      	mov	r1, sl
 8002c30:	00ca      	lsls	r2, r1, #3
 8002c32:	4610      	mov	r0, r2
 8002c34:	4619      	mov	r1, r3
 8002c36:	4603      	mov	r3, r0
 8002c38:	4642      	mov	r2, r8
 8002c3a:	189b      	adds	r3, r3, r2
 8002c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c40:	464b      	mov	r3, r9
 8002c42:	460a      	mov	r2, r1
 8002c44:	eb42 0303 	adc.w	r3, r2, r3
 8002c48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c60:	460b      	mov	r3, r1
 8002c62:	18db      	adds	r3, r3, r3
 8002c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c66:	4613      	mov	r3, r2
 8002c68:	eb42 0303 	adc.w	r3, r2, r3
 8002c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c76:	f7fd fac5 	bl	8000204 <__aeabi_uldivmod>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <UART_SetConfig+0x2d4>)
 8002c80:	fba3 1302 	umull	r1, r3, r3, r2
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	2164      	movs	r1, #100	; 0x64
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	3332      	adds	r3, #50	; 0x32
 8002c92:	4a08      	ldr	r2, [pc, #32]	; (8002cb4 <UART_SetConfig+0x2d4>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	095b      	lsrs	r3, r3, #5
 8002c9a:	f003 0207 	and.w	r2, r3, #7
 8002c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4422      	add	r2, r4
 8002ca6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ca8:	e105      	b.n	8002eb6 <UART_SetConfig+0x4d6>
 8002caa:	bf00      	nop
 8002cac:	40011000 	.word	0x40011000
 8002cb0:	40011400 	.word	0x40011400
 8002cb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002cc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002cc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002cca:	4642      	mov	r2, r8
 8002ccc:	464b      	mov	r3, r9
 8002cce:	1891      	adds	r1, r2, r2
 8002cd0:	6239      	str	r1, [r7, #32]
 8002cd2:	415b      	adcs	r3, r3
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cda:	4641      	mov	r1, r8
 8002cdc:	1854      	adds	r4, r2, r1
 8002cde:	4649      	mov	r1, r9
 8002ce0:	eb43 0501 	adc.w	r5, r3, r1
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	00eb      	lsls	r3, r5, #3
 8002cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cf2:	00e2      	lsls	r2, r4, #3
 8002cf4:	4614      	mov	r4, r2
 8002cf6:	461d      	mov	r5, r3
 8002cf8:	4643      	mov	r3, r8
 8002cfa:	18e3      	adds	r3, r4, r3
 8002cfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d00:	464b      	mov	r3, r9
 8002d02:	eb45 0303 	adc.w	r3, r5, r3
 8002d06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d26:	4629      	mov	r1, r5
 8002d28:	008b      	lsls	r3, r1, #2
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d30:	4621      	mov	r1, r4
 8002d32:	008a      	lsls	r2, r1, #2
 8002d34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d38:	f7fd fa64 	bl	8000204 <__aeabi_uldivmod>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4b60      	ldr	r3, [pc, #384]	; (8002ec4 <UART_SetConfig+0x4e4>)
 8002d42:	fba3 2302 	umull	r2, r3, r3, r2
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	011c      	lsls	r4, r3, #4
 8002d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d5c:	4642      	mov	r2, r8
 8002d5e:	464b      	mov	r3, r9
 8002d60:	1891      	adds	r1, r2, r2
 8002d62:	61b9      	str	r1, [r7, #24]
 8002d64:	415b      	adcs	r3, r3
 8002d66:	61fb      	str	r3, [r7, #28]
 8002d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d6c:	4641      	mov	r1, r8
 8002d6e:	1851      	adds	r1, r2, r1
 8002d70:	6139      	str	r1, [r7, #16]
 8002d72:	4649      	mov	r1, r9
 8002d74:	414b      	adcs	r3, r1
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d84:	4659      	mov	r1, fp
 8002d86:	00cb      	lsls	r3, r1, #3
 8002d88:	4651      	mov	r1, sl
 8002d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d8e:	4651      	mov	r1, sl
 8002d90:	00ca      	lsls	r2, r1, #3
 8002d92:	4610      	mov	r0, r2
 8002d94:	4619      	mov	r1, r3
 8002d96:	4603      	mov	r3, r0
 8002d98:	4642      	mov	r2, r8
 8002d9a:	189b      	adds	r3, r3, r2
 8002d9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002da0:	464b      	mov	r3, r9
 8002da2:	460a      	mov	r2, r1
 8002da4:	eb42 0303 	adc.w	r3, r2, r3
 8002da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002db6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002dc4:	4649      	mov	r1, r9
 8002dc6:	008b      	lsls	r3, r1, #2
 8002dc8:	4641      	mov	r1, r8
 8002dca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dce:	4641      	mov	r1, r8
 8002dd0:	008a      	lsls	r2, r1, #2
 8002dd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002dd6:	f7fd fa15 	bl	8000204 <__aeabi_uldivmod>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4b39      	ldr	r3, [pc, #228]	; (8002ec4 <UART_SetConfig+0x4e4>)
 8002de0:	fba3 1302 	umull	r1, r3, r3, r2
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	2164      	movs	r1, #100	; 0x64
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	3332      	adds	r3, #50	; 0x32
 8002df2:	4a34      	ldr	r2, [pc, #208]	; (8002ec4 <UART_SetConfig+0x4e4>)
 8002df4:	fba2 2303 	umull	r2, r3, r2, r3
 8002df8:	095b      	lsrs	r3, r3, #5
 8002dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dfe:	441c      	add	r4, r3
 8002e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e04:	2200      	movs	r2, #0
 8002e06:	673b      	str	r3, [r7, #112]	; 0x70
 8002e08:	677a      	str	r2, [r7, #116]	; 0x74
 8002e0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e0e:	4642      	mov	r2, r8
 8002e10:	464b      	mov	r3, r9
 8002e12:	1891      	adds	r1, r2, r2
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	415b      	adcs	r3, r3
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e1e:	4641      	mov	r1, r8
 8002e20:	1851      	adds	r1, r2, r1
 8002e22:	6039      	str	r1, [r7, #0]
 8002e24:	4649      	mov	r1, r9
 8002e26:	414b      	adcs	r3, r1
 8002e28:	607b      	str	r3, [r7, #4]
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e36:	4659      	mov	r1, fp
 8002e38:	00cb      	lsls	r3, r1, #3
 8002e3a:	4651      	mov	r1, sl
 8002e3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e40:	4651      	mov	r1, sl
 8002e42:	00ca      	lsls	r2, r1, #3
 8002e44:	4610      	mov	r0, r2
 8002e46:	4619      	mov	r1, r3
 8002e48:	4603      	mov	r3, r0
 8002e4a:	4642      	mov	r2, r8
 8002e4c:	189b      	adds	r3, r3, r2
 8002e4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e50:	464b      	mov	r3, r9
 8002e52:	460a      	mov	r2, r1
 8002e54:	eb42 0303 	adc.w	r3, r2, r3
 8002e58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	663b      	str	r3, [r7, #96]	; 0x60
 8002e64:	667a      	str	r2, [r7, #100]	; 0x64
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e72:	4649      	mov	r1, r9
 8002e74:	008b      	lsls	r3, r1, #2
 8002e76:	4641      	mov	r1, r8
 8002e78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e7c:	4641      	mov	r1, r8
 8002e7e:	008a      	lsls	r2, r1, #2
 8002e80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e84:	f7fd f9be 	bl	8000204 <__aeabi_uldivmod>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <UART_SetConfig+0x4e4>)
 8002e8e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2164      	movs	r1, #100	; 0x64
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	3332      	adds	r3, #50	; 0x32
 8002ea0:	4a08      	ldr	r2, [pc, #32]	; (8002ec4 <UART_SetConfig+0x4e4>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	f003 020f 	and.w	r2, r3, #15
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4422      	add	r2, r4
 8002eb4:	609a      	str	r2, [r3, #8]
}
 8002eb6:	bf00      	nop
 8002eb8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ec2:	bf00      	nop
 8002ec4:	51eb851f 	.word	0x51eb851f

08002ec8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ec8:	b084      	sub	sp, #16
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	f107 001c 	add.w	r0, r7, #28
 8002ed6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d122      	bne.n	8002f26 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d105      	bne.n	8002f1a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fa9c 	bl	8003458 <USB_CoreReset>
 8002f20:	4603      	mov	r3, r0
 8002f22:	73fb      	strb	r3, [r7, #15]
 8002f24:	e01a      	b.n	8002f5c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fa90 	bl	8003458 <USB_CoreReset>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	639a      	str	r2, [r3, #56]	; 0x38
 8002f4e:	e005      	b.n	8002f5c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d10b      	bne.n	8002f7a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f043 0206 	orr.w	r2, r3, #6
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f043 0220 	orr.w	r2, r3, #32
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f86:	b004      	add	sp, #16
 8002f88:	4770      	bx	lr

08002f8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f023 0201 	bic.w	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d115      	bne.n	8002ffa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002fda:	2001      	movs	r0, #1
 8002fdc:	f7fd fea0 	bl	8000d20 <HAL_Delay>
      ms++;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fa28 	bl	800343c <USB_GetMode>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d01e      	beq.n	8003030 <USB_SetCurrentMode+0x84>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b31      	cmp	r3, #49	; 0x31
 8002ff6:	d9f0      	bls.n	8002fda <USB_SetCurrentMode+0x2e>
 8002ff8:	e01a      	b.n	8003030 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d115      	bne.n	800302c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800300c:	2001      	movs	r0, #1
 800300e:	f7fd fe87 	bl	8000d20 <HAL_Delay>
      ms++;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	3301      	adds	r3, #1
 8003016:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fa0f 	bl	800343c <USB_GetMode>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <USB_SetCurrentMode+0x84>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b31      	cmp	r3, #49	; 0x31
 8003028:	d9f0      	bls.n	800300c <USB_SetCurrentMode+0x60>
 800302a:	e001      	b.n	8003030 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e005      	b.n	800303c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b32      	cmp	r3, #50	; 0x32
 8003034:	d101      	bne.n	800303a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003044:	b084      	sub	sp, #16
 8003046:	b580      	push	{r7, lr}
 8003048:	b086      	sub	sp, #24
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003052:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800305e:	2300      	movs	r3, #0
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	e009      	b.n	8003078 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	3340      	adds	r3, #64	; 0x40
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	2200      	movs	r2, #0
 8003070:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	3301      	adds	r3, #1
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	2b0e      	cmp	r3, #14
 800307c:	d9f2      	bls.n	8003064 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800307e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003080:	2b00      	cmp	r3, #0
 8003082:	d11c      	bne.n	80030be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003092:	f043 0302 	orr.w	r3, r3, #2
 8003096:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	e005      	b.n	80030ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80030d0:	461a      	mov	r2, r3
 80030d2:	2300      	movs	r3, #0
 80030d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030dc:	4619      	mov	r1, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e4:	461a      	mov	r2, r3
 80030e6:	680b      	ldr	r3, [r1, #0]
 80030e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80030ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d10c      	bne.n	800310a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80030f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d104      	bne.n	8003100 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80030f6:	2100      	movs	r1, #0
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f965 	bl	80033c8 <USB_SetDevSpeed>
 80030fe:	e008      	b.n	8003112 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003100:	2101      	movs	r1, #1
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f960 	bl	80033c8 <USB_SetDevSpeed>
 8003108:	e003      	b.n	8003112 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800310a:	2103      	movs	r1, #3
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f95b 	bl	80033c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003112:	2110      	movs	r1, #16
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f8f3 	bl	8003300 <USB_FlushTxFifo>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f91f 	bl	8003368 <USB_FlushRxFifo>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800313a:	461a      	mov	r2, r3
 800313c:	2300      	movs	r3, #0
 800313e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003146:	461a      	mov	r2, r3
 8003148:	2300      	movs	r3, #0
 800314a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003152:	461a      	mov	r2, r3
 8003154:	2300      	movs	r3, #0
 8003156:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003158:	2300      	movs	r3, #0
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	e043      	b.n	80031e6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003170:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003174:	d118      	bne.n	80031a8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10a      	bne.n	8003192 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4413      	add	r3, r2
 8003184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003188:	461a      	mov	r2, r3
 800318a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	e013      	b.n	80031ba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4413      	add	r3, r2
 800319a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800319e:	461a      	mov	r2, r3
 80031a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e008      	b.n	80031ba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031b4:	461a      	mov	r2, r3
 80031b6:	2300      	movs	r3, #0
 80031b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c6:	461a      	mov	r2, r3
 80031c8:	2300      	movs	r3, #0
 80031ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d8:	461a      	mov	r2, r3
 80031da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	3301      	adds	r3, #1
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d3b7      	bcc.n	800315e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031ee:	2300      	movs	r3, #0
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	e043      	b.n	800327c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800320a:	d118      	bne.n	800323e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10a      	bne.n	8003228 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4413      	add	r3, r2
 800321a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800321e:	461a      	mov	r2, r3
 8003220:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e013      	b.n	8003250 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4413      	add	r3, r2
 8003230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003234:	461a      	mov	r2, r3
 8003236:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	e008      	b.n	8003250 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4413      	add	r3, r2
 8003246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324a:	461a      	mov	r2, r3
 800324c:	2300      	movs	r3, #0
 800324e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4413      	add	r3, r2
 8003258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325c:	461a      	mov	r2, r3
 800325e:	2300      	movs	r3, #0
 8003260:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4413      	add	r3, r2
 800326a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326e:	461a      	mov	r2, r3
 8003270:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003274:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	3301      	adds	r3, #1
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	429a      	cmp	r2, r3
 8003282:	d3b7      	bcc.n	80031f4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003292:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003296:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80032a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d105      	bne.n	80032b8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	f043 0210 	orr.w	r2, r3, #16
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699a      	ldr	r2, [r3, #24]
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <USB_DevInit+0x2b8>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80032c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	f043 0208 	orr.w	r2, r3, #8
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80032d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d107      	bne.n	80032ec <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032e4:	f043 0304 	orr.w	r3, r3, #4
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80032ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032f8:	b004      	add	sp, #16
 80032fa:	4770      	bx	lr
 80032fc:	803c3800 	.word	0x803c3800

08003300 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	3301      	adds	r3, #1
 8003312:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4a13      	ldr	r2, [pc, #76]	; (8003364 <USB_FlushTxFifo+0x64>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e01b      	b.n	8003358 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	2b00      	cmp	r3, #0
 8003326:	daf2      	bge.n	800330e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	019b      	lsls	r3, r3, #6
 8003330:	f043 0220 	orr.w	r2, r3, #32
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	3301      	adds	r3, #1
 800333c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4a08      	ldr	r2, [pc, #32]	; (8003364 <USB_FlushTxFifo+0x64>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e006      	b.n	8003358 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b20      	cmp	r3, #32
 8003354:	d0f0      	beq.n	8003338 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	00030d40 	.word	0x00030d40

08003368 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3301      	adds	r3, #1
 8003378:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4a11      	ldr	r2, [pc, #68]	; (80033c4 <USB_FlushRxFifo+0x5c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e018      	b.n	80033b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	daf2      	bge.n	8003374 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2210      	movs	r2, #16
 8003396:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	3301      	adds	r3, #1
 800339c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4a08      	ldr	r2, [pc, #32]	; (80033c4 <USB_FlushRxFifo+0x5c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e006      	b.n	80033b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d0f0      	beq.n	8003398 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	00030d40 	.word	0x00030d40

080033c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	68f9      	ldr	r1, [r7, #12]
 80033e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033e8:	4313      	orrs	r3, r2
 80033ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b085      	sub	sp, #20
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003414:	f023 0303 	bic.w	r3, r3, #3
 8003418:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003428:	f043 0302 	orr.w	r3, r3, #2
 800342c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	f003 0301 	and.w	r3, r3, #1
}
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3301      	adds	r3, #1
 8003468:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4a13      	ldr	r2, [pc, #76]	; (80034bc <USB_CoreReset+0x64>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d901      	bls.n	8003476 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e01b      	b.n	80034ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	2b00      	cmp	r3, #0
 800347c:	daf2      	bge.n	8003464 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f043 0201 	orr.w	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	3301      	adds	r3, #1
 8003492:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a09      	ldr	r2, [pc, #36]	; (80034bc <USB_CoreReset+0x64>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e006      	b.n	80034ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d0f0      	beq.n	800348e <USB_CoreReset+0x36>

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	00030d40 	.word	0x00030d40

080034c0 <__errno>:
 80034c0:	4b01      	ldr	r3, [pc, #4]	; (80034c8 <__errno+0x8>)
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	2000000c 	.word	0x2000000c

080034cc <__libc_init_array>:
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	4d0d      	ldr	r5, [pc, #52]	; (8003504 <__libc_init_array+0x38>)
 80034d0:	4c0d      	ldr	r4, [pc, #52]	; (8003508 <__libc_init_array+0x3c>)
 80034d2:	1b64      	subs	r4, r4, r5
 80034d4:	10a4      	asrs	r4, r4, #2
 80034d6:	2600      	movs	r6, #0
 80034d8:	42a6      	cmp	r6, r4
 80034da:	d109      	bne.n	80034f0 <__libc_init_array+0x24>
 80034dc:	4d0b      	ldr	r5, [pc, #44]	; (800350c <__libc_init_array+0x40>)
 80034de:	4c0c      	ldr	r4, [pc, #48]	; (8003510 <__libc_init_array+0x44>)
 80034e0:	f000 fd1e 	bl	8003f20 <_init>
 80034e4:	1b64      	subs	r4, r4, r5
 80034e6:	10a4      	asrs	r4, r4, #2
 80034e8:	2600      	movs	r6, #0
 80034ea:	42a6      	cmp	r6, r4
 80034ec:	d105      	bne.n	80034fa <__libc_init_array+0x2e>
 80034ee:	bd70      	pop	{r4, r5, r6, pc}
 80034f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f4:	4798      	blx	r3
 80034f6:	3601      	adds	r6, #1
 80034f8:	e7ee      	b.n	80034d8 <__libc_init_array+0xc>
 80034fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80034fe:	4798      	blx	r3
 8003500:	3601      	adds	r6, #1
 8003502:	e7f2      	b.n	80034ea <__libc_init_array+0x1e>
 8003504:	08003fdc 	.word	0x08003fdc
 8003508:	08003fdc 	.word	0x08003fdc
 800350c:	08003fdc 	.word	0x08003fdc
 8003510:	08003fe0 	.word	0x08003fe0

08003514 <memset>:
 8003514:	4402      	add	r2, r0
 8003516:	4603      	mov	r3, r0
 8003518:	4293      	cmp	r3, r2
 800351a:	d100      	bne.n	800351e <memset+0xa>
 800351c:	4770      	bx	lr
 800351e:	f803 1b01 	strb.w	r1, [r3], #1
 8003522:	e7f9      	b.n	8003518 <memset+0x4>

08003524 <_puts_r>:
 8003524:	b570      	push	{r4, r5, r6, lr}
 8003526:	460e      	mov	r6, r1
 8003528:	4605      	mov	r5, r0
 800352a:	b118      	cbz	r0, 8003534 <_puts_r+0x10>
 800352c:	6983      	ldr	r3, [r0, #24]
 800352e:	b90b      	cbnz	r3, 8003534 <_puts_r+0x10>
 8003530:	f000 fa48 	bl	80039c4 <__sinit>
 8003534:	69ab      	ldr	r3, [r5, #24]
 8003536:	68ac      	ldr	r4, [r5, #8]
 8003538:	b913      	cbnz	r3, 8003540 <_puts_r+0x1c>
 800353a:	4628      	mov	r0, r5
 800353c:	f000 fa42 	bl	80039c4 <__sinit>
 8003540:	4b2c      	ldr	r3, [pc, #176]	; (80035f4 <_puts_r+0xd0>)
 8003542:	429c      	cmp	r4, r3
 8003544:	d120      	bne.n	8003588 <_puts_r+0x64>
 8003546:	686c      	ldr	r4, [r5, #4]
 8003548:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800354a:	07db      	lsls	r3, r3, #31
 800354c:	d405      	bmi.n	800355a <_puts_r+0x36>
 800354e:	89a3      	ldrh	r3, [r4, #12]
 8003550:	0598      	lsls	r0, r3, #22
 8003552:	d402      	bmi.n	800355a <_puts_r+0x36>
 8003554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003556:	f000 fad3 	bl	8003b00 <__retarget_lock_acquire_recursive>
 800355a:	89a3      	ldrh	r3, [r4, #12]
 800355c:	0719      	lsls	r1, r3, #28
 800355e:	d51d      	bpl.n	800359c <_puts_r+0x78>
 8003560:	6923      	ldr	r3, [r4, #16]
 8003562:	b1db      	cbz	r3, 800359c <_puts_r+0x78>
 8003564:	3e01      	subs	r6, #1
 8003566:	68a3      	ldr	r3, [r4, #8]
 8003568:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800356c:	3b01      	subs	r3, #1
 800356e:	60a3      	str	r3, [r4, #8]
 8003570:	bb39      	cbnz	r1, 80035c2 <_puts_r+0x9e>
 8003572:	2b00      	cmp	r3, #0
 8003574:	da38      	bge.n	80035e8 <_puts_r+0xc4>
 8003576:	4622      	mov	r2, r4
 8003578:	210a      	movs	r1, #10
 800357a:	4628      	mov	r0, r5
 800357c:	f000 f848 	bl	8003610 <__swbuf_r>
 8003580:	3001      	adds	r0, #1
 8003582:	d011      	beq.n	80035a8 <_puts_r+0x84>
 8003584:	250a      	movs	r5, #10
 8003586:	e011      	b.n	80035ac <_puts_r+0x88>
 8003588:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <_puts_r+0xd4>)
 800358a:	429c      	cmp	r4, r3
 800358c:	d101      	bne.n	8003592 <_puts_r+0x6e>
 800358e:	68ac      	ldr	r4, [r5, #8]
 8003590:	e7da      	b.n	8003548 <_puts_r+0x24>
 8003592:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <_puts_r+0xd8>)
 8003594:	429c      	cmp	r4, r3
 8003596:	bf08      	it	eq
 8003598:	68ec      	ldreq	r4, [r5, #12]
 800359a:	e7d5      	b.n	8003548 <_puts_r+0x24>
 800359c:	4621      	mov	r1, r4
 800359e:	4628      	mov	r0, r5
 80035a0:	f000 f888 	bl	80036b4 <__swsetup_r>
 80035a4:	2800      	cmp	r0, #0
 80035a6:	d0dd      	beq.n	8003564 <_puts_r+0x40>
 80035a8:	f04f 35ff 	mov.w	r5, #4294967295
 80035ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035ae:	07da      	lsls	r2, r3, #31
 80035b0:	d405      	bmi.n	80035be <_puts_r+0x9a>
 80035b2:	89a3      	ldrh	r3, [r4, #12]
 80035b4:	059b      	lsls	r3, r3, #22
 80035b6:	d402      	bmi.n	80035be <_puts_r+0x9a>
 80035b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ba:	f000 faa2 	bl	8003b02 <__retarget_lock_release_recursive>
 80035be:	4628      	mov	r0, r5
 80035c0:	bd70      	pop	{r4, r5, r6, pc}
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	da04      	bge.n	80035d0 <_puts_r+0xac>
 80035c6:	69a2      	ldr	r2, [r4, #24]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	dc06      	bgt.n	80035da <_puts_r+0xb6>
 80035cc:	290a      	cmp	r1, #10
 80035ce:	d004      	beq.n	80035da <_puts_r+0xb6>
 80035d0:	6823      	ldr	r3, [r4, #0]
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	6022      	str	r2, [r4, #0]
 80035d6:	7019      	strb	r1, [r3, #0]
 80035d8:	e7c5      	b.n	8003566 <_puts_r+0x42>
 80035da:	4622      	mov	r2, r4
 80035dc:	4628      	mov	r0, r5
 80035de:	f000 f817 	bl	8003610 <__swbuf_r>
 80035e2:	3001      	adds	r0, #1
 80035e4:	d1bf      	bne.n	8003566 <_puts_r+0x42>
 80035e6:	e7df      	b.n	80035a8 <_puts_r+0x84>
 80035e8:	6823      	ldr	r3, [r4, #0]
 80035ea:	250a      	movs	r5, #10
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	6022      	str	r2, [r4, #0]
 80035f0:	701d      	strb	r5, [r3, #0]
 80035f2:	e7db      	b.n	80035ac <_puts_r+0x88>
 80035f4:	08003f94 	.word	0x08003f94
 80035f8:	08003fb4 	.word	0x08003fb4
 80035fc:	08003f74 	.word	0x08003f74

08003600 <puts>:
 8003600:	4b02      	ldr	r3, [pc, #8]	; (800360c <puts+0xc>)
 8003602:	4601      	mov	r1, r0
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	f7ff bf8d 	b.w	8003524 <_puts_r>
 800360a:	bf00      	nop
 800360c:	2000000c 	.word	0x2000000c

08003610 <__swbuf_r>:
 8003610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003612:	460e      	mov	r6, r1
 8003614:	4614      	mov	r4, r2
 8003616:	4605      	mov	r5, r0
 8003618:	b118      	cbz	r0, 8003622 <__swbuf_r+0x12>
 800361a:	6983      	ldr	r3, [r0, #24]
 800361c:	b90b      	cbnz	r3, 8003622 <__swbuf_r+0x12>
 800361e:	f000 f9d1 	bl	80039c4 <__sinit>
 8003622:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <__swbuf_r+0x98>)
 8003624:	429c      	cmp	r4, r3
 8003626:	d12b      	bne.n	8003680 <__swbuf_r+0x70>
 8003628:	686c      	ldr	r4, [r5, #4]
 800362a:	69a3      	ldr	r3, [r4, #24]
 800362c:	60a3      	str	r3, [r4, #8]
 800362e:	89a3      	ldrh	r3, [r4, #12]
 8003630:	071a      	lsls	r2, r3, #28
 8003632:	d52f      	bpl.n	8003694 <__swbuf_r+0x84>
 8003634:	6923      	ldr	r3, [r4, #16]
 8003636:	b36b      	cbz	r3, 8003694 <__swbuf_r+0x84>
 8003638:	6923      	ldr	r3, [r4, #16]
 800363a:	6820      	ldr	r0, [r4, #0]
 800363c:	1ac0      	subs	r0, r0, r3
 800363e:	6963      	ldr	r3, [r4, #20]
 8003640:	b2f6      	uxtb	r6, r6
 8003642:	4283      	cmp	r3, r0
 8003644:	4637      	mov	r7, r6
 8003646:	dc04      	bgt.n	8003652 <__swbuf_r+0x42>
 8003648:	4621      	mov	r1, r4
 800364a:	4628      	mov	r0, r5
 800364c:	f000 f926 	bl	800389c <_fflush_r>
 8003650:	bb30      	cbnz	r0, 80036a0 <__swbuf_r+0x90>
 8003652:	68a3      	ldr	r3, [r4, #8]
 8003654:	3b01      	subs	r3, #1
 8003656:	60a3      	str	r3, [r4, #8]
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	6022      	str	r2, [r4, #0]
 800365e:	701e      	strb	r6, [r3, #0]
 8003660:	6963      	ldr	r3, [r4, #20]
 8003662:	3001      	adds	r0, #1
 8003664:	4283      	cmp	r3, r0
 8003666:	d004      	beq.n	8003672 <__swbuf_r+0x62>
 8003668:	89a3      	ldrh	r3, [r4, #12]
 800366a:	07db      	lsls	r3, r3, #31
 800366c:	d506      	bpl.n	800367c <__swbuf_r+0x6c>
 800366e:	2e0a      	cmp	r6, #10
 8003670:	d104      	bne.n	800367c <__swbuf_r+0x6c>
 8003672:	4621      	mov	r1, r4
 8003674:	4628      	mov	r0, r5
 8003676:	f000 f911 	bl	800389c <_fflush_r>
 800367a:	b988      	cbnz	r0, 80036a0 <__swbuf_r+0x90>
 800367c:	4638      	mov	r0, r7
 800367e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003680:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <__swbuf_r+0x9c>)
 8003682:	429c      	cmp	r4, r3
 8003684:	d101      	bne.n	800368a <__swbuf_r+0x7a>
 8003686:	68ac      	ldr	r4, [r5, #8]
 8003688:	e7cf      	b.n	800362a <__swbuf_r+0x1a>
 800368a:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <__swbuf_r+0xa0>)
 800368c:	429c      	cmp	r4, r3
 800368e:	bf08      	it	eq
 8003690:	68ec      	ldreq	r4, [r5, #12]
 8003692:	e7ca      	b.n	800362a <__swbuf_r+0x1a>
 8003694:	4621      	mov	r1, r4
 8003696:	4628      	mov	r0, r5
 8003698:	f000 f80c 	bl	80036b4 <__swsetup_r>
 800369c:	2800      	cmp	r0, #0
 800369e:	d0cb      	beq.n	8003638 <__swbuf_r+0x28>
 80036a0:	f04f 37ff 	mov.w	r7, #4294967295
 80036a4:	e7ea      	b.n	800367c <__swbuf_r+0x6c>
 80036a6:	bf00      	nop
 80036a8:	08003f94 	.word	0x08003f94
 80036ac:	08003fb4 	.word	0x08003fb4
 80036b0:	08003f74 	.word	0x08003f74

080036b4 <__swsetup_r>:
 80036b4:	4b32      	ldr	r3, [pc, #200]	; (8003780 <__swsetup_r+0xcc>)
 80036b6:	b570      	push	{r4, r5, r6, lr}
 80036b8:	681d      	ldr	r5, [r3, #0]
 80036ba:	4606      	mov	r6, r0
 80036bc:	460c      	mov	r4, r1
 80036be:	b125      	cbz	r5, 80036ca <__swsetup_r+0x16>
 80036c0:	69ab      	ldr	r3, [r5, #24]
 80036c2:	b913      	cbnz	r3, 80036ca <__swsetup_r+0x16>
 80036c4:	4628      	mov	r0, r5
 80036c6:	f000 f97d 	bl	80039c4 <__sinit>
 80036ca:	4b2e      	ldr	r3, [pc, #184]	; (8003784 <__swsetup_r+0xd0>)
 80036cc:	429c      	cmp	r4, r3
 80036ce:	d10f      	bne.n	80036f0 <__swsetup_r+0x3c>
 80036d0:	686c      	ldr	r4, [r5, #4]
 80036d2:	89a3      	ldrh	r3, [r4, #12]
 80036d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036d8:	0719      	lsls	r1, r3, #28
 80036da:	d42c      	bmi.n	8003736 <__swsetup_r+0x82>
 80036dc:	06dd      	lsls	r5, r3, #27
 80036de:	d411      	bmi.n	8003704 <__swsetup_r+0x50>
 80036e0:	2309      	movs	r3, #9
 80036e2:	6033      	str	r3, [r6, #0]
 80036e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80036e8:	81a3      	strh	r3, [r4, #12]
 80036ea:	f04f 30ff 	mov.w	r0, #4294967295
 80036ee:	e03e      	b.n	800376e <__swsetup_r+0xba>
 80036f0:	4b25      	ldr	r3, [pc, #148]	; (8003788 <__swsetup_r+0xd4>)
 80036f2:	429c      	cmp	r4, r3
 80036f4:	d101      	bne.n	80036fa <__swsetup_r+0x46>
 80036f6:	68ac      	ldr	r4, [r5, #8]
 80036f8:	e7eb      	b.n	80036d2 <__swsetup_r+0x1e>
 80036fa:	4b24      	ldr	r3, [pc, #144]	; (800378c <__swsetup_r+0xd8>)
 80036fc:	429c      	cmp	r4, r3
 80036fe:	bf08      	it	eq
 8003700:	68ec      	ldreq	r4, [r5, #12]
 8003702:	e7e6      	b.n	80036d2 <__swsetup_r+0x1e>
 8003704:	0758      	lsls	r0, r3, #29
 8003706:	d512      	bpl.n	800372e <__swsetup_r+0x7a>
 8003708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800370a:	b141      	cbz	r1, 800371e <__swsetup_r+0x6a>
 800370c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003710:	4299      	cmp	r1, r3
 8003712:	d002      	beq.n	800371a <__swsetup_r+0x66>
 8003714:	4630      	mov	r0, r6
 8003716:	f000 fa5b 	bl	8003bd0 <_free_r>
 800371a:	2300      	movs	r3, #0
 800371c:	6363      	str	r3, [r4, #52]	; 0x34
 800371e:	89a3      	ldrh	r3, [r4, #12]
 8003720:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003724:	81a3      	strh	r3, [r4, #12]
 8003726:	2300      	movs	r3, #0
 8003728:	6063      	str	r3, [r4, #4]
 800372a:	6923      	ldr	r3, [r4, #16]
 800372c:	6023      	str	r3, [r4, #0]
 800372e:	89a3      	ldrh	r3, [r4, #12]
 8003730:	f043 0308 	orr.w	r3, r3, #8
 8003734:	81a3      	strh	r3, [r4, #12]
 8003736:	6923      	ldr	r3, [r4, #16]
 8003738:	b94b      	cbnz	r3, 800374e <__swsetup_r+0x9a>
 800373a:	89a3      	ldrh	r3, [r4, #12]
 800373c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003744:	d003      	beq.n	800374e <__swsetup_r+0x9a>
 8003746:	4621      	mov	r1, r4
 8003748:	4630      	mov	r0, r6
 800374a:	f000 fa01 	bl	8003b50 <__smakebuf_r>
 800374e:	89a0      	ldrh	r0, [r4, #12]
 8003750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003754:	f010 0301 	ands.w	r3, r0, #1
 8003758:	d00a      	beq.n	8003770 <__swsetup_r+0xbc>
 800375a:	2300      	movs	r3, #0
 800375c:	60a3      	str	r3, [r4, #8]
 800375e:	6963      	ldr	r3, [r4, #20]
 8003760:	425b      	negs	r3, r3
 8003762:	61a3      	str	r3, [r4, #24]
 8003764:	6923      	ldr	r3, [r4, #16]
 8003766:	b943      	cbnz	r3, 800377a <__swsetup_r+0xc6>
 8003768:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800376c:	d1ba      	bne.n	80036e4 <__swsetup_r+0x30>
 800376e:	bd70      	pop	{r4, r5, r6, pc}
 8003770:	0781      	lsls	r1, r0, #30
 8003772:	bf58      	it	pl
 8003774:	6963      	ldrpl	r3, [r4, #20]
 8003776:	60a3      	str	r3, [r4, #8]
 8003778:	e7f4      	b.n	8003764 <__swsetup_r+0xb0>
 800377a:	2000      	movs	r0, #0
 800377c:	e7f7      	b.n	800376e <__swsetup_r+0xba>
 800377e:	bf00      	nop
 8003780:	2000000c 	.word	0x2000000c
 8003784:	08003f94 	.word	0x08003f94
 8003788:	08003fb4 	.word	0x08003fb4
 800378c:	08003f74 	.word	0x08003f74

08003790 <__sflush_r>:
 8003790:	898a      	ldrh	r2, [r1, #12]
 8003792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003796:	4605      	mov	r5, r0
 8003798:	0710      	lsls	r0, r2, #28
 800379a:	460c      	mov	r4, r1
 800379c:	d458      	bmi.n	8003850 <__sflush_r+0xc0>
 800379e:	684b      	ldr	r3, [r1, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	dc05      	bgt.n	80037b0 <__sflush_r+0x20>
 80037a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	dc02      	bgt.n	80037b0 <__sflush_r+0x20>
 80037aa:	2000      	movs	r0, #0
 80037ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037b2:	2e00      	cmp	r6, #0
 80037b4:	d0f9      	beq.n	80037aa <__sflush_r+0x1a>
 80037b6:	2300      	movs	r3, #0
 80037b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80037bc:	682f      	ldr	r7, [r5, #0]
 80037be:	602b      	str	r3, [r5, #0]
 80037c0:	d032      	beq.n	8003828 <__sflush_r+0x98>
 80037c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80037c4:	89a3      	ldrh	r3, [r4, #12]
 80037c6:	075a      	lsls	r2, r3, #29
 80037c8:	d505      	bpl.n	80037d6 <__sflush_r+0x46>
 80037ca:	6863      	ldr	r3, [r4, #4]
 80037cc:	1ac0      	subs	r0, r0, r3
 80037ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037d0:	b10b      	cbz	r3, 80037d6 <__sflush_r+0x46>
 80037d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037d4:	1ac0      	subs	r0, r0, r3
 80037d6:	2300      	movs	r3, #0
 80037d8:	4602      	mov	r2, r0
 80037da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037dc:	6a21      	ldr	r1, [r4, #32]
 80037de:	4628      	mov	r0, r5
 80037e0:	47b0      	blx	r6
 80037e2:	1c43      	adds	r3, r0, #1
 80037e4:	89a3      	ldrh	r3, [r4, #12]
 80037e6:	d106      	bne.n	80037f6 <__sflush_r+0x66>
 80037e8:	6829      	ldr	r1, [r5, #0]
 80037ea:	291d      	cmp	r1, #29
 80037ec:	d82c      	bhi.n	8003848 <__sflush_r+0xb8>
 80037ee:	4a2a      	ldr	r2, [pc, #168]	; (8003898 <__sflush_r+0x108>)
 80037f0:	40ca      	lsrs	r2, r1
 80037f2:	07d6      	lsls	r6, r2, #31
 80037f4:	d528      	bpl.n	8003848 <__sflush_r+0xb8>
 80037f6:	2200      	movs	r2, #0
 80037f8:	6062      	str	r2, [r4, #4]
 80037fa:	04d9      	lsls	r1, r3, #19
 80037fc:	6922      	ldr	r2, [r4, #16]
 80037fe:	6022      	str	r2, [r4, #0]
 8003800:	d504      	bpl.n	800380c <__sflush_r+0x7c>
 8003802:	1c42      	adds	r2, r0, #1
 8003804:	d101      	bne.n	800380a <__sflush_r+0x7a>
 8003806:	682b      	ldr	r3, [r5, #0]
 8003808:	b903      	cbnz	r3, 800380c <__sflush_r+0x7c>
 800380a:	6560      	str	r0, [r4, #84]	; 0x54
 800380c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800380e:	602f      	str	r7, [r5, #0]
 8003810:	2900      	cmp	r1, #0
 8003812:	d0ca      	beq.n	80037aa <__sflush_r+0x1a>
 8003814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003818:	4299      	cmp	r1, r3
 800381a:	d002      	beq.n	8003822 <__sflush_r+0x92>
 800381c:	4628      	mov	r0, r5
 800381e:	f000 f9d7 	bl	8003bd0 <_free_r>
 8003822:	2000      	movs	r0, #0
 8003824:	6360      	str	r0, [r4, #52]	; 0x34
 8003826:	e7c1      	b.n	80037ac <__sflush_r+0x1c>
 8003828:	6a21      	ldr	r1, [r4, #32]
 800382a:	2301      	movs	r3, #1
 800382c:	4628      	mov	r0, r5
 800382e:	47b0      	blx	r6
 8003830:	1c41      	adds	r1, r0, #1
 8003832:	d1c7      	bne.n	80037c4 <__sflush_r+0x34>
 8003834:	682b      	ldr	r3, [r5, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0c4      	beq.n	80037c4 <__sflush_r+0x34>
 800383a:	2b1d      	cmp	r3, #29
 800383c:	d001      	beq.n	8003842 <__sflush_r+0xb2>
 800383e:	2b16      	cmp	r3, #22
 8003840:	d101      	bne.n	8003846 <__sflush_r+0xb6>
 8003842:	602f      	str	r7, [r5, #0]
 8003844:	e7b1      	b.n	80037aa <__sflush_r+0x1a>
 8003846:	89a3      	ldrh	r3, [r4, #12]
 8003848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800384c:	81a3      	strh	r3, [r4, #12]
 800384e:	e7ad      	b.n	80037ac <__sflush_r+0x1c>
 8003850:	690f      	ldr	r7, [r1, #16]
 8003852:	2f00      	cmp	r7, #0
 8003854:	d0a9      	beq.n	80037aa <__sflush_r+0x1a>
 8003856:	0793      	lsls	r3, r2, #30
 8003858:	680e      	ldr	r6, [r1, #0]
 800385a:	bf08      	it	eq
 800385c:	694b      	ldreq	r3, [r1, #20]
 800385e:	600f      	str	r7, [r1, #0]
 8003860:	bf18      	it	ne
 8003862:	2300      	movne	r3, #0
 8003864:	eba6 0807 	sub.w	r8, r6, r7
 8003868:	608b      	str	r3, [r1, #8]
 800386a:	f1b8 0f00 	cmp.w	r8, #0
 800386e:	dd9c      	ble.n	80037aa <__sflush_r+0x1a>
 8003870:	6a21      	ldr	r1, [r4, #32]
 8003872:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003874:	4643      	mov	r3, r8
 8003876:	463a      	mov	r2, r7
 8003878:	4628      	mov	r0, r5
 800387a:	47b0      	blx	r6
 800387c:	2800      	cmp	r0, #0
 800387e:	dc06      	bgt.n	800388e <__sflush_r+0xfe>
 8003880:	89a3      	ldrh	r3, [r4, #12]
 8003882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003886:	81a3      	strh	r3, [r4, #12]
 8003888:	f04f 30ff 	mov.w	r0, #4294967295
 800388c:	e78e      	b.n	80037ac <__sflush_r+0x1c>
 800388e:	4407      	add	r7, r0
 8003890:	eba8 0800 	sub.w	r8, r8, r0
 8003894:	e7e9      	b.n	800386a <__sflush_r+0xda>
 8003896:	bf00      	nop
 8003898:	20400001 	.word	0x20400001

0800389c <_fflush_r>:
 800389c:	b538      	push	{r3, r4, r5, lr}
 800389e:	690b      	ldr	r3, [r1, #16]
 80038a0:	4605      	mov	r5, r0
 80038a2:	460c      	mov	r4, r1
 80038a4:	b913      	cbnz	r3, 80038ac <_fflush_r+0x10>
 80038a6:	2500      	movs	r5, #0
 80038a8:	4628      	mov	r0, r5
 80038aa:	bd38      	pop	{r3, r4, r5, pc}
 80038ac:	b118      	cbz	r0, 80038b6 <_fflush_r+0x1a>
 80038ae:	6983      	ldr	r3, [r0, #24]
 80038b0:	b90b      	cbnz	r3, 80038b6 <_fflush_r+0x1a>
 80038b2:	f000 f887 	bl	80039c4 <__sinit>
 80038b6:	4b14      	ldr	r3, [pc, #80]	; (8003908 <_fflush_r+0x6c>)
 80038b8:	429c      	cmp	r4, r3
 80038ba:	d11b      	bne.n	80038f4 <_fflush_r+0x58>
 80038bc:	686c      	ldr	r4, [r5, #4]
 80038be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0ef      	beq.n	80038a6 <_fflush_r+0xa>
 80038c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80038c8:	07d0      	lsls	r0, r2, #31
 80038ca:	d404      	bmi.n	80038d6 <_fflush_r+0x3a>
 80038cc:	0599      	lsls	r1, r3, #22
 80038ce:	d402      	bmi.n	80038d6 <_fflush_r+0x3a>
 80038d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038d2:	f000 f915 	bl	8003b00 <__retarget_lock_acquire_recursive>
 80038d6:	4628      	mov	r0, r5
 80038d8:	4621      	mov	r1, r4
 80038da:	f7ff ff59 	bl	8003790 <__sflush_r>
 80038de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038e0:	07da      	lsls	r2, r3, #31
 80038e2:	4605      	mov	r5, r0
 80038e4:	d4e0      	bmi.n	80038a8 <_fflush_r+0xc>
 80038e6:	89a3      	ldrh	r3, [r4, #12]
 80038e8:	059b      	lsls	r3, r3, #22
 80038ea:	d4dd      	bmi.n	80038a8 <_fflush_r+0xc>
 80038ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038ee:	f000 f908 	bl	8003b02 <__retarget_lock_release_recursive>
 80038f2:	e7d9      	b.n	80038a8 <_fflush_r+0xc>
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <_fflush_r+0x70>)
 80038f6:	429c      	cmp	r4, r3
 80038f8:	d101      	bne.n	80038fe <_fflush_r+0x62>
 80038fa:	68ac      	ldr	r4, [r5, #8]
 80038fc:	e7df      	b.n	80038be <_fflush_r+0x22>
 80038fe:	4b04      	ldr	r3, [pc, #16]	; (8003910 <_fflush_r+0x74>)
 8003900:	429c      	cmp	r4, r3
 8003902:	bf08      	it	eq
 8003904:	68ec      	ldreq	r4, [r5, #12]
 8003906:	e7da      	b.n	80038be <_fflush_r+0x22>
 8003908:	08003f94 	.word	0x08003f94
 800390c:	08003fb4 	.word	0x08003fb4
 8003910:	08003f74 	.word	0x08003f74

08003914 <std>:
 8003914:	2300      	movs	r3, #0
 8003916:	b510      	push	{r4, lr}
 8003918:	4604      	mov	r4, r0
 800391a:	e9c0 3300 	strd	r3, r3, [r0]
 800391e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003922:	6083      	str	r3, [r0, #8]
 8003924:	8181      	strh	r1, [r0, #12]
 8003926:	6643      	str	r3, [r0, #100]	; 0x64
 8003928:	81c2      	strh	r2, [r0, #14]
 800392a:	6183      	str	r3, [r0, #24]
 800392c:	4619      	mov	r1, r3
 800392e:	2208      	movs	r2, #8
 8003930:	305c      	adds	r0, #92	; 0x5c
 8003932:	f7ff fdef 	bl	8003514 <memset>
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <std+0x38>)
 8003938:	6263      	str	r3, [r4, #36]	; 0x24
 800393a:	4b05      	ldr	r3, [pc, #20]	; (8003950 <std+0x3c>)
 800393c:	62a3      	str	r3, [r4, #40]	; 0x28
 800393e:	4b05      	ldr	r3, [pc, #20]	; (8003954 <std+0x40>)
 8003940:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <std+0x44>)
 8003944:	6224      	str	r4, [r4, #32]
 8003946:	6323      	str	r3, [r4, #48]	; 0x30
 8003948:	bd10      	pop	{r4, pc}
 800394a:	bf00      	nop
 800394c:	08003db1 	.word	0x08003db1
 8003950:	08003dd3 	.word	0x08003dd3
 8003954:	08003e0b 	.word	0x08003e0b
 8003958:	08003e2f 	.word	0x08003e2f

0800395c <_cleanup_r>:
 800395c:	4901      	ldr	r1, [pc, #4]	; (8003964 <_cleanup_r+0x8>)
 800395e:	f000 b8af 	b.w	8003ac0 <_fwalk_reent>
 8003962:	bf00      	nop
 8003964:	0800389d 	.word	0x0800389d

08003968 <__sfmoreglue>:
 8003968:	b570      	push	{r4, r5, r6, lr}
 800396a:	2268      	movs	r2, #104	; 0x68
 800396c:	1e4d      	subs	r5, r1, #1
 800396e:	4355      	muls	r5, r2
 8003970:	460e      	mov	r6, r1
 8003972:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003976:	f000 f997 	bl	8003ca8 <_malloc_r>
 800397a:	4604      	mov	r4, r0
 800397c:	b140      	cbz	r0, 8003990 <__sfmoreglue+0x28>
 800397e:	2100      	movs	r1, #0
 8003980:	e9c0 1600 	strd	r1, r6, [r0]
 8003984:	300c      	adds	r0, #12
 8003986:	60a0      	str	r0, [r4, #8]
 8003988:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800398c:	f7ff fdc2 	bl	8003514 <memset>
 8003990:	4620      	mov	r0, r4
 8003992:	bd70      	pop	{r4, r5, r6, pc}

08003994 <__sfp_lock_acquire>:
 8003994:	4801      	ldr	r0, [pc, #4]	; (800399c <__sfp_lock_acquire+0x8>)
 8003996:	f000 b8b3 	b.w	8003b00 <__retarget_lock_acquire_recursive>
 800399a:	bf00      	nop
 800399c:	200005e5 	.word	0x200005e5

080039a0 <__sfp_lock_release>:
 80039a0:	4801      	ldr	r0, [pc, #4]	; (80039a8 <__sfp_lock_release+0x8>)
 80039a2:	f000 b8ae 	b.w	8003b02 <__retarget_lock_release_recursive>
 80039a6:	bf00      	nop
 80039a8:	200005e5 	.word	0x200005e5

080039ac <__sinit_lock_acquire>:
 80039ac:	4801      	ldr	r0, [pc, #4]	; (80039b4 <__sinit_lock_acquire+0x8>)
 80039ae:	f000 b8a7 	b.w	8003b00 <__retarget_lock_acquire_recursive>
 80039b2:	bf00      	nop
 80039b4:	200005e6 	.word	0x200005e6

080039b8 <__sinit_lock_release>:
 80039b8:	4801      	ldr	r0, [pc, #4]	; (80039c0 <__sinit_lock_release+0x8>)
 80039ba:	f000 b8a2 	b.w	8003b02 <__retarget_lock_release_recursive>
 80039be:	bf00      	nop
 80039c0:	200005e6 	.word	0x200005e6

080039c4 <__sinit>:
 80039c4:	b510      	push	{r4, lr}
 80039c6:	4604      	mov	r4, r0
 80039c8:	f7ff fff0 	bl	80039ac <__sinit_lock_acquire>
 80039cc:	69a3      	ldr	r3, [r4, #24]
 80039ce:	b11b      	cbz	r3, 80039d8 <__sinit+0x14>
 80039d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039d4:	f7ff bff0 	b.w	80039b8 <__sinit_lock_release>
 80039d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80039dc:	6523      	str	r3, [r4, #80]	; 0x50
 80039de:	4b13      	ldr	r3, [pc, #76]	; (8003a2c <__sinit+0x68>)
 80039e0:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <__sinit+0x6c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80039e6:	42a3      	cmp	r3, r4
 80039e8:	bf04      	itt	eq
 80039ea:	2301      	moveq	r3, #1
 80039ec:	61a3      	streq	r3, [r4, #24]
 80039ee:	4620      	mov	r0, r4
 80039f0:	f000 f820 	bl	8003a34 <__sfp>
 80039f4:	6060      	str	r0, [r4, #4]
 80039f6:	4620      	mov	r0, r4
 80039f8:	f000 f81c 	bl	8003a34 <__sfp>
 80039fc:	60a0      	str	r0, [r4, #8]
 80039fe:	4620      	mov	r0, r4
 8003a00:	f000 f818 	bl	8003a34 <__sfp>
 8003a04:	2200      	movs	r2, #0
 8003a06:	60e0      	str	r0, [r4, #12]
 8003a08:	2104      	movs	r1, #4
 8003a0a:	6860      	ldr	r0, [r4, #4]
 8003a0c:	f7ff ff82 	bl	8003914 <std>
 8003a10:	68a0      	ldr	r0, [r4, #8]
 8003a12:	2201      	movs	r2, #1
 8003a14:	2109      	movs	r1, #9
 8003a16:	f7ff ff7d 	bl	8003914 <std>
 8003a1a:	68e0      	ldr	r0, [r4, #12]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	2112      	movs	r1, #18
 8003a20:	f7ff ff78 	bl	8003914 <std>
 8003a24:	2301      	movs	r3, #1
 8003a26:	61a3      	str	r3, [r4, #24]
 8003a28:	e7d2      	b.n	80039d0 <__sinit+0xc>
 8003a2a:	bf00      	nop
 8003a2c:	08003f70 	.word	0x08003f70
 8003a30:	0800395d 	.word	0x0800395d

08003a34 <__sfp>:
 8003a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a36:	4607      	mov	r7, r0
 8003a38:	f7ff ffac 	bl	8003994 <__sfp_lock_acquire>
 8003a3c:	4b1e      	ldr	r3, [pc, #120]	; (8003ab8 <__sfp+0x84>)
 8003a3e:	681e      	ldr	r6, [r3, #0]
 8003a40:	69b3      	ldr	r3, [r6, #24]
 8003a42:	b913      	cbnz	r3, 8003a4a <__sfp+0x16>
 8003a44:	4630      	mov	r0, r6
 8003a46:	f7ff ffbd 	bl	80039c4 <__sinit>
 8003a4a:	3648      	adds	r6, #72	; 0x48
 8003a4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a50:	3b01      	subs	r3, #1
 8003a52:	d503      	bpl.n	8003a5c <__sfp+0x28>
 8003a54:	6833      	ldr	r3, [r6, #0]
 8003a56:	b30b      	cbz	r3, 8003a9c <__sfp+0x68>
 8003a58:	6836      	ldr	r6, [r6, #0]
 8003a5a:	e7f7      	b.n	8003a4c <__sfp+0x18>
 8003a5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a60:	b9d5      	cbnz	r5, 8003a98 <__sfp+0x64>
 8003a62:	4b16      	ldr	r3, [pc, #88]	; (8003abc <__sfp+0x88>)
 8003a64:	60e3      	str	r3, [r4, #12]
 8003a66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a6a:	6665      	str	r5, [r4, #100]	; 0x64
 8003a6c:	f000 f847 	bl	8003afe <__retarget_lock_init_recursive>
 8003a70:	f7ff ff96 	bl	80039a0 <__sfp_lock_release>
 8003a74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a7c:	6025      	str	r5, [r4, #0]
 8003a7e:	61a5      	str	r5, [r4, #24]
 8003a80:	2208      	movs	r2, #8
 8003a82:	4629      	mov	r1, r5
 8003a84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a88:	f7ff fd44 	bl	8003514 <memset>
 8003a8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a94:	4620      	mov	r0, r4
 8003a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a98:	3468      	adds	r4, #104	; 0x68
 8003a9a:	e7d9      	b.n	8003a50 <__sfp+0x1c>
 8003a9c:	2104      	movs	r1, #4
 8003a9e:	4638      	mov	r0, r7
 8003aa0:	f7ff ff62 	bl	8003968 <__sfmoreglue>
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	6030      	str	r0, [r6, #0]
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	d1d5      	bne.n	8003a58 <__sfp+0x24>
 8003aac:	f7ff ff78 	bl	80039a0 <__sfp_lock_release>
 8003ab0:	230c      	movs	r3, #12
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	e7ee      	b.n	8003a94 <__sfp+0x60>
 8003ab6:	bf00      	nop
 8003ab8:	08003f70 	.word	0x08003f70
 8003abc:	ffff0001 	.word	0xffff0001

08003ac0 <_fwalk_reent>:
 8003ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ac4:	4606      	mov	r6, r0
 8003ac6:	4688      	mov	r8, r1
 8003ac8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003acc:	2700      	movs	r7, #0
 8003ace:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ad2:	f1b9 0901 	subs.w	r9, r9, #1
 8003ad6:	d505      	bpl.n	8003ae4 <_fwalk_reent+0x24>
 8003ad8:	6824      	ldr	r4, [r4, #0]
 8003ada:	2c00      	cmp	r4, #0
 8003adc:	d1f7      	bne.n	8003ace <_fwalk_reent+0xe>
 8003ade:	4638      	mov	r0, r7
 8003ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ae4:	89ab      	ldrh	r3, [r5, #12]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d907      	bls.n	8003afa <_fwalk_reent+0x3a>
 8003aea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003aee:	3301      	adds	r3, #1
 8003af0:	d003      	beq.n	8003afa <_fwalk_reent+0x3a>
 8003af2:	4629      	mov	r1, r5
 8003af4:	4630      	mov	r0, r6
 8003af6:	47c0      	blx	r8
 8003af8:	4307      	orrs	r7, r0
 8003afa:	3568      	adds	r5, #104	; 0x68
 8003afc:	e7e9      	b.n	8003ad2 <_fwalk_reent+0x12>

08003afe <__retarget_lock_init_recursive>:
 8003afe:	4770      	bx	lr

08003b00 <__retarget_lock_acquire_recursive>:
 8003b00:	4770      	bx	lr

08003b02 <__retarget_lock_release_recursive>:
 8003b02:	4770      	bx	lr

08003b04 <__swhatbuf_r>:
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	460e      	mov	r6, r1
 8003b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b0c:	2900      	cmp	r1, #0
 8003b0e:	b096      	sub	sp, #88	; 0x58
 8003b10:	4614      	mov	r4, r2
 8003b12:	461d      	mov	r5, r3
 8003b14:	da08      	bge.n	8003b28 <__swhatbuf_r+0x24>
 8003b16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	602a      	str	r2, [r5, #0]
 8003b1e:	061a      	lsls	r2, r3, #24
 8003b20:	d410      	bmi.n	8003b44 <__swhatbuf_r+0x40>
 8003b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b26:	e00e      	b.n	8003b46 <__swhatbuf_r+0x42>
 8003b28:	466a      	mov	r2, sp
 8003b2a:	f000 f9a7 	bl	8003e7c <_fstat_r>
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	dbf1      	blt.n	8003b16 <__swhatbuf_r+0x12>
 8003b32:	9a01      	ldr	r2, [sp, #4]
 8003b34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b3c:	425a      	negs	r2, r3
 8003b3e:	415a      	adcs	r2, r3
 8003b40:	602a      	str	r2, [r5, #0]
 8003b42:	e7ee      	b.n	8003b22 <__swhatbuf_r+0x1e>
 8003b44:	2340      	movs	r3, #64	; 0x40
 8003b46:	2000      	movs	r0, #0
 8003b48:	6023      	str	r3, [r4, #0]
 8003b4a:	b016      	add	sp, #88	; 0x58
 8003b4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b50 <__smakebuf_r>:
 8003b50:	898b      	ldrh	r3, [r1, #12]
 8003b52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b54:	079d      	lsls	r5, r3, #30
 8003b56:	4606      	mov	r6, r0
 8003b58:	460c      	mov	r4, r1
 8003b5a:	d507      	bpl.n	8003b6c <__smakebuf_r+0x1c>
 8003b5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	6123      	str	r3, [r4, #16]
 8003b64:	2301      	movs	r3, #1
 8003b66:	6163      	str	r3, [r4, #20]
 8003b68:	b002      	add	sp, #8
 8003b6a:	bd70      	pop	{r4, r5, r6, pc}
 8003b6c:	ab01      	add	r3, sp, #4
 8003b6e:	466a      	mov	r2, sp
 8003b70:	f7ff ffc8 	bl	8003b04 <__swhatbuf_r>
 8003b74:	9900      	ldr	r1, [sp, #0]
 8003b76:	4605      	mov	r5, r0
 8003b78:	4630      	mov	r0, r6
 8003b7a:	f000 f895 	bl	8003ca8 <_malloc_r>
 8003b7e:	b948      	cbnz	r0, 8003b94 <__smakebuf_r+0x44>
 8003b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b84:	059a      	lsls	r2, r3, #22
 8003b86:	d4ef      	bmi.n	8003b68 <__smakebuf_r+0x18>
 8003b88:	f023 0303 	bic.w	r3, r3, #3
 8003b8c:	f043 0302 	orr.w	r3, r3, #2
 8003b90:	81a3      	strh	r3, [r4, #12]
 8003b92:	e7e3      	b.n	8003b5c <__smakebuf_r+0xc>
 8003b94:	4b0d      	ldr	r3, [pc, #52]	; (8003bcc <__smakebuf_r+0x7c>)
 8003b96:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b98:	89a3      	ldrh	r3, [r4, #12]
 8003b9a:	6020      	str	r0, [r4, #0]
 8003b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba0:	81a3      	strh	r3, [r4, #12]
 8003ba2:	9b00      	ldr	r3, [sp, #0]
 8003ba4:	6163      	str	r3, [r4, #20]
 8003ba6:	9b01      	ldr	r3, [sp, #4]
 8003ba8:	6120      	str	r0, [r4, #16]
 8003baa:	b15b      	cbz	r3, 8003bc4 <__smakebuf_r+0x74>
 8003bac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	f000 f975 	bl	8003ea0 <_isatty_r>
 8003bb6:	b128      	cbz	r0, 8003bc4 <__smakebuf_r+0x74>
 8003bb8:	89a3      	ldrh	r3, [r4, #12]
 8003bba:	f023 0303 	bic.w	r3, r3, #3
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	81a3      	strh	r3, [r4, #12]
 8003bc4:	89a0      	ldrh	r0, [r4, #12]
 8003bc6:	4305      	orrs	r5, r0
 8003bc8:	81a5      	strh	r5, [r4, #12]
 8003bca:	e7cd      	b.n	8003b68 <__smakebuf_r+0x18>
 8003bcc:	0800395d 	.word	0x0800395d

08003bd0 <_free_r>:
 8003bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003bd2:	2900      	cmp	r1, #0
 8003bd4:	d044      	beq.n	8003c60 <_free_r+0x90>
 8003bd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bda:	9001      	str	r0, [sp, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f1a1 0404 	sub.w	r4, r1, #4
 8003be2:	bfb8      	it	lt
 8003be4:	18e4      	addlt	r4, r4, r3
 8003be6:	f000 f97d 	bl	8003ee4 <__malloc_lock>
 8003bea:	4a1e      	ldr	r2, [pc, #120]	; (8003c64 <_free_r+0x94>)
 8003bec:	9801      	ldr	r0, [sp, #4]
 8003bee:	6813      	ldr	r3, [r2, #0]
 8003bf0:	b933      	cbnz	r3, 8003c00 <_free_r+0x30>
 8003bf2:	6063      	str	r3, [r4, #4]
 8003bf4:	6014      	str	r4, [r2, #0]
 8003bf6:	b003      	add	sp, #12
 8003bf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bfc:	f000 b978 	b.w	8003ef0 <__malloc_unlock>
 8003c00:	42a3      	cmp	r3, r4
 8003c02:	d908      	bls.n	8003c16 <_free_r+0x46>
 8003c04:	6825      	ldr	r5, [r4, #0]
 8003c06:	1961      	adds	r1, r4, r5
 8003c08:	428b      	cmp	r3, r1
 8003c0a:	bf01      	itttt	eq
 8003c0c:	6819      	ldreq	r1, [r3, #0]
 8003c0e:	685b      	ldreq	r3, [r3, #4]
 8003c10:	1949      	addeq	r1, r1, r5
 8003c12:	6021      	streq	r1, [r4, #0]
 8003c14:	e7ed      	b.n	8003bf2 <_free_r+0x22>
 8003c16:	461a      	mov	r2, r3
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	b10b      	cbz	r3, 8003c20 <_free_r+0x50>
 8003c1c:	42a3      	cmp	r3, r4
 8003c1e:	d9fa      	bls.n	8003c16 <_free_r+0x46>
 8003c20:	6811      	ldr	r1, [r2, #0]
 8003c22:	1855      	adds	r5, r2, r1
 8003c24:	42a5      	cmp	r5, r4
 8003c26:	d10b      	bne.n	8003c40 <_free_r+0x70>
 8003c28:	6824      	ldr	r4, [r4, #0]
 8003c2a:	4421      	add	r1, r4
 8003c2c:	1854      	adds	r4, r2, r1
 8003c2e:	42a3      	cmp	r3, r4
 8003c30:	6011      	str	r1, [r2, #0]
 8003c32:	d1e0      	bne.n	8003bf6 <_free_r+0x26>
 8003c34:	681c      	ldr	r4, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	6053      	str	r3, [r2, #4]
 8003c3a:	4421      	add	r1, r4
 8003c3c:	6011      	str	r1, [r2, #0]
 8003c3e:	e7da      	b.n	8003bf6 <_free_r+0x26>
 8003c40:	d902      	bls.n	8003c48 <_free_r+0x78>
 8003c42:	230c      	movs	r3, #12
 8003c44:	6003      	str	r3, [r0, #0]
 8003c46:	e7d6      	b.n	8003bf6 <_free_r+0x26>
 8003c48:	6825      	ldr	r5, [r4, #0]
 8003c4a:	1961      	adds	r1, r4, r5
 8003c4c:	428b      	cmp	r3, r1
 8003c4e:	bf04      	itt	eq
 8003c50:	6819      	ldreq	r1, [r3, #0]
 8003c52:	685b      	ldreq	r3, [r3, #4]
 8003c54:	6063      	str	r3, [r4, #4]
 8003c56:	bf04      	itt	eq
 8003c58:	1949      	addeq	r1, r1, r5
 8003c5a:	6021      	streq	r1, [r4, #0]
 8003c5c:	6054      	str	r4, [r2, #4]
 8003c5e:	e7ca      	b.n	8003bf6 <_free_r+0x26>
 8003c60:	b003      	add	sp, #12
 8003c62:	bd30      	pop	{r4, r5, pc}
 8003c64:	200005e8 	.word	0x200005e8

08003c68 <sbrk_aligned>:
 8003c68:	b570      	push	{r4, r5, r6, lr}
 8003c6a:	4e0e      	ldr	r6, [pc, #56]	; (8003ca4 <sbrk_aligned+0x3c>)
 8003c6c:	460c      	mov	r4, r1
 8003c6e:	6831      	ldr	r1, [r6, #0]
 8003c70:	4605      	mov	r5, r0
 8003c72:	b911      	cbnz	r1, 8003c7a <sbrk_aligned+0x12>
 8003c74:	f000 f88c 	bl	8003d90 <_sbrk_r>
 8003c78:	6030      	str	r0, [r6, #0]
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	f000 f887 	bl	8003d90 <_sbrk_r>
 8003c82:	1c43      	adds	r3, r0, #1
 8003c84:	d00a      	beq.n	8003c9c <sbrk_aligned+0x34>
 8003c86:	1cc4      	adds	r4, r0, #3
 8003c88:	f024 0403 	bic.w	r4, r4, #3
 8003c8c:	42a0      	cmp	r0, r4
 8003c8e:	d007      	beq.n	8003ca0 <sbrk_aligned+0x38>
 8003c90:	1a21      	subs	r1, r4, r0
 8003c92:	4628      	mov	r0, r5
 8003c94:	f000 f87c 	bl	8003d90 <_sbrk_r>
 8003c98:	3001      	adds	r0, #1
 8003c9a:	d101      	bne.n	8003ca0 <sbrk_aligned+0x38>
 8003c9c:	f04f 34ff 	mov.w	r4, #4294967295
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	bd70      	pop	{r4, r5, r6, pc}
 8003ca4:	200005ec 	.word	0x200005ec

08003ca8 <_malloc_r>:
 8003ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cac:	1ccd      	adds	r5, r1, #3
 8003cae:	f025 0503 	bic.w	r5, r5, #3
 8003cb2:	3508      	adds	r5, #8
 8003cb4:	2d0c      	cmp	r5, #12
 8003cb6:	bf38      	it	cc
 8003cb8:	250c      	movcc	r5, #12
 8003cba:	2d00      	cmp	r5, #0
 8003cbc:	4607      	mov	r7, r0
 8003cbe:	db01      	blt.n	8003cc4 <_malloc_r+0x1c>
 8003cc0:	42a9      	cmp	r1, r5
 8003cc2:	d905      	bls.n	8003cd0 <_malloc_r+0x28>
 8003cc4:	230c      	movs	r3, #12
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	2600      	movs	r6, #0
 8003cca:	4630      	mov	r0, r6
 8003ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cd0:	4e2e      	ldr	r6, [pc, #184]	; (8003d8c <_malloc_r+0xe4>)
 8003cd2:	f000 f907 	bl	8003ee4 <__malloc_lock>
 8003cd6:	6833      	ldr	r3, [r6, #0]
 8003cd8:	461c      	mov	r4, r3
 8003cda:	bb34      	cbnz	r4, 8003d2a <_malloc_r+0x82>
 8003cdc:	4629      	mov	r1, r5
 8003cde:	4638      	mov	r0, r7
 8003ce0:	f7ff ffc2 	bl	8003c68 <sbrk_aligned>
 8003ce4:	1c43      	adds	r3, r0, #1
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	d14d      	bne.n	8003d86 <_malloc_r+0xde>
 8003cea:	6834      	ldr	r4, [r6, #0]
 8003cec:	4626      	mov	r6, r4
 8003cee:	2e00      	cmp	r6, #0
 8003cf0:	d140      	bne.n	8003d74 <_malloc_r+0xcc>
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	4631      	mov	r1, r6
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	eb04 0803 	add.w	r8, r4, r3
 8003cfc:	f000 f848 	bl	8003d90 <_sbrk_r>
 8003d00:	4580      	cmp	r8, r0
 8003d02:	d13a      	bne.n	8003d7a <_malloc_r+0xd2>
 8003d04:	6821      	ldr	r1, [r4, #0]
 8003d06:	3503      	adds	r5, #3
 8003d08:	1a6d      	subs	r5, r5, r1
 8003d0a:	f025 0503 	bic.w	r5, r5, #3
 8003d0e:	3508      	adds	r5, #8
 8003d10:	2d0c      	cmp	r5, #12
 8003d12:	bf38      	it	cc
 8003d14:	250c      	movcc	r5, #12
 8003d16:	4629      	mov	r1, r5
 8003d18:	4638      	mov	r0, r7
 8003d1a:	f7ff ffa5 	bl	8003c68 <sbrk_aligned>
 8003d1e:	3001      	adds	r0, #1
 8003d20:	d02b      	beq.n	8003d7a <_malloc_r+0xd2>
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	442b      	add	r3, r5
 8003d26:	6023      	str	r3, [r4, #0]
 8003d28:	e00e      	b.n	8003d48 <_malloc_r+0xa0>
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	1b52      	subs	r2, r2, r5
 8003d2e:	d41e      	bmi.n	8003d6e <_malloc_r+0xc6>
 8003d30:	2a0b      	cmp	r2, #11
 8003d32:	d916      	bls.n	8003d62 <_malloc_r+0xba>
 8003d34:	1961      	adds	r1, r4, r5
 8003d36:	42a3      	cmp	r3, r4
 8003d38:	6025      	str	r5, [r4, #0]
 8003d3a:	bf18      	it	ne
 8003d3c:	6059      	strne	r1, [r3, #4]
 8003d3e:	6863      	ldr	r3, [r4, #4]
 8003d40:	bf08      	it	eq
 8003d42:	6031      	streq	r1, [r6, #0]
 8003d44:	5162      	str	r2, [r4, r5]
 8003d46:	604b      	str	r3, [r1, #4]
 8003d48:	4638      	mov	r0, r7
 8003d4a:	f104 060b 	add.w	r6, r4, #11
 8003d4e:	f000 f8cf 	bl	8003ef0 <__malloc_unlock>
 8003d52:	f026 0607 	bic.w	r6, r6, #7
 8003d56:	1d23      	adds	r3, r4, #4
 8003d58:	1af2      	subs	r2, r6, r3
 8003d5a:	d0b6      	beq.n	8003cca <_malloc_r+0x22>
 8003d5c:	1b9b      	subs	r3, r3, r6
 8003d5e:	50a3      	str	r3, [r4, r2]
 8003d60:	e7b3      	b.n	8003cca <_malloc_r+0x22>
 8003d62:	6862      	ldr	r2, [r4, #4]
 8003d64:	42a3      	cmp	r3, r4
 8003d66:	bf0c      	ite	eq
 8003d68:	6032      	streq	r2, [r6, #0]
 8003d6a:	605a      	strne	r2, [r3, #4]
 8003d6c:	e7ec      	b.n	8003d48 <_malloc_r+0xa0>
 8003d6e:	4623      	mov	r3, r4
 8003d70:	6864      	ldr	r4, [r4, #4]
 8003d72:	e7b2      	b.n	8003cda <_malloc_r+0x32>
 8003d74:	4634      	mov	r4, r6
 8003d76:	6876      	ldr	r6, [r6, #4]
 8003d78:	e7b9      	b.n	8003cee <_malloc_r+0x46>
 8003d7a:	230c      	movs	r3, #12
 8003d7c:	603b      	str	r3, [r7, #0]
 8003d7e:	4638      	mov	r0, r7
 8003d80:	f000 f8b6 	bl	8003ef0 <__malloc_unlock>
 8003d84:	e7a1      	b.n	8003cca <_malloc_r+0x22>
 8003d86:	6025      	str	r5, [r4, #0]
 8003d88:	e7de      	b.n	8003d48 <_malloc_r+0xa0>
 8003d8a:	bf00      	nop
 8003d8c:	200005e8 	.word	0x200005e8

08003d90 <_sbrk_r>:
 8003d90:	b538      	push	{r3, r4, r5, lr}
 8003d92:	4d06      	ldr	r5, [pc, #24]	; (8003dac <_sbrk_r+0x1c>)
 8003d94:	2300      	movs	r3, #0
 8003d96:	4604      	mov	r4, r0
 8003d98:	4608      	mov	r0, r1
 8003d9a:	602b      	str	r3, [r5, #0]
 8003d9c:	f7fc fedc 	bl	8000b58 <_sbrk>
 8003da0:	1c43      	adds	r3, r0, #1
 8003da2:	d102      	bne.n	8003daa <_sbrk_r+0x1a>
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	b103      	cbz	r3, 8003daa <_sbrk_r+0x1a>
 8003da8:	6023      	str	r3, [r4, #0]
 8003daa:	bd38      	pop	{r3, r4, r5, pc}
 8003dac:	200005f0 	.word	0x200005f0

08003db0 <__sread>:
 8003db0:	b510      	push	{r4, lr}
 8003db2:	460c      	mov	r4, r1
 8003db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003db8:	f000 f8a0 	bl	8003efc <_read_r>
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	bfab      	itete	ge
 8003dc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003dc2:	89a3      	ldrhlt	r3, [r4, #12]
 8003dc4:	181b      	addge	r3, r3, r0
 8003dc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003dca:	bfac      	ite	ge
 8003dcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8003dce:	81a3      	strhlt	r3, [r4, #12]
 8003dd0:	bd10      	pop	{r4, pc}

08003dd2 <__swrite>:
 8003dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd6:	461f      	mov	r7, r3
 8003dd8:	898b      	ldrh	r3, [r1, #12]
 8003dda:	05db      	lsls	r3, r3, #23
 8003ddc:	4605      	mov	r5, r0
 8003dde:	460c      	mov	r4, r1
 8003de0:	4616      	mov	r6, r2
 8003de2:	d505      	bpl.n	8003df0 <__swrite+0x1e>
 8003de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003de8:	2302      	movs	r3, #2
 8003dea:	2200      	movs	r2, #0
 8003dec:	f000 f868 	bl	8003ec0 <_lseek_r>
 8003df0:	89a3      	ldrh	r3, [r4, #12]
 8003df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003df6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dfa:	81a3      	strh	r3, [r4, #12]
 8003dfc:	4632      	mov	r2, r6
 8003dfe:	463b      	mov	r3, r7
 8003e00:	4628      	mov	r0, r5
 8003e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e06:	f000 b817 	b.w	8003e38 <_write_r>

08003e0a <__sseek>:
 8003e0a:	b510      	push	{r4, lr}
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e12:	f000 f855 	bl	8003ec0 <_lseek_r>
 8003e16:	1c43      	adds	r3, r0, #1
 8003e18:	89a3      	ldrh	r3, [r4, #12]
 8003e1a:	bf15      	itete	ne
 8003e1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e26:	81a3      	strheq	r3, [r4, #12]
 8003e28:	bf18      	it	ne
 8003e2a:	81a3      	strhne	r3, [r4, #12]
 8003e2c:	bd10      	pop	{r4, pc}

08003e2e <__sclose>:
 8003e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e32:	f000 b813 	b.w	8003e5c <_close_r>
	...

08003e38 <_write_r>:
 8003e38:	b538      	push	{r3, r4, r5, lr}
 8003e3a:	4d07      	ldr	r5, [pc, #28]	; (8003e58 <_write_r+0x20>)
 8003e3c:	4604      	mov	r4, r0
 8003e3e:	4608      	mov	r0, r1
 8003e40:	4611      	mov	r1, r2
 8003e42:	2200      	movs	r2, #0
 8003e44:	602a      	str	r2, [r5, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	f7fc fe35 	bl	8000ab6 <_write>
 8003e4c:	1c43      	adds	r3, r0, #1
 8003e4e:	d102      	bne.n	8003e56 <_write_r+0x1e>
 8003e50:	682b      	ldr	r3, [r5, #0]
 8003e52:	b103      	cbz	r3, 8003e56 <_write_r+0x1e>
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	bd38      	pop	{r3, r4, r5, pc}
 8003e58:	200005f0 	.word	0x200005f0

08003e5c <_close_r>:
 8003e5c:	b538      	push	{r3, r4, r5, lr}
 8003e5e:	4d06      	ldr	r5, [pc, #24]	; (8003e78 <_close_r+0x1c>)
 8003e60:	2300      	movs	r3, #0
 8003e62:	4604      	mov	r4, r0
 8003e64:	4608      	mov	r0, r1
 8003e66:	602b      	str	r3, [r5, #0]
 8003e68:	f7fc fe41 	bl	8000aee <_close>
 8003e6c:	1c43      	adds	r3, r0, #1
 8003e6e:	d102      	bne.n	8003e76 <_close_r+0x1a>
 8003e70:	682b      	ldr	r3, [r5, #0]
 8003e72:	b103      	cbz	r3, 8003e76 <_close_r+0x1a>
 8003e74:	6023      	str	r3, [r4, #0]
 8003e76:	bd38      	pop	{r3, r4, r5, pc}
 8003e78:	200005f0 	.word	0x200005f0

08003e7c <_fstat_r>:
 8003e7c:	b538      	push	{r3, r4, r5, lr}
 8003e7e:	4d07      	ldr	r5, [pc, #28]	; (8003e9c <_fstat_r+0x20>)
 8003e80:	2300      	movs	r3, #0
 8003e82:	4604      	mov	r4, r0
 8003e84:	4608      	mov	r0, r1
 8003e86:	4611      	mov	r1, r2
 8003e88:	602b      	str	r3, [r5, #0]
 8003e8a:	f7fc fe3c 	bl	8000b06 <_fstat>
 8003e8e:	1c43      	adds	r3, r0, #1
 8003e90:	d102      	bne.n	8003e98 <_fstat_r+0x1c>
 8003e92:	682b      	ldr	r3, [r5, #0]
 8003e94:	b103      	cbz	r3, 8003e98 <_fstat_r+0x1c>
 8003e96:	6023      	str	r3, [r4, #0]
 8003e98:	bd38      	pop	{r3, r4, r5, pc}
 8003e9a:	bf00      	nop
 8003e9c:	200005f0 	.word	0x200005f0

08003ea0 <_isatty_r>:
 8003ea0:	b538      	push	{r3, r4, r5, lr}
 8003ea2:	4d06      	ldr	r5, [pc, #24]	; (8003ebc <_isatty_r+0x1c>)
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	4608      	mov	r0, r1
 8003eaa:	602b      	str	r3, [r5, #0]
 8003eac:	f7fc fe3b 	bl	8000b26 <_isatty>
 8003eb0:	1c43      	adds	r3, r0, #1
 8003eb2:	d102      	bne.n	8003eba <_isatty_r+0x1a>
 8003eb4:	682b      	ldr	r3, [r5, #0]
 8003eb6:	b103      	cbz	r3, 8003eba <_isatty_r+0x1a>
 8003eb8:	6023      	str	r3, [r4, #0]
 8003eba:	bd38      	pop	{r3, r4, r5, pc}
 8003ebc:	200005f0 	.word	0x200005f0

08003ec0 <_lseek_r>:
 8003ec0:	b538      	push	{r3, r4, r5, lr}
 8003ec2:	4d07      	ldr	r5, [pc, #28]	; (8003ee0 <_lseek_r+0x20>)
 8003ec4:	4604      	mov	r4, r0
 8003ec6:	4608      	mov	r0, r1
 8003ec8:	4611      	mov	r1, r2
 8003eca:	2200      	movs	r2, #0
 8003ecc:	602a      	str	r2, [r5, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f7fc fe34 	bl	8000b3c <_lseek>
 8003ed4:	1c43      	adds	r3, r0, #1
 8003ed6:	d102      	bne.n	8003ede <_lseek_r+0x1e>
 8003ed8:	682b      	ldr	r3, [r5, #0]
 8003eda:	b103      	cbz	r3, 8003ede <_lseek_r+0x1e>
 8003edc:	6023      	str	r3, [r4, #0]
 8003ede:	bd38      	pop	{r3, r4, r5, pc}
 8003ee0:	200005f0 	.word	0x200005f0

08003ee4 <__malloc_lock>:
 8003ee4:	4801      	ldr	r0, [pc, #4]	; (8003eec <__malloc_lock+0x8>)
 8003ee6:	f7ff be0b 	b.w	8003b00 <__retarget_lock_acquire_recursive>
 8003eea:	bf00      	nop
 8003eec:	200005e4 	.word	0x200005e4

08003ef0 <__malloc_unlock>:
 8003ef0:	4801      	ldr	r0, [pc, #4]	; (8003ef8 <__malloc_unlock+0x8>)
 8003ef2:	f7ff be06 	b.w	8003b02 <__retarget_lock_release_recursive>
 8003ef6:	bf00      	nop
 8003ef8:	200005e4 	.word	0x200005e4

08003efc <_read_r>:
 8003efc:	b538      	push	{r3, r4, r5, lr}
 8003efe:	4d07      	ldr	r5, [pc, #28]	; (8003f1c <_read_r+0x20>)
 8003f00:	4604      	mov	r4, r0
 8003f02:	4608      	mov	r0, r1
 8003f04:	4611      	mov	r1, r2
 8003f06:	2200      	movs	r2, #0
 8003f08:	602a      	str	r2, [r5, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f7fc fdb6 	bl	8000a7c <_read>
 8003f10:	1c43      	adds	r3, r0, #1
 8003f12:	d102      	bne.n	8003f1a <_read_r+0x1e>
 8003f14:	682b      	ldr	r3, [r5, #0]
 8003f16:	b103      	cbz	r3, 8003f1a <_read_r+0x1e>
 8003f18:	6023      	str	r3, [r4, #0]
 8003f1a:	bd38      	pop	{r3, r4, r5, pc}
 8003f1c:	200005f0 	.word	0x200005f0

08003f20 <_init>:
 8003f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f22:	bf00      	nop
 8003f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f26:	bc08      	pop	{r3}
 8003f28:	469e      	mov	lr, r3
 8003f2a:	4770      	bx	lr

08003f2c <_fini>:
 8003f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2e:	bf00      	nop
 8003f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f32:	bc08      	pop	{r3}
 8003f34:	469e      	mov	lr, r3
 8003f36:	4770      	bx	lr
